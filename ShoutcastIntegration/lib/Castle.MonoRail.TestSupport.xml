<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Castle.MonoRail.TestSupport</name>
    </assembly>
    <members>
        <member name="T:Castle.MonoRail.TestSupport.AbstractMRTestCase">
            <summary>
            Base class for tests cases using the ASP.Net Runtime 
            to run the web project. Deprecated.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.TestSupport.AbstractMRTestCase.ReinstateRequest(System.Byte[])">
            <summary>
            Reinstates the request.
            </summary>
            <param name="serializedRequest">The serialized request.</param>
        </member>
        <member name="M:Castle.MonoRail.TestSupport.AbstractMRTestCase.GetSerializedRequest">
            <summary>
            Gets the serialized request.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.TestSupport.AbstractMRTestCase.DoGet(System.String,System.String[])">
            <summary>
            Performs a GET operation on the specified path.
            </summary>
            <example>
            <code>
            DoGet("home/index.rails");
            </code>
            </example>
            <param name="path">The resource being request, for example <c>home/index.rails</c></param>
            <param name="queryStringParams">A list of key/value pair, for example <c>name=johndoe</c></param>
        </member>
        <member name="M:Castle.MonoRail.TestSupport.AbstractMRTestCase.DoGet(System.String,System.Boolean,System.String[])">
            <summary>
            Performs a GET operation on the specified path.
            </summary>
            <example><code>
            DoGet("home/index.rails");</code>
            </example>
            <param name="path">The resource being request, for example <c>home/index.rails</c></param>
            <param name="resendCookies">if set to <c>true</c> [resend cookies].</param>
            <param name="queryStringParams">A list of key/value pair, for example <c>name=johndoe</c></param>
        </member>
        <member name="M:Castle.MonoRail.TestSupport.AbstractMRTestCase.DoPost(System.String,System.String[])">
            <summary>
            Performs a POST operation on the specified path.
            </summary>
            <example>
            <code>
            DoPost("producto/search.rails", "name=mac", "page=1");
            </code>
            </example>
            <param name="path">The resource being request, for example <c>home/index.rails</c></param>
            <param name="postStringParams">A list of key/value pair, for example <c>name=johndoe</c></param>
        </member>
        <member name="M:Castle.MonoRail.TestSupport.AbstractMRTestCase.DoPost(System.String,System.Boolean,System.String[])">
            <summary>
            Performs a POST operation on the specified path.
            </summary>
            <example>
            <code>
            DoPost("producto/search.rails", "name=mac", "page=1");
            </code>
            </example>
            <param name="path">The resource being request, for example <c>home/index.rails</c></param>
            <param name="resendCookies">if set to <c>true</c> [resend cookies].</param>
            <param name="postStringParams">A list of key/value pair, for example <c>name=johndoe</c></param>
        </member>
        <member name="M:Castle.MonoRail.TestSupport.AbstractMRTestCase.DoHead(System.String,System.String[])">
            <summary>
            Performs a HEAD operation on the specified path.
            </summary>
            <example>
            <code>
            DoHead("producto/search.rails", "name=mac", "page=1");
            </code>
            </example>
            <param name="path">The resource being request, for example <c>home/index.rails</c></param>
            <param name="postStringParams">A list of key/value pair, for example <c>name=johndoe</c></param>
        </member>
        <member name="M:Castle.MonoRail.TestSupport.AbstractMRTestCase.AssertResponseNodeCount(System.String,System.Int32)">
            <summary>
            Asserts that the response contains a number of nodes matching an XPath expression.
            </summary>
            <param name="xpathExpression">The xpath expression to match against.</param>
            <param name="numberOfExpectedNodes">The number of expected nodes.</param>
        </member>
        <member name="M:Castle.MonoRail.TestSupport.AbstractMRTestCase.AssertNotRedirectedTo(System.String)">
            <summary>
            Asserts that the response was NOT a redirect to the specified
            <c>url</c> - for example check that your request was not sent to a login screen.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.TestSupport.AbstractMRTestCase.AssertSuccess">
            <summary>
            Asserts the return status code is less than 400
            </summary>
        </member>
        <member name="M:Castle.MonoRail.TestSupport.AbstractMRTestCase.AssertReplyEqualTo(System.String)">
            <summary>
            Asserts that reply has exactly the samme 
            content of <c>expectedContents</c>
            </summary>
            <param name="expectedContents"></param>
        </member>
        <member name="M:Castle.MonoRail.TestSupport.AbstractMRTestCase.AssertReplyStartsWith(System.String)">
            <summary>
            Asserts that reply starts with 
            <c>expectedContents</c>
            </summary>
        </member>
        <member name="M:Castle.MonoRail.TestSupport.AbstractMRTestCase.AssertReplyEndsWith(System.String)">
            <summary>
            Asserts that reply ends with 
            <c>expectedContents</c>
            </summary>
        </member>
        <member name="M:Castle.MonoRail.TestSupport.AbstractMRTestCase.AssertReplyContains(System.String)">
            <summary>
            Asserts that reply contains the specified
            <c>expectedContents</c>
            </summary>
        </member>
        <member name="M:Castle.MonoRail.TestSupport.AbstractMRTestCase.AssertReplyIsBlank">
            <summary>
            Asserts that reply have only whitespace characters
            </summary>
        </member>
        <member name="M:Castle.MonoRail.TestSupport.AbstractMRTestCase.AssertReplyMatch(System.String)">
            <summary>
            Asserts that reply contents match the specified pattern, ignoring any whitespaces
            <c>pattern</c>
            </summary>
        </member>
        <member name="M:Castle.MonoRail.TestSupport.AbstractMRTestCase.AssertReplyMatch(System.String,System.Boolean)">
            <summary>
            Asserts that reply contents match the specified pattern
            <c>pattern</c>
            </summary>
        </member>
        <member name="M:Castle.MonoRail.TestSupport.AbstractMRTestCase.AssertReplyMatch(System.String,System.Boolean,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            Asserts that reply contents match the specified pattern
            <c>pattern</c>
            </summary>
        </member>
        <member name="M:Castle.MonoRail.TestSupport.AbstractMRTestCase.AssertReplyDoesNotContain(System.String)">
            <summary>
            Asserts that reply does not contain
            <c>expectedContents</c>
            </summary>
        </member>
        <member name="M:Castle.MonoRail.TestSupport.AbstractMRTestCase.AssertRedirectedTo(System.String)">
            <summary>
            Asserts that the response was a redirect to the specified
            <c>url</c>
            </summary>
        </member>
        <member name="M:Castle.MonoRail.TestSupport.AbstractMRTestCase.AssertContentTypeEqualsTo(System.String)">
            <summary>
            Asserts that the content-type header is equals to the specified
            value
            </summary>
            <param name="expectedContentType">value to assert to</param>
        </member>
        <member name="M:Castle.MonoRail.TestSupport.AbstractMRTestCase.AssertContentTypeStartsWith(System.String)">
            <summary>
            Asserts that the content-type header starts with to the specified
            value
            </summary>
            <param name="expectedContentType">value to assert to</param>
        </member>
        <member name="M:Castle.MonoRail.TestSupport.AbstractMRTestCase.AssertContentTypeEndsWith(System.String)">
            <summary>
            Asserts that the content-type header ends with the specified
            value
            </summary>
            <param name="expectedContentType">value to assert to</param>
        </member>
        <member name="M:Castle.MonoRail.TestSupport.AbstractMRTestCase.AssertHasHeader(System.String)">
            <summary>
            Asserts that response contains the specified header.
            </summary>
            <param name="headerName">value to assert to</param>
        </member>
        <member name="M:Castle.MonoRail.TestSupport.AbstractMRTestCase.AssertPropertyBagContains(System.String)">
            <summary>
            Asserts that PropertyBag contains the specified key.
            </summary>
            <param name="entryKey">key name</param>
        </member>
        <member name="M:Castle.MonoRail.TestSupport.AbstractMRTestCase.AssertPropertyBagEntryEquals(System.String,System.Object)">
            <summary>
            Asserts that PropertyBag's entry value equals to the specified value.
            </summary>
            <param name="entryKey">key name</param>
            <param name="expectedValue">value to assert to</param>
        </member>
        <member name="M:Castle.MonoRail.TestSupport.AbstractMRTestCase.AssertFlashContains(System.String)">
            <summary>
            Asserts that Flash contains the specified key.
            </summary>
            <param name="entryKey">key name</param>
        </member>
        <member name="M:Castle.MonoRail.TestSupport.AbstractMRTestCase.AssertFlashDoesNotContain(System.String)">
            <summary>
            Asserts that Flash does not contains the specified key.
            </summary>
            <param name="entryKey">key name</param>
        </member>
        <member name="M:Castle.MonoRail.TestSupport.AbstractMRTestCase.AssertFlashEntryEquals(System.String,System.Object)">
            <summary>
            Asserts that Flash's entry value equals to the specified value.
            </summary>
            <param name="entryKey">key name</param>
            <param name="expectedValue">value to assert to</param>
        </member>
        <member name="M:Castle.MonoRail.TestSupport.AbstractMRTestCase.AssertSessionContains(System.String)">
            <summary>
            Asserts that Session contains the specified key.
            </summary>
            <param name="entryKey">key name</param>
        </member>
        <member name="M:Castle.MonoRail.TestSupport.AbstractMRTestCase.AssertSessionDoesNotContain(System.String)">
            <summary>
            Asserts that Session does not contains the specified key.
            </summary>
            <param name="entryKey">key name</param>
        </member>
        <member name="M:Castle.MonoRail.TestSupport.AbstractMRTestCase.AssertSessionEntryEqualsTo(System.String,System.Object)">
            <summary>
            Asserts that Session's entry value equals to the specified value.
            </summary>
            <param name="entryKey">key name</param>
            <param name="expectedValue">value to assert to</param>
        </member>
        <member name="M:Castle.MonoRail.TestSupport.AbstractMRTestCase.AssertHasCookie(System.String)">
            <summary>
            Asserts that the response contains the specified cookie.
            </summary>
            <param name="cookieName">cookie name</param>
        </member>
        <member name="M:Castle.MonoRail.TestSupport.AbstractMRTestCase.AssertCookieValueEqualsTo(System.String,System.String)">
            <summary>
            Asserts that Response cookie entry value equals to the specified value.
            </summary>
            <param name="cookieName">cookie name</param>
            <param name="expectedValue">value to assert to</param>
        </member>
        <member name="M:Castle.MonoRail.TestSupport.AbstractMRTestCase.AssertCookieExpirationEqualsTo(System.String,System.DateTime)">
            <summary>
            Asserts that the response cookie has the specified expiration.
            </summary>
            <param name="cookieName">cookie name</param>
            <param name="expectedExpiration">value to assert to</param>
        </member>
        <member name="M:Castle.MonoRail.TestSupport.AbstractMRTestCase.ResendCookies">
            <summary>
            Ensures that cookies (and therefore the session) will persist between requests,
            emulating the behaviour of a genuine web client.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.TestSupport.AbstractMRTestCase.Request">
            <summary>
            Gets the <c>TestRequest</c>
            </summary>
        </member>
        <member name="P:Castle.MonoRail.TestSupport.AbstractMRTestCase.Response">
            <summary>
            Gets the <c>TestResponse</c>
            </summary>
        </member>
        <member name="P:Castle.MonoRail.TestSupport.AbstractMRTestCase.Output">
            <summary>
            Gets the request response
            </summary>
        </member>
        <member name="P:Castle.MonoRail.TestSupport.AbstractMRTestCase.SessionId">
            <summary>
            Returns the sessionId related to the current session
            </summary>
        </member>
        <member name="T:Castle.MonoRail.TestSupport.BaseControllerTest">
            <summary>
            Base class that set ups the necessary infrastructure 
            to test controllers without the need
            for an ASP.Net Runtime. 
            </summary>
            
            <example>
            The following code is an example of a controller test:
            
            <code lang="cs">
            [TestFixture]
            public class LoginControllerTestCase : BaseControllerTest
            {
            	private LoginController controller;
            
            	[SetUp]
            	public void Init()
            	{
            		controller = new LoginController();
            		PrepareController(controller);
            	}
            
            	[Test]
            	public void Authenticate_Should_Use_The_AuthenticationService()
            	{
            		// set up a mock authentication service before
            
            		controller.Authenticate("username", "my password", false);
            
            		Assert.AreEqual(3, controller.PropertyBag.Count);
            		Assert.AreEqual("username", controller.PropertyBag["username"]);
            		Assert.AreEqual("my password", controller.PropertyBag["password"]);
            		Assert.AreEqual(false, controller.PropertyBag["autoLogin"]);
            	}
            }
            </code>
            
            <para>
            The following is a more sophisticate test for an action that sends emails.
            </para>
            
            <code lang="cs">
            [Test]
            public void Register_Should_Add_Registration_Using_The_Repository()
            {
            	Registration reg = new Registration("John Doe", "johndoe@gmail.com");
            
            	using(mockRepository.Record())
            	{
            		registrationRepositoryMock.Add(reg);
            	}
            
            	using(mockRepository.Playback())
            	{
            		controller.Register(reg); // This action sends two emails
            
            		Assert.IsTrue(HasRenderedEmailTemplateNamed("emailToManager"));
            		Assert.IsTrue(HasRenderedEmailTemplateNamed("emailToParticipant"));
            
            		Assert.AreEqual("manager@gmail.com", MessagesSent[0].To);
            		Assert.AreEqual("johndoe@gmail.com", MessagesSent[1].To);
            
            		Assert.AreEqual("Registration\\Success", controller.SelectedViewName);
            	}
            }
            </code>
            
            </example>
            
            <remarks>
            You must invoke <see cref="M:Castle.MonoRail.TestSupport.BaseControllerTest.PrepareController(Castle.MonoRail.Framework.Controller)"/> -- or a different overload -
            before making invocations to the controller.
            </remarks>
        </member>
        <member name="M:Castle.MonoRail.TestSupport.BaseControllerTest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.TestSupport.BaseControllerTest"/> class.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.TestSupport.BaseControllerTest.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.TestSupport.BaseControllerTest"/> class.
            </summary>
            <param name="domain">The domain.</param>
            <param name="domainPrefix">The domain prefix.</param>
            <param name="port">The port.</param>
        </member>
        <member name="M:Castle.MonoRail.TestSupport.BaseControllerTest.OnSetUp">
            <summary>
            Override to perform any pre-test set up
            </summary>
        </member>
        <member name="M:Castle.MonoRail.TestSupport.BaseControllerTest.PrepareController(Castle.MonoRail.Framework.Controller)">
            <summary>
            Prepares the controller giving it mock implementations
            of the service it requires to function normally.
            </summary>
            <param name="controller">The controller.</param>
        </member>
        <member name="M:Castle.MonoRail.TestSupport.BaseControllerTest.PrepareController(Castle.MonoRail.Framework.Controller,Castle.MonoRail.TestSupport.ContextInitializer)">
            <summary>
            Prepares the controller giving it mock implementations
            of the service it requires to function normally.
            </summary>
            <param name="controller">The controller.</param>
            <param name="contextInitializer">The context initializer.</param>
        </member>
        <member name="M:Castle.MonoRail.TestSupport.BaseControllerTest.PrepareController(Castle.MonoRail.Framework.Controller,System.String,System.String)">
            <summary>
            Prepares the controller giving it mock implementations
            of the service it requires to function normally.
            </summary>
            <param name="controller">The controller.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
        </member>
        <member name="M:Castle.MonoRail.TestSupport.BaseControllerTest.PrepareController(Castle.MonoRail.Framework.Controller,System.String,System.String,System.String)">
            <summary>
            Prepares the controller giving it mock implementations
            of the service it requires to function normally.
            </summary>
            <param name="controller">The controller.</param>
            <param name="areaName">Name of the area (cannot be null).</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
        </member>
        <member name="M:Castle.MonoRail.TestSupport.BaseControllerTest.BuildRailsContext(System.String,System.String,System.String)">
            <summary>
            Constructs a mock context.
            </summary>
            <param name="areaName">Name of the area.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
        </member>
        <member name="M:Castle.MonoRail.TestSupport.BaseControllerTest.BuildRequest">
            <summary>
            Builds the request.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.TestSupport.BaseControllerTest.BuildResponse">
            <summary>
            Builds the response.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.TestSupport.BaseControllerTest.BuildTrace">
            <summary>
            Builds the trace.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.TestSupport.BaseControllerTest.BuildRailsEngineContext(Castle.MonoRail.Framework.IRequest,Castle.MonoRail.Framework.IResponse,Castle.MonoRail.Framework.ITrace,Castle.MonoRail.Framework.UrlInfo)">
            <summary>
            Builds the a mock context. You can override this method to 
            create a special configured mock context.
            </summary>
            <param name="request">The request.</param>
            <param name="response">The response.</param>
            <param name="trace">The trace.</param>
            <param name="urlInfo">The URL info.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.TestSupport.BaseControllerTest.BuildUrlInfo(System.String,System.String,System.String)">
            <summary>
            Builds the URL info that represents the contextual Url.
            </summary>
            <param name="areaName">Name of the area.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.TestSupport.BaseControllerTest.HasRenderedEmailTemplateNamed(System.String)">
            <summary>
            Determines whether a specified template was rendered -- to send an email.
            </summary>
            <param name="templateName">Name of the template.</param>
            <returns>
            	<c>true</c> if was rendered; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Castle.MonoRail.TestSupport.BaseControllerTest.Cookies">
            <summary>
            Gets the cookies.
            </summary>
            <value>The cookies.</value>
        </member>
        <member name="P:Castle.MonoRail.TestSupport.BaseControllerTest.Context">
            <summary>
            Gets the context.
            </summary>
            <value>The context.</value>
        </member>
        <member name="P:Castle.MonoRail.TestSupport.BaseControllerTest.Request">
            <summary>
            Gets the request.
            </summary>
            <value>The request.</value>
        </member>
        <member name="P:Castle.MonoRail.TestSupport.BaseControllerTest.Response">
            <summary>
            Gets the response.
            </summary>
            <value>The response.</value>
        </member>
        <member name="P:Castle.MonoRail.TestSupport.BaseControllerTest.Trace">
            <summary>
            Gets the trace.
            </summary>
            <value>The trace.</value>
        </member>
        <member name="P:Castle.MonoRail.TestSupport.BaseControllerTest.MessagesSent">
            <summary>
            Gets the fake email messages sent.
            </summary>
            <value>The messages sent.</value>
        </member>
        <member name="P:Castle.MonoRail.TestSupport.BaseControllerTest.RenderedEmailTemplates">
            <summary>
            Gets the rendered email templates.
            </summary>
            <value>The rendered email templates.</value>
        </member>
        <member name="T:Castle.MonoRail.TestSupport.BaseViewComponentTest">
            <summary>
            Base class to test view components.
            </summary>
            
            <example>
            The following test makes sure the component rendered the inner sections correctly.
            <code lang="cs">
            [TestFixture]
            public class DiggStylePaginationTestCase : BaseViewComponentTest
            {
            	private DiggStylePagination diggComponent;
            	private IPaginatedPage singlePage, secondPageOfThree;
            	
            	[SetUp]
            	public void Init()
            	{
            		diggComponent = new DiggStylePagination();
            		singlePage = new Page(new string[] { "a", "b", "c" }, 1, 4, 1);
            		secondPageOfThree = new Page(new string[] { "a", "b", "c", "d" }, 2, 4, 10);
            	}
            
            	[TearDown]
            	public void Terminate()
            	{
            		CleanUp();
            	}
            
            	[Test]
            	public void PageWithNoLinksInvokesStartAndEndSections()
            	{
            		List&lt;string&gt; actions = new List&lt;string&gt;();
            		// pass mock inner sections to component
            		SectionRender["startblock"] = delegate(IDictionary context, TextWriter writer) { actions.Add("started"); };
            		SectionRender["endblock"] = delegate(IDictionary context, TextWriter writer) { actions.Add("ended"); };
            		SectionRender["link"] = delegate(IDictionary context, TextWriter writer) { actions.Add("link"); };
            		
            		diggComponent.Page = singlePage;
            		
            		PrepareViewComponent(diggComponent);
            		diggComponent.Render();
            
            		// make sure component "rendered" inner sections
            		Assert.AreEqual(2, actions.Count);
            		Assert.AreEqual("started", actions[0]);
            		Assert.AreEqual("ended", actions[1]);
            	}
            }
            </code>
            </example>
            
            <remarks>
            You must call <see cref="M:Castle.MonoRail.TestSupport.BaseViewComponentTest.PrepareViewComponent(Castle.MonoRail.Framework.ViewComponent)"/> before testing a view component instance
            and you should call <see cref="M:Castle.MonoRail.TestSupport.BaseViewComponentTest.CleanUp"/> after each test case (use the TearDown).
            </remarks>
        </member>
        <member name="F:Castle.MonoRail.TestSupport.BaseViewComponentTest.SectionRender">
            <summary>
            Use this dictionary to add inner sections as available inner sections to 
            the view component.  
            </summary>
        </member>
        <member name="F:Castle.MonoRail.TestSupport.BaseViewComponentTest.OnBodyRender">
            <summary>
            This delegate is called when the viewcomponent renders its body.
            </summary>
        </member>
        <member name="F:Castle.MonoRail.TestSupport.BaseViewComponentTest.OnViewRender">
            <summary>
            This delegate is called when the viewcomponent renders a view
            </summary>
        </member>
        <member name="M:Castle.MonoRail.TestSupport.BaseViewComponentTest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.TestSupport.BaseViewComponentTest"/> class.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.TestSupport.BaseViewComponentTest.PrepareViewComponent(Castle.MonoRail.Framework.ViewComponent)">
            <summary>
            Initialize the view component with mock services it needs to 
            be functional.
            </summary>
            <param name="component">The component instance.</param>
        </member>
        <member name="M:Castle.MonoRail.TestSupport.BaseViewComponentTest.CleanUp">
            <summary>
            Cleans the up all state created to test a view component.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.TestSupport.BaseViewComponentTest.BuildViewEngine">
            <summary>
            Builds the view engine.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.TestSupport.BaseViewComponentTest.BuildViewComponentContext(System.String)">
            <summary>
            Builds the view component context.
            </summary>
            <param name="viewComponentName">Name of the view component.</param>
            <returns></returns>
        </member>
        <member name="P:Castle.MonoRail.TestSupport.BaseViewComponentTest.Output">
            <summary>
            Gets the output -- ie what the viewcomponent wrote to the output stream.
            </summary>
            <value>The output.</value>
        </member>
        <member name="T:Castle.MonoRail.TestSupport.GenericBaseControllerTest`1">
            <summary>
            Base controller test that uses the controller as a generic parameter.
            </summary>
            <typeparam name="C">Controller type</typeparam>
        </member>
        <member name="F:Castle.MonoRail.TestSupport.GenericBaseControllerTest`1.controller">
            <summary>
            The typed controller instance
            </summary>
        </member>
        <member name="T:Castle.MonoRail.TestSupport.GenericBaseWizardStepTest`2">
            <summary>
            Base test for wizard steps.
            </summary>
            <typeparam name="W">The wizard step page type</typeparam>
            <typeparam name="C">The wizard controller -- the one that implements <see cref="T:Castle.MonoRail.Framework.IWizardController"/></typeparam>
        </member>
        <member name="F:Castle.MonoRail.TestSupport.GenericBaseWizardStepTest`2.wizardStep">
            <summary>
            The step typed field
            </summary>
        </member>
        <member name="M:Castle.MonoRail.TestSupport.GenericBaseWizardStepTest`2.RunIsPreConditionSatisfied">
            <summary>
            Runs the page pre-condition
            </summary>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.TestSupport.GenericBaseWizardStepTest`2.RunRenderWizardView">
            <summary>
            Runs the step render method.
            </summary>
        </member>
        <member name="T:Castle.MonoRail.TestSupport.MonoRailTestWorkerRequest">
            <summary>
            Used to integrate with the ASP.Net Runtime
            </summary>
        </member>
        <member name="T:Castle.MonoRail.TestSupport.WebServer">
            <summary>
            Manages a <see cref="T:Cassini.Server"/> instance. This is useful 
            to start/stop a lightweight webserver to run acceptance tests.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.TestSupport.WebServer.StartWebServer">
            <summary>
            Starts the web server. The web project folder is going to be 
            extracted from the appSettings.webapp entry (from the configuration file)
            <para>
            If the path is relative, it is going to be converted to an absolute path.
            </para>
            </summary>
        </member>
        <member name="M:Castle.MonoRail.TestSupport.WebServer.StartWebServer(System.String)">
            <summary>
            Starts the web server using the specified web project path. Note 
            that the path must be absolute. 
            </summary>
            <param name="webApplicationAbsolutePath">The web application absolute path.</param>
        </member>
        <member name="M:Castle.MonoRail.TestSupport.WebServer.StopWebServer">
            <summary>
            Stops the web server.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.TestSupport.WebServer.Port">
            <summary>
            Gets or sets the port to run the server. Defaults to 88.
            </summary>
            <value>The port.</value>
        </member>
        <member name="P:Castle.MonoRail.TestSupport.WebServer.VirtualDir">
            <summary>
            Gets or sets the virtual dir to be used by the server. Defaults to <c>/</c>
            </summary>
            <value>The virtual dir.</value>
        </member>
        <member name="P:Castle.MonoRail.TestSupport.WebServer.Started">
            <summary>
            Gets a value indicating whether this <see cref="T:Castle.MonoRail.TestSupport.WebServer"/> is started.
            </summary>
            <value><c>true</c> if started; otherwise, <c>false</c>.</value>
        </member>
    </members>
</doc>
