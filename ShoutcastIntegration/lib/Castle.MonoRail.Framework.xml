<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Castle.MonoRail.Framework</name>
    </assembly>
    <members>
        <member name="T:Castle.MonoRail.Framework.Adapters.DefaultRailsEngineContext">
            <summary>
            Adapter to expose a valid <see cref="T:Castle.MonoRail.Framework.IRailsEngineContext"/> 
            implementation on top of <c>HttpContext</c>.
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.Services.AbstractServiceContainer">
            <summary>
            Basic implementation of <see cref="T:System.ComponentModel.Design.IServiceContainer"/>
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.AbstractServiceContainer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.Services.AbstractServiceContainer"/> class.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.AbstractServiceContainer.#ctor(System.ComponentModel.Design.IServiceContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.Services.AbstractServiceContainer"/> class.
            </summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.AbstractServiceContainer.AddService(System.Type,System.Object)">
            <summary>
            Adds the specified service to the service container.
            </summary>
            <param name="serviceType">The type of service to add.</param>
            <param name="serviceInstance">An instance of the service type to add. This object must implement or inherit from the type indicated by the serviceType parameter.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.AbstractServiceContainer.AddService(System.Type,System.Object,System.Boolean)">
            <summary>
            Adds the specified service to the service container, and optionally promotes the service to any parent service containers.
            </summary>
            <param name="serviceType">The type of service to add.</param>
            <param name="serviceInstance">An instance of the service type to add. This object must implement or inherit from the type indicated by the serviceType parameter.</param>
            <param name="promote">true to promote this request to any parent service containers; otherwise, false.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.AbstractServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback)">
            <summary>
            Adds the specified service to the service container.
            </summary>
            <param name="serviceType">The type of service to add.</param>
            <param name="callback">A callback object that is used to create the service. This allows a service to be declared as available, but delays the creation of the object until the service is requested.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.AbstractServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback,System.Boolean)">
            <summary>
            Adds the specified service to the service container, and optionally promotes the service to parent service containers.
            </summary>
            <param name="serviceType">The type of service to add.</param>
            <param name="callback">A callback object that is used to create the service. This allows a service to be declared as available, but delays the creation of the object until the service is requested.</param>
            <param name="promote">true to promote this request to any parent service containers; otherwise, false.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.AbstractServiceContainer.RemoveService(System.Type)">
            <summary>
            Removes the specified service type from the service container.
            </summary>
            <param name="serviceType">The type of service to remove.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.AbstractServiceContainer.RemoveService(System.Type,System.Boolean)">
            <summary>
            Removes the specified service type from the service container, and optionally promotes the service to parent service containers.
            </summary>
            <param name="serviceType">The type of service to remove.</param>
            <param name="promote">true to promote this request to any parent service containers; otherwise, false.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.AbstractServiceContainer.GetService(System.Type)">
            <summary>
            Gets the service object of the specified type.
            </summary>
            <param name="serviceType">An object that specifies the type of service object to get.</param>
            <returns>
            A service object of type serviceType.-or- null if there is no service object of type serviceType.
            </returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.AbstractServiceContainer.GetService``1">
            <summary>
            Gets the service.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="P:Castle.MonoRail.Framework.Services.AbstractServiceContainer.Parent">
            <summary>
            Gets or sets the parent container.
            </summary>
            <value>The parent.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Services.AbstractServiceContainer.ParentContainer">
            <summary>
            Gets the parent container.
            </summary>
            <value>The parent container.</value>
        </member>
        <member name="T:Castle.MonoRail.Framework.IRailsEngineContext">
            <summary>
            Represents an abstraction between the MonoRail API
            and the ASP.Net API. 
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.IRailsEngineContext.Transfer(System.String,System.Boolean)">
            <summary>
            Transfer the execution to another resource.
            </summary>
            <param name="path"></param>
            <param name="preserveForm"></param>
        </member>
        <member name="M:Castle.MonoRail.Framework.IRailsEngineContext.GetService``1">
            <summary>
            Request a service from the engine context.
            </summary>
            <typeparam name="T">Service type</typeparam>
            <returns>Service instance</returns>
        </member>
        <member name="P:Castle.MonoRail.Framework.IRailsEngineContext.RequestType">
            <summary>
            Gets the request type (GET, POST, etc)
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.IRailsEngineContext.Url">
            <summary>
            Gets the request URL.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.IRailsEngineContext.UrlReferrer">
            <summary>
            Gets the referring URL.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.IRailsEngineContext.UnderlyingContext">
            <summary>
            Gets the underlying context of the API being used.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.IRailsEngineContext.Params">
            <summary>
            Access the params (Query, Post, headers and Cookies)
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.IRailsEngineContext.Session">
            <summary>
            Access the session objects.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.IRailsEngineContext.Request">
            <summary>
            Gets the request object.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.IRailsEngineContext.Response">
            <summary>
            Gets the response object.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.IRailsEngineContext.Trace">
            <summary>
            Gets the trace object.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.IRailsEngineContext.Cache">
            <summary>
            Access the Cache associated with this 
            web execution context.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.IRailsEngineContext.Flash">
            <summary>
            Access a dictionary of volative items.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.IRailsEngineContext.CurrentUser">
            <summary>
            Gets or sets the current user.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.IRailsEngineContext.LastException">
            <summary>
            Gets the last exception raised during
            the execution of an action.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.IRailsEngineContext.ApplicationPath">
            <summary>
            Returns the application path.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.IRailsEngineContext.ApplicationPhysicalPath">
            <summary>
            Returns the physical application path.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.IRailsEngineContext.UrlInfo">
            <summary>
            Returns the <see cref="P:Castle.MonoRail.Framework.IRailsEngineContext.UrlInfo"/> of the the current request.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.IRailsEngineContext.Server">
            <summary>
            Returns an <see cref="T:Castle.MonoRail.Framework.IServerUtility"/>.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.IRailsEngineContext.Items">
            <summary>
            Returns the Items collection from the current HttpContext.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.IRailsEngineContext.CurrentController">
            <summary>
            Gets or sets the current controller.
            </summary>
            <value>The current controller.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.IRailsEngineContext.Container">
            <summary>
            If a container is available for the app, this 
            property exposes its instance.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Adapters.DefaultRailsEngineContext.#ctor(System.ComponentModel.Design.IServiceContainer,Castle.MonoRail.Framework.UrlInfo,System.Web.HttpContext,System.IServiceProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.Adapters.DefaultRailsEngineContext"/> class.
            </summary>
            <param name="parent">The parent.</param>
            <param name="urlInfo">Url information</param>
            <param name="context">The context.</param>
            <param name="container">External container instance</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Adapters.DefaultRailsEngineContext.Transfer(System.String,System.Boolean)">
            <summary>
            Transfer the execution to another resource.
            </summary>
            <param name="path"></param>
            <param name="preserveForm"></param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Adapters.DefaultRailsEngineContext.ResolveRequestSession">
            <summary>
            Resolves the request session.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.Adapters.DefaultRailsEngineContext.LastException">
            <summary>
            Gets the last exception raised during
            the execution of an action.
            </summary>
            <value></value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Adapters.DefaultRailsEngineContext.RequestType">
            <summary>
            Gets the request type (GET, POST, etc)
            </summary>
            <value></value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Adapters.DefaultRailsEngineContext.Url">
            <summary>
            Gets the request URL.
            </summary>
            <value></value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Adapters.DefaultRailsEngineContext.UrlReferrer">
            <summary>
            Gets the referring URL.
            </summary>
            <value></value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Adapters.DefaultRailsEngineContext.UnderlyingContext">
            <summary>
            Gets the underlying context of the API being used.
            </summary>
            <value></value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Adapters.DefaultRailsEngineContext.Params">
            <summary>
            Access the params (Query, Post, headers and Cookies)
            </summary>
            <value></value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Adapters.DefaultRailsEngineContext.Session">
            <summary>
            Access the session objects.
            </summary>
            <value></value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Adapters.DefaultRailsEngineContext.Request">
            <summary>
            Gets the request object.
            </summary>
            <value></value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Adapters.DefaultRailsEngineContext.Response">
            <summary>
            Gets the response object.
            </summary>
            <value></value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Adapters.DefaultRailsEngineContext.Trace">
            <summary>
            Gets the trace object.
            </summary>
            <value></value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Adapters.DefaultRailsEngineContext.Server">
            <summary>
            Returns an <see cref="T:Castle.MonoRail.Framework.IServerUtility"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Adapters.DefaultRailsEngineContext.Cache">
            <summary>
            Access the Cache associated with this
            web execution context.
            </summary>
            <value></value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Adapters.DefaultRailsEngineContext.Flash">
            <summary>
            Access a dictionary of volative items.
            </summary>
            <value></value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Adapters.DefaultRailsEngineContext.CurrentUser">
            <summary>
            Gets or sets the current user.
            </summary>
            <value></value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Adapters.DefaultRailsEngineContext.UrlInfo">
            <summary>
            Returns the <see cref="P:Castle.MonoRail.Framework.Adapters.DefaultRailsEngineContext.UrlInfo"/> of the the current request.
            </summary>
            <value></value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Adapters.DefaultRailsEngineContext.ApplicationPath">
            <summary>
            Returns the application path.
            </summary>
            <value></value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Adapters.DefaultRailsEngineContext.ApplicationPhysicalPath">
            <summary>
            Returns the physical application path.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.Adapters.DefaultRailsEngineContext.Items">
            <summary>
            Returns the Items collection from the current HttpContext.
            </summary>
            <value></value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Adapters.DefaultRailsEngineContext.CurrentController">
            <summary>
            Gets or sets the current controller.
            </summary>
            <value>The current controller.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Adapters.DefaultRailsEngineContext.Container">
            <summary>
            If a container is available for the app, this 
            property exposes its instance.
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.Adapters.FileDictionaryAdapter">
            <summary>
            Adapts the ASP.Net HttpFileCollection to MonoRail dictionary
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Adapters.FileDictionaryAdapter.#ctor(System.Web.HttpFileCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.Adapters.FileDictionaryAdapter"/> class.
            </summary>
            <param name="fileCollection">The file collection.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Adapters.FileDictionaryAdapter.Contains(System.Object)">
            <summary>
            Determines whether the <see cref="T:System.Collections.IDictionary"></see> object contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:System.Collections.IDictionary"></see> object.</param>
            <returns>
            true if the <see cref="T:System.Collections.IDictionary"></see> contains an element with the key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">key is null. </exception>
        </member>
        <member name="M:Castle.MonoRail.Framework.Adapters.FileDictionaryAdapter.Add(System.Object,System.Object)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.IDictionary"></see> object.
            </summary>
            <param name="key">The <see cref="T:System.Object"></see> to use as the key of the element to add.</param>
            <param name="value">The <see cref="T:System.Object"></see> to use as the value of the element to add.</param>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.Collections.IDictionary"></see> object. </exception>
            <exception cref="T:System.ArgumentNullException">key is null. </exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IDictionary"></see> is read-only.-or- The <see cref="T:System.Collections.IDictionary"></see> has a fixed size. </exception>
        </member>
        <member name="M:Castle.MonoRail.Framework.Adapters.FileDictionaryAdapter.Clear">
            <summary>
            Removes all elements from the <see cref="T:System.Collections.IDictionary"></see> object.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IDictionary"></see> object is read-only. </exception>
        </member>
        <member name="M:Castle.MonoRail.Framework.Adapters.FileDictionaryAdapter.System#Collections#IDictionary#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IDictionaryEnumerator"></see> object for the <see cref="T:System.Collections.IDictionary"></see> object.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IDictionaryEnumerator"></see> object for the <see cref="T:System.Collections.IDictionary"></see> object.
            </returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Adapters.FileDictionaryAdapter.Remove(System.Object)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.IDictionary"></see> object.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IDictionary"></see> object is read-only.-or- The <see cref="T:System.Collections.IDictionary"></see> has a fixed size. </exception>
            <exception cref="T:System.ArgumentNullException">key is null. </exception>
        </member>
        <member name="M:Castle.MonoRail.Framework.Adapters.FileDictionaryAdapter.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">array is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than zero. </exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or- index is equal to or greater than the length of array.-or- The number of elements in the source <see cref="T:System.Collections.ICollection"></see> is greater than the available space from index to the end of the destination array. </exception>
            <exception cref="T:System.InvalidCastException">The type of the source <see cref="T:System.Collections.ICollection"></see> cannot be cast automatically to the type of the destination array. </exception>
        </member>
        <member name="M:Castle.MonoRail.Framework.Adapters.FileDictionaryAdapter.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Castle.MonoRail.Framework.Adapters.FileDictionaryAdapter.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.ICollection"></see> object containing the keys of the <see cref="T:System.Collections.IDictionary"></see> object.
            </summary>
            <value></value>
            <returns>An <see cref="T:System.Collections.ICollection"></see> object containing the keys of the <see cref="T:System.Collections.IDictionary"></see> object.</returns>
        </member>
        <member name="P:Castle.MonoRail.Framework.Adapters.FileDictionaryAdapter.Values">
            <summary>
            Gets an <see cref="T:System.Collections.ICollection"></see> object containing the values in the <see cref="T:System.Collections.IDictionary"></see> object.
            </summary>
            <value></value>
            <returns>An <see cref="T:System.Collections.ICollection"></see> object containing the values in the <see cref="T:System.Collections.IDictionary"></see> object.</returns>
        </member>
        <member name="P:Castle.MonoRail.Framework.Adapters.FileDictionaryAdapter.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IDictionary"></see> object is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.IDictionary"></see> object is read-only; otherwise, false.</returns>
        </member>
        <member name="P:Castle.MonoRail.Framework.Adapters.FileDictionaryAdapter.IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IDictionary"></see> object has a fixed size.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.IDictionary"></see> object has a fixed size; otherwise, false.</returns>
        </member>
        <member name="P:Castle.MonoRail.Framework.Adapters.FileDictionaryAdapter.Item(System.Object)">
            <summary>
            Gets or sets the <see cref="T:System.Object"/> with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Adapters.FileDictionaryAdapter.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.ICollection"></see>.
            </summary>
            <value></value>
            <returns>The number of elements contained in the <see cref="T:System.Collections.ICollection"></see>.</returns>
        </member>
        <member name="P:Castle.MonoRail.Framework.Adapters.FileDictionaryAdapter.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.
            </summary>
            <value></value>
            <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.</returns>
        </member>
        <member name="P:Castle.MonoRail.Framework.Adapters.FileDictionaryAdapter.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe).
            </summary>
            <value></value>
            <returns>true if access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe); otherwise, false.</returns>
        </member>
        <member name="T:Castle.MonoRail.Framework.Adapters.RequestAdapter">
            <summary>
            This class adapts the <c>HttpRequest</c> to a MonoRail <c>IRequest</c>.
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.IRequest">
            <summary>
            Represents the request data
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.IRequest.BinaryRead(System.Int32)">
            <summary>
            Reads the request data as a byte array.
            </summary>
            <param name="count">How many bytes.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.IRequest.ReadCookie(System.String)">
            <summary>
            Reads the cookie.
            </summary>
            <param name="name">The cookie name.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.IRequest.ValidateInput">
            <summary>
            Validates the input.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.IRequest.Headers">
            <summary>
            Gets the Http headers.
            </summary>
            <value>The Http headers.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.IRequest.Files">
            <summary>
            Gets the <see cref="T:System.Web.HttpPostedFile"/> per key.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.IRequest.Params">
            <summary>
            Gets the params which accumulates headers, post, querystring and cookies.
            </summary>
            <value>The params.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.IRequest.IsLocal">
            <summary>
            Gets a value indicating whether this requeest is from a local address.
            </summary>
            <value><c>true</c> if this instance is local; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.IRequest.RawUrl">
            <summary>
            Gets the raw URL.
            </summary>
            <value>The raw URL.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.IRequest.Uri">
            <summary>
            Gets the URI.
            </summary>
            <value>The URI.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.IRequest.HttpMethod">
            <summary>
            Gets the HTTP method.
            </summary>
            <value>The HTTP method.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.IRequest.FilePath">
            <summary>
            Gets the file path.
            </summary>
            <value>The file path.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.IRequest.Item(System.String)">
            <summary>
            Gets the param with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="P:Castle.MonoRail.Framework.IRequest.QueryString">
            <summary>
            Gets the query string.
            </summary>
            <value>The query string.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.IRequest.Form">
            <summary>
            Gets the form.
            </summary>
            <value>The form.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.IRequest.UserLanguages">
            <summary>
            Gets the user languages.
            </summary>
            <value>The user languages.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.IRequest.UserHostAddress">
            <summary>
            Gets the IP host address of the remote client. 
            </summary>
            <value>The IP address of the remote client.</value>
        </member>
        <member name="M:Castle.MonoRail.Framework.Adapters.RequestAdapter.#ctor(System.Web.HttpRequest)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.Adapters.RequestAdapter"/> class.
            </summary>
            <param name="request">The request.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Adapters.RequestAdapter.BinaryRead(System.Int32)">
            <summary>
            Reads the request data as a byte array.
            </summary>
            <param name="count">How many bytes.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Adapters.RequestAdapter.ReadCookie(System.String)">
            <summary>
            Reads the cookie.
            </summary>
            <param name="name">The cookie name.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Adapters.RequestAdapter.ValidateInput">
            <summary>
            Validates the input.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.Adapters.RequestAdapter.Headers">
            <summary>
            Gets the Http headers.
            </summary>
            <value>The Http headers.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Adapters.RequestAdapter.IsLocal">
            <summary>
            Gets a value indicating whether this requeest is from a local address.
            </summary>
            <value><c>true</c> if this instance is local; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Adapters.RequestAdapter.HttpMethod">
            <summary>
            Gets the HTTP method.
            </summary>
            <value>The HTTP method.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Adapters.RequestAdapter.Uri">
            <summary>
            Gets the URI.
            </summary>
            <value>The URI.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Adapters.RequestAdapter.RawUrl">
            <summary>
            Gets the raw URL.
            </summary>
            <value>The raw URL.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Adapters.RequestAdapter.FilePath">
            <summary>
            Gets the file path.
            </summary>
            <value>The file path.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Adapters.RequestAdapter.QueryString">
            <summary>
            Gets the query string.
            </summary>
            <value>The query string.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Adapters.RequestAdapter.Form">
            <summary>
            Gets the form.
            </summary>
            <value>The form.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Adapters.RequestAdapter.Item(System.String)">
            <summary>
            Gets the param with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Adapters.RequestAdapter.Files">
            <summary>
            Gets the <see cref="T:System.Web.HttpPostedFile"/> per key.
            </summary>
            <value></value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Adapters.RequestAdapter.Params">
            <summary>
            Gets the params which accumulates headers, post, querystring and cookies.
            </summary>
            <value>The params.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Adapters.RequestAdapter.UserLanguages">
            <summary>
            Gets the user languages.
            </summary>
            <value>The user languages.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Adapters.RequestAdapter.UserHostAddress">
            <summary>
            Gets the IP host address of the remote client.
            </summary>
            <value>The IP address of the remote client.</value>
        </member>
        <member name="T:Castle.MonoRail.Framework.Adapters.ResponseAdapter">
            <summary>
            Adapts the <see cref="T:Castle.MonoRail.Framework.IResponse"/> to
            an <see cref="T:System.Web.HttpResponse"/> instance.
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.IResponse">
            <summary>
            Represents the response data and operations
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.IResponse.AppendHeader(System.String,System.String)">
            <summary>
            Appends the header.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.IResponse.BinaryWrite(System.Byte[])">
            <summary>
            Writes the buffer to the browser
            </summary>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.IResponse.BinaryWrite(System.IO.Stream)">
            <summary>
            Writes the stream to the browser
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.IResponse.Clear">
            <summary>
            Clears the response (only works if buffered)
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.IResponse.ClearContent">
            <summary>
            Clears the response content (only works if buffered).
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.IResponse.Write(System.String)">
            <summary>
            Writes the specified string.
            </summary>
            <param name="s">The string.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.IResponse.Write(System.Object)">
            <summary>
            Writes the specified obj.
            </summary>
            <param name="obj">The obj.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.IResponse.Write(System.Char)">
            <summary>
            Writes the specified char.
            </summary>
            <param name="ch">The char.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.IResponse.Write(System.Char[],System.Int32,System.Int32)">
            <summary>
            Writes the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="index">The index.</param>
            <param name="count">The count.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.IResponse.WriteFile(System.String)">
            <summary>
            Writes the file.
            </summary>
            <param name="fileName">Name of the file.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.IResponse.Redirect(System.String,System.String)">
            <summary>
            Redirects the specified controller.
            </summary>
            <param name="controller">The controller.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.IResponse.Redirect(System.String,System.String,System.String)">
            <summary>
            Redirects the specified area.
            </summary>
            <param name="area">The area.</param>
            <param name="controller">The controller.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.IResponse.Redirect(System.String)">
            <summary>
            Redirects the specified URL.
            </summary>
            <param name="url">The URL.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.IResponse.Redirect(System.String,System.Boolean)">
            <summary>
            Redirects the specified URL.
            </summary>
            <param name="url">The URL.</param>
            <param name="endProcess">if set to <c>true</c> [end process].</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.IResponse.CreateCookie(System.String,System.String)">
            <summary>
            Creates a cookie.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.IResponse.CreateCookie(System.String,System.String,System.DateTime)">
            <summary>
            Creates a cookie.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <param name="expiration">The expiration.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.IResponse.CreateCookie(System.Web.HttpCookie)">
            <summary>
            Creates a cookie.
            </summary>
            <param name="cookie">The cookie.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.IResponse.RemoveCookie(System.String)">
            <summary>
            Removes a cookie.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="P:Castle.MonoRail.Framework.IResponse.StatusCode">
            <summary>
            Gets or sets the status code.
            </summary>
            <value>The status code.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.IResponse.ContentType">
            <summary>
            Gets or sets the type of the content.
            </summary>
            <value>The type of the content.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.IResponse.CachePolicy">
            <summary>
            Gets the caching policy (expiration time, privacy, 
            vary clauses) of a Web page.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.IResponse.CacheControlHeader">
            <summary>
            Sets the Cache-Control HTTP header to Public or Private.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.IResponse.Charset">
            <summary>
            Gets or sets the HTTP character set of the output stream.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.IResponse.Output">
            <summary>
            Gets the output.
            </summary>
            <value>The output.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.IResponse.OutputStream">
            <summary>
            Gets the output stream.
            </summary>
            <value>The output stream.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.IResponse.WasRedirected">
            <summary>
            Gets a value indicating whether the response sent a redirect.
            </summary>
            <value><c>true</c> if was redirected; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.IResponse.IsClientConnected">
            <summary>
            Gets a value indicating whether this instance is client connected.
            </summary>
            <value>
            	<c>true</c> if this instance is client connected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Castle.MonoRail.Framework.Adapters.ResponseAdapter.#ctor(System.Web.HttpResponse,Castle.MonoRail.Framework.IRailsEngineContext,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.Adapters.ResponseAdapter"/> class.
            </summary>
            <param name="response">The response.</param>
            <param name="context">The parent context.</param>
            <param name="appPath">The app path.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Adapters.ResponseAdapter.AppendHeader(System.String,System.String)">
            <summary>
            Appends the header.
            </summary>
            <param name="name">The name.</param>
            <param name="headerValue">The header value.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Adapters.ResponseAdapter.BinaryWrite(System.Byte[])">
            <summary>
            Writes the buffer to the browser
            </summary>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Adapters.ResponseAdapter.BinaryWrite(System.IO.Stream)">
            <summary>
            Writes the stream to the browser
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Adapters.ResponseAdapter.Clear">
            <summary>
            Clears the response (only works if buffered)
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Adapters.ResponseAdapter.ClearContent">
            <summary>
            Clears the response content (only works if buffered).
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Adapters.ResponseAdapter.Write(System.String)">
            <summary>
            Writes the specified string.
            </summary>
            <param name="s">The string.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Adapters.ResponseAdapter.Write(System.Object)">
            <summary>
            Writes the specified obj.
            </summary>
            <param name="obj">The obj.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Adapters.ResponseAdapter.Write(System.Char)">
            <summary>
            Writes the specified char.
            </summary>
            <param name="ch">The char.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Adapters.ResponseAdapter.Write(System.Char[],System.Int32,System.Int32)">
            <summary>
            Writes the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="index">The index.</param>
            <param name="count">The count.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Adapters.ResponseAdapter.WriteFile(System.String)">
            <summary>
            Writes the file.
            </summary>
            <param name="fileName">Name of the file.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Adapters.ResponseAdapter.Redirect(System.String)">
            <summary>
            Redirects the specified URL.
            </summary>
            <param name="url">The URL.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Adapters.ResponseAdapter.Redirect(System.String,System.Boolean)">
            <summary>
            Redirects the specified URL.
            </summary>
            <param name="url">The URL.</param>
            <param name="endProcess">if set to <c>true</c> [end process].</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Adapters.ResponseAdapter.Redirect(System.String,System.String)">
            <summary>
            Redirects the specified controller.
            </summary>
            <param name="controller">The controller.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Adapters.ResponseAdapter.Redirect(System.String,System.String,System.String)">
            <summary>
            Redirects the specified area.
            </summary>
            <param name="area">The area.</param>
            <param name="controller">The controller.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Adapters.ResponseAdapter.CreateCookie(System.String,System.String)">
            <summary>
            Creates the cookie.
            </summary>
            <param name="name">The name.</param>
            <param name="cookieValue">The cookie value.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Adapters.ResponseAdapter.CreateCookie(System.String,System.String,System.DateTime)">
            <summary>
            Creates the cookie.
            </summary>
            <param name="name">The name.</param>
            <param name="cookieValue">The cookie value.</param>
            <param name="expiration">The expiration.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Adapters.ResponseAdapter.CreateCookie(System.Web.HttpCookie)">
            <summary>
            Creates the cookie.
            </summary>
            <param name="cookie">The cookie.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Adapters.ResponseAdapter.RemoveCookie(System.String)">
            <summary>
            Removes the cookie.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="P:Castle.MonoRail.Framework.Adapters.ResponseAdapter.CachePolicy">
            <summary>
            Gets the caching policy (expiration time, privacy, 
            vary clauses) of a Web page.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.Adapters.ResponseAdapter.CacheControlHeader">
            <summary>
            Sets the Cache-Control HTTP header to Public or Private.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.Adapters.ResponseAdapter.Charset">
            <summary>
            Gets or sets the HTTP character set of the output stream.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.Adapters.ResponseAdapter.StatusCode">
            <summary>
            Gets or sets the status code.
            </summary>
            <value>The status code.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Adapters.ResponseAdapter.ContentType">
            <summary>
            Gets or sets the content type.
            </summary>
            <value>The type of the content.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Adapters.ResponseAdapter.Output">
            <summary>
            Gets the output.
            </summary>
            <value>The output.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Adapters.ResponseAdapter.OutputStream">
            <summary>
            Gets the output stream.
            </summary>
            <value>The output stream.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Adapters.ResponseAdapter.IsClientConnected">
            <summary>
            Gets a value indicating whether this instance is client connected.
            </summary>
            <value>
            	<c>true</c> if this instance is client connected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Adapters.ResponseAdapter.WasRedirected">
            <summary>
            Gets a value indicating whether the response sent a redirect.
            </summary>
            <value><c>true</c> if was redirected; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Castle.MonoRail.Framework.Adapters.ServerUtilityAdapter">
            <summary>
            Adapts the ASP.Net HttpServerUtility to MonoRail's interface for the same service.
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.IServerUtility">
            <summary>
            Represents utility methods that web servers provide
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.IServerUtility.MapPath(System.String)">
            <summary>
            Returns the physical path for the
            specified virtual path.
            </summary>
            <param name="virtualPath">The virtual path.</param>
            <returns>The mapped path</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.IServerUtility.HtmlEncode(System.String)">
            <summary>
            HTML encodes a string and returns the encoded string.  
            </summary>
            <param name="content">The text string to HTML encode.</param>
            <returns>The HTML encoded text.</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.IServerUtility.UrlEncode(System.String)">
            <summary>
            URL encodes a string and returns the encoded string.  
            </summary>
            <param name="content">The text to URL encode.</param>
            <returns>The URL encoded text.</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.IServerUtility.UrlDecode(System.String)">
            <summary>
            URL decodes a string and returns the decoded string.  
            </summary>
            <param name="content">The text to URL decode.</param>
            <returns>The URL decoded text.</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.IServerUtility.UrlPathEncode(System.String)">
            <summary>
            URL encodes the path portion of a URL string and returns the encoded string.  
            </summary>
            <param name="content">The text to URL encode.</param>
            <returns>The URL encoded text.</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.IServerUtility.JavaScriptEscape(System.String)">
            <summary>
            Escapes JavaScript with Url encoding and returns the encoded string.  
            </summary>
            <remarks>
            Converts quotes, single quotes and CR/LFs to their representation as an escape character.
            </remarks>
            <param name="content">The text to URL encode and escape JavaScript within.</param>
            <returns>The URL encoded and JavaScript escaped text.</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Adapters.ServerUtilityAdapter.#ctor(System.Web.HttpServerUtility)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.Adapters.ServerUtilityAdapter"/> class.
            </summary>
            <param name="server">The server.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Adapters.ServerUtilityAdapter.HtmlEncode(System.String)">
            <summary>
            HTML encodes a string and returns the encoded string.  
            </summary>
            <param name="content">The text string to HTML encode.</param>
            <returns>The HTML encoded text.</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Adapters.ServerUtilityAdapter.JavaScriptEscape(System.String)">
            <summary>
            Escapes JavaScript with Url encoding and returns the encoded string.  
            </summary>
            <remarks>
            Converts quotes, single quotes and CR/LFs to their representation as an escape character.
            </remarks>
            <param name="content">The text to URL encode and escape JavaScript within.</param>
            <returns>The URL encoded and JavaScript escaped text.</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Adapters.ServerUtilityAdapter.UrlEncode(System.String)">
            <summary>
            URL encodes a string and returns the encoded string.  
            </summary>
            <param name="content">The text to URL encode.</param>
            <returns>The URL encoded text.</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Adapters.ServerUtilityAdapter.UrlDecode(System.String)">
            <summary>
            URL decodes a string and returns the decoded string.  
            </summary>
            <param name="content">The text to URL decode.</param>
            <returns>The URL decoded text.</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Adapters.ServerUtilityAdapter.UrlPathEncode(System.String)">
            <summary>
            URL encodes the path portion of a URL string and returns the encoded string.  
            </summary>
            <param name="content">The text to URL encode.</param>
            <returns>The URL encoded text.</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Adapters.ServerUtilityAdapter.MapPath(System.String)">
            <summary>
            Returns the physical path for the 
            specified virtual path.
            </summary>
            <param name="virtualPath">The virtual path.</param>
            <returns>The mapped path</returns>
        </member>
        <member name="T:Castle.MonoRail.Framework.Adapters.SessionAdapter">
            <summary>
            Adapts the ASP.Net session as a simple dictionary for MonoRail
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Adapters.SessionAdapter.#ctor(System.Web.SessionState.HttpSessionState)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.Adapters.SessionAdapter"/> class.
            </summary>
            <param name="session">The session.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Adapters.SessionAdapter.System#Collections#IDictionary#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IDictionaryEnumerator"></see> object for the <see cref="T:System.Collections.IDictionary"></see> object.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IDictionaryEnumerator"></see> object for the <see cref="T:System.Collections.IDictionary"></see> object.
            </returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Adapters.SessionAdapter.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">array is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than zero. </exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or- index is equal to or greater than the length of array.-or- The number of elements in the source <see cref="T:System.Collections.ICollection"></see> is greater than the available space from index to the end of the destination array. </exception>
            <exception cref="T:System.InvalidCastException">The type of the source <see cref="T:System.Collections.ICollection"></see> cannot be cast automatically to the type of the destination array. </exception>
        </member>
        <member name="M:Castle.MonoRail.Framework.Adapters.SessionAdapter.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Adapters.SessionAdapter.Contains(System.Object)">
            <summary>
            Determines whether the <see cref="T:System.Collections.IDictionary"></see> object contains an element with the specified key.
            </summary>
            <param name="key">The key to locate in the <see cref="T:System.Collections.IDictionary"></see> object.</param>
            <returns>
            true if the <see cref="T:System.Collections.IDictionary"></see> contains an element with the key; otherwise, false.
            </returns>
            <exception cref="T:System.ArgumentNullException">key is null. </exception>
        </member>
        <member name="M:Castle.MonoRail.Framework.Adapters.SessionAdapter.Add(System.Object,System.Object)">
            <summary>
            Adds an element with the provided key and value to the <see cref="T:System.Collections.IDictionary"></see> object.
            </summary>
            <param name="key">The <see cref="T:System.Object"></see> to use as the key of the element to add.</param>
            <param name="value">The <see cref="T:System.Object"></see> to use as the value of the element to add.</param>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.Collections.IDictionary"></see> object. </exception>
            <exception cref="T:System.ArgumentNullException">key is null. </exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IDictionary"></see> is read-only.-or- The <see cref="T:System.Collections.IDictionary"></see> has a fixed size. </exception>
        </member>
        <member name="M:Castle.MonoRail.Framework.Adapters.SessionAdapter.Clear">
            <summary>
            Removes all elements from the <see cref="T:System.Collections.IDictionary"></see> object.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IDictionary"></see> object is read-only. </exception>
        </member>
        <member name="M:Castle.MonoRail.Framework.Adapters.SessionAdapter.Remove(System.Object)">
            <summary>
            Removes the element with the specified key from the <see cref="T:System.Collections.IDictionary"></see> object.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IDictionary"></see> object is read-only.-or- The <see cref="T:System.Collections.IDictionary"></see> has a fixed size. </exception>
            <exception cref="T:System.ArgumentNullException">key is null. </exception>
        </member>
        <member name="P:Castle.MonoRail.Framework.Adapters.SessionAdapter.Keys">
            <summary>
            Gets an <see cref="T:System.Collections.ICollection"></see> object containing the keys of the <see cref="T:System.Collections.IDictionary"></see> object.
            </summary>
            <value></value>
            <returns>An <see cref="T:System.Collections.ICollection"></see> object containing the keys of the <see cref="T:System.Collections.IDictionary"></see> object.</returns>
        </member>
        <member name="P:Castle.MonoRail.Framework.Adapters.SessionAdapter.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.ICollection"></see>.
            </summary>
            <value></value>
            <returns>The number of elements contained in the <see cref="T:System.Collections.ICollection"></see>.</returns>
        </member>
        <member name="P:Castle.MonoRail.Framework.Adapters.SessionAdapter.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.
            </summary>
            <value></value>
            <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.</returns>
        </member>
        <member name="P:Castle.MonoRail.Framework.Adapters.SessionAdapter.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe).
            </summary>
            <value></value>
            <returns>true if access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe); otherwise, false.</returns>
        </member>
        <member name="P:Castle.MonoRail.Framework.Adapters.SessionAdapter.Values">
            <summary>
            Gets an <see cref="T:System.Collections.ICollection"></see> object containing the values in the <see cref="T:System.Collections.IDictionary"></see> object.
            </summary>
            <value></value>
            <returns>An <see cref="T:System.Collections.ICollection"></see> object containing the values in the <see cref="T:System.Collections.IDictionary"></see> object.</returns>
        </member>
        <member name="P:Castle.MonoRail.Framework.Adapters.SessionAdapter.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IDictionary"></see> object is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.IDictionary"></see> object is read-only; otherwise, false.</returns>
        </member>
        <member name="P:Castle.MonoRail.Framework.Adapters.SessionAdapter.IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IDictionary"></see> object has a fixed size.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.IDictionary"></see> object has a fixed size; otherwise, false.</returns>
        </member>
        <member name="P:Castle.MonoRail.Framework.Adapters.SessionAdapter.Item(System.Object)">
            <summary>
            Gets or sets the <see cref="T:System.Object"/> with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="T:Castle.MonoRail.Framework.Adapters.TraceAdapter">
            <summary>
            Delegates to ASP.Net TraceContext.
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.ITrace">
            <summary>
            Represents the trace that ASP.Net exposes
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.ITrace.Warn(System.String)">
            <summary>
            Logs the specified message on the ASP.Net trace
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.ITrace.Warn(System.String,System.String)">
            <summary>
            Logs the specified message on the ASP.Net trace
            </summary>
            <param name="category">The category.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.ITrace.Warn(System.String,System.String,System.Exception)">
            <summary>
            Logs the specified message on the ASP.Net trace
            </summary>
            <param name="category">The category.</param>
            <param name="message">The message.</param>
            <param name="errorInfo">The error info.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.ITrace.Write(System.String)">
            <summary>
            Logs the specified message on the ASP.Net trace
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.ITrace.Write(System.String,System.String)">
            <summary>
            Logs the specified message on the ASP.Net trace
            </summary>
            <param name="category">The category.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.ITrace.Write(System.String,System.String,System.Exception)">
            <summary>
            Logs the specified message on the ASP.Net trace
            </summary>
            <param name="category">The category.</param>
            <param name="message">The message.</param>
            <param name="errorInfo">The error info.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Adapters.TraceAdapter.#ctor(System.Web.TraceContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.Adapters.TraceAdapter"/> class.
            </summary>
            <param name="traceContext">The trace context.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Adapters.TraceAdapter.Warn(System.String)">
            <summary>
            Logs the specified message on the ASP.Net trace
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Adapters.TraceAdapter.Warn(System.String,System.String)">
            <summary>
            Logs the specified message on the ASP.Net trace
            </summary>
            <param name="category">The category.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Adapters.TraceAdapter.Warn(System.String,System.String,System.Exception)">
            <summary>
            Logs the specified message on the ASP.Net trace
            </summary>
            <param name="category">The category.</param>
            <param name="message">The message.</param>
            <param name="errorInfo">The error info.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Adapters.TraceAdapter.Write(System.String)">
            <summary>
            Logs the specified message on the ASP.Net trace
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Adapters.TraceAdapter.Write(System.String,System.String)">
            <summary>
            Logs the specified message on the ASP.Net trace
            </summary>
            <param name="category">The category.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Adapters.TraceAdapter.Write(System.String,System.String,System.Exception)">
            <summary>
            Logs the specified message on the ASP.Net trace
            </summary>
            <param name="category">The category.</param>
            <param name="message">The message.</param>
            <param name="errorInfo">The error info.</param>
        </member>
        <member name="T:Castle.MonoRail.Framework.Verb">
            <summary>
            Enum to identify a http verb 
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Verb.Get">
            <summary>
            The GET method means retrieve whatever information is identified by the Request-URI.
            <remarks>
            The convention has been established that the GET method SHOULD 
            NOT have the significance of taking an action other than retrieval. 
            </remarks>
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Verb.Post">
            <summary>
            The POST method is used to request that the origin server accept the entity 
            enclosed in the request as a new subordinate of the resource identified by the 
            Request-URI in the Request-Line. 
            <remarks>
            The convention has been established that the POST method will
            take an action other than just retrieval. 
            </remarks>
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.AccessibleThroughAttribute">
            <summary>
            Decorates an action with a restriction to the HTTP method 
            that is allowed to request it.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.AccessibleThroughAttribute.#ctor(Castle.MonoRail.Framework.Verb)">
            <summary>
            Constructs a AccessibleThroughAttribute with 
            the specified <paramref name="verb"/>.
            </summary>
            <param name="verb">The <see cref="P:Castle.MonoRail.Framework.AccessibleThroughAttribute.Verb"/> to allow for this action.</param>
        </member>
        <member name="P:Castle.MonoRail.Framework.AccessibleThroughAttribute.Verb">
            <summary>
            The Verb to allow.
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.AjaxActionAttribute">
            <summary>
            Defines that an action is accessible through AJAX calls,
            so <see cref="T:Castle.MonoRail.Framework.Helpers.AjaxHelper"/> can generate a JavaScript proxy for it.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.AjaxActionAttribute.#ctor">
            <summary>
            Method marked with this attribute will be accessible through AJAX calls,
            and <see cref="T:Castle.MonoRail.Framework.Helpers.AjaxHelper"/> will be able to generate a JavaScript proxy for them.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.AjaxActionAttribute.#ctor(System.String)">
            <summary>
            Method marked with this attribute will be accessible through AJAX calls,
            and <see cref="T:Castle.MonoRail.Framework.Helpers.AjaxHelper"/> will be able to generate a JavaScript proxy for them.
            </summary>
            <param name="name">
            A name for the action, on the JavaScript proxy. Useful when dealing with
            overloaded Ajax actions, as JavaScript does not support function overloading.
            </param>
        </member>
        <member name="P:Castle.MonoRail.Framework.AjaxActionAttribute.Name">
            <summary>
            A name for the action, on the JavaScript proxy. Useful when dealing with
            overloaded Ajax actions, as JavaScript does not support function overloading.
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.CacheAttribute">
            <summary>
            Defines the cache configuration for an action.
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.ICachePolicyConfigurer">
            <summary>
            Custom attributes can implement this
            interface to have a chance to apply
            some specific configuration to the 
            <see cref="T:System.Web.HttpCachePolicy"/>
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.ICachePolicyConfigurer.Configure(System.Web.HttpCachePolicy)">
            <summary>
            Implementors should configure 
            the specified policy.
            </summary>
            <param name="policy">The cache policy.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.CacheAttribute.#ctor(System.Web.HttpCacheability)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.CacheAttribute"/> class.
            </summary>
            <param name="cacheability">Sets the Cache-Control HTTP header. 
            The Cache-Control HTTP header controls how documents are to be cached on the network.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.CacheAttribute.Castle#MonoRail#Framework#ICachePolicyConfigurer#Configure(System.Web.HttpCachePolicy)">
            <summary>
            Configures ASP.Net's Cache policy based on properties set
            </summary>
            <param name="policy">cache policy to set</param>
        </member>
        <member name="P:Castle.MonoRail.Framework.CacheAttribute.AllowInHistory">
            <summary>
            From MSDN: Makes the response is available in the client browser 
            History cache, regardless of the HttpCacheability setting 
            made on the server, when the allow parameter is true.
            </summary>
            <remarks>
            When HttpCacheability is set to NoCache or ServerAndNoCache the Expires 
            HTTP header is by default set to -1; this tells the client not to 
            cache responses in the History folder, so that when you use the back/forward buttons 
            the client requests a new version of the response each time. You can override this 
            behavior by calling the SetAllowResponseInBrowserHistory method with the 
            allow parameter set to true.
            <para>
            If HttpCacheability is set to values other than NoCache or ServerAndNoCache, calling the SetAllowResponseInBrowserHistory method with either value for allow has no effect.
            </para>
            </remarks>
        </member>
        <member name="P:Castle.MonoRail.Framework.CacheAttribute.SlidingExpiration">
            <summary>
            From MSDN: Sets cache expiration to from absolute to sliding.
            </summary>
            <remarks>
            When cache expiration is set to sliding, the Cache-Control 
            HTTP header will be renewed with each response. This expiration mode 
            is identical to the IIS configuration option to add an expiration 
            header to all output set relative to the current time.
            <para>
            If you explicitly set sliding expiration to off (false), that setting 
            will be preserved and any attempts to enable sliding expiration will 
            silently fail. This method does not directly map to an HTTP header. 
            It is used by subsequent modules or worker requests to set origin-server cache policy.
            </para>
            </remarks>
        </member>
        <member name="P:Castle.MonoRail.Framework.CacheAttribute.ValidUntilExpires">
            <summary>
            Specifies whether the ASP.NET cache should ignore HTTP Cache-Control 
            headers sent by the client that invalidate the cache.
            </summary>
            <remarks>
            This method is provided because some browsers, when refreshing a 
            page view, send HTTP cache invalidation headers to the Web server 
            and evict the page from the cache. When the validUntilExpires parameter 
            is true, ASP.NET ignores cache invalidation headers and the page 
            remains in the cache until it expires.
            </remarks>
        </member>
        <member name="P:Castle.MonoRail.Framework.CacheAttribute.ETag">
            <summary>
            Sets the ETag HTTP header to the specified string.
            </summary>
            <remarks>
            The ETag header is a unique identifier for a specific version of 
            a document. It is used by clients to validate client-cached content to 
            avoid requesting it again. Once an ETag header is set, subsequent 
            attempts to set it fail and an exception is thrown.
            </remarks>
        </member>
        <member name="P:Castle.MonoRail.Framework.CacheAttribute.Duration">
            <summary>
            Cache Duration (in seconds)
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.CacheAttribute.VaryByCustom">
            <summary>
            Specifies a custom text string to vary cached output responses by.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.CacheAttribute.VaryByHeaders">
            <summary>
            Gets or sets the list of all HTTP headers that will be used to vary cache output.
            </summary>
            <remarks>
            When a cached item has several vary headers, a separate version of 
            the requested document is available from the cache for each HTTP header type.
            </remarks>
        </member>
        <member name="P:Castle.MonoRail.Framework.CacheAttribute.VaryByParams">
            <summary>
            Gets or sets the list of parameters received by an HTTP GET or HTTP POST that affect caching.
            </summary>
            <remarks>
            A separate version of the requested document is available from the cache 
            for each named parameter in the VaryByParams collection.
            </remarks>
        </member>
        <member name="T:Castle.MonoRail.Framework.ControllerDetailsAttribute">
            <summary>
            Decorates a controller with a different name
            and optionally an area which the controller belongs to.
            This is used to override the convention for controller
            names and to optionally associate a controller with an 
            area name.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.ControllerDetailsAttribute.#ctor">
            <summary>
            Constructs a ControllerDetailsAttribute
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.ControllerDetailsAttribute.#ctor(System.String)">
            <summary>
            Constructs a ControllerDetailsAttribute
            with a name for the controller.
            </summary>
            <param name="name">The specified Controller Name</param>
        </member>
        <member name="P:Castle.MonoRail.Framework.ControllerDetailsAttribute.Name">
            <summary>
            The controller's name
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.ControllerDetailsAttribute.Area">
            <summary>
            The controller's area
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.ParamStore">
            <summary>
            Defines where the parameters should be obtained from
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.ParamStore.QueryString">
            <summary>
            Query string
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.ParamStore.Form">
            <summary>
            Only from the Form
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.ParamStore.Params">
            <summary>
            From QueryString, Form and Environment variables.
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.DataBindAttribute">
            <summary>
            The DataBind Attribute is used to indicate that an Action methods parameter 
            is to be intercepted and handled by the <see cref="T:Castle.Components.Binder.DataBinder"/>.
            </summary>
            <remarks>
            Allowed usage is one per method parameter, and is not inherited.
            </remarks>
        </member>
        <member name="T:Castle.MonoRail.Framework.IParameterBinder">
            <summary>
            Implemented by attributes that wants to perform 
            some conversion to populate a smart dispatcher 
            action argument.
            <seealso cref="T:Castle.MonoRail.Framework.DataBindAttribute"/>
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.IParameterBinder.CalculateParamPoints(Castle.MonoRail.Framework.SmartDispatcherController,System.Reflection.ParameterInfo)">
            <summary>
            Calculates the param points. Implementors should return value equals or greater than
            zero indicating whether the parameter can be bound successfully. The greater the value (points)
            the more successful the implementation indicates to the framework
            </summary>
            <param name="controller">The controller.</param>
            <param name="parameterInfo">The parameter info.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.IParameterBinder.Bind(Castle.MonoRail.Framework.SmartDispatcherController,System.Reflection.ParameterInfo)">
            <summary>
            Binds the specified parameters for the action.
            </summary>
            <param name="controller">The controller.</param>
            <param name="parameterInfo">The parameter info.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.DataBindAttribute.#ctor(System.String)">
            <summary>
            Creates a <see cref="T:Castle.MonoRail.Framework.DataBindAttribute"/>
            with an associated prefix. The prefix must be present 
            in the form data and is used to avoid name clashes.
            </summary>
            <param name="prefix"></param>
        </member>
        <member name="M:Castle.MonoRail.Framework.DataBindAttribute.CalculateParamPoints(Castle.MonoRail.Framework.SmartDispatcherController,System.Reflection.ParameterInfo)">
            <summary>
            Implementation of <see cref="M:Castle.MonoRail.Framework.IParameterBinder.CalculateParamPoints(Castle.MonoRail.Framework.SmartDispatcherController,System.Reflection.ParameterInfo)"/>
            and it is used to give the method a weight when overloads are available.
            </summary>
            <param name="controller">The controller instance</param>
            <param name="parameterInfo">The parameter info</param>
            <returns>Positive value if the parameter can be bound</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.DataBindAttribute.Bind(Castle.MonoRail.Framework.SmartDispatcherController,System.Reflection.ParameterInfo)">
            <summary>
            Implementation of <see cref="M:Castle.MonoRail.Framework.IParameterBinder.Bind(Castle.MonoRail.Framework.SmartDispatcherController,System.Reflection.ParameterInfo)"/>
            and it is used to read the data available and construct the
            parameter type accordingly.
            </summary>
            <param name="controller">The controller instance</param>
            <param name="parameterInfo">The parameter info</param>
            <returns>The bound instance</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.DataBindAttribute.CreateBinder">
            <summary>
            Creates the binder.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.DataBindAttribute.ConfigureValidator(Castle.MonoRail.Framework.SmartDispatcherController,Castle.Components.Binder.IDataBinder)">
            <summary>
            Configures the validator.
            </summary>
            <param name="controller">The controller.</param>
            <param name="binder">The binder.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.DataBindAttribute.PopulateValidatorErrorSummary(Castle.MonoRail.Framework.SmartDispatcherController,Castle.Components.Binder.IDataBinder,System.Object)">
            <summary>
            Populates the validator error summary.
            </summary>
            <param name="controller">The controller.</param>
            <param name="binder">The binder.</param>
            <param name="instance">The instance.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.DataBindAttribute.BindInstanceErrors(Castle.MonoRail.Framework.SmartDispatcherController,Castle.Components.Binder.IDataBinder,System.Object)">
            <summary>
            Binds the instance errors.
            </summary>
            <param name="controller">The controller.</param>
            <param name="binder">The binder.</param>
            <param name="instance">The instance.</param>
        </member>
        <member name="P:Castle.MonoRail.Framework.DataBindAttribute.Exclude">
            <summary>
            Gets or sets the property names to exclude.
            </summary>
            <remarks>The property name should include the <i>prefix</i>.</remarks>
            <value>A comma separated list 
            of property names to exclude from databinding.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.DataBindAttribute.Allow">
            <summary>
            Gets or sets the property names to allow.
            </summary>
            <remarks>The property name should include the <i>prefix</i>.</remarks>
            <value>A comma separated list 
            of property names to allow from databinding.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.DataBindAttribute.Validate">
            <summary>
            Gets or sets a value indicating whether 
            the target should be validate during binding.
            </summary>
            <value><c>true</c> if should be validated; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.DataBindAttribute.From">
            <summary>
            Gets or sets <see cref="T:Castle.MonoRail.Framework.ParamStore"/> used to 
            indicate where to get the values from
            </summary>
            <value>The <see cref="T:Castle.MonoRail.Framework.ParamStore"/> type.  
            Typically <see cref="F:Castle.MonoRail.Framework.ParamStore.Params"/>.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.DataBindAttribute.Prefix">
            <summary>
            Gets the databinding prefix.
            </summary>
            <remarks>
            The prefix is a name followed by a 
            dot that prefixes the entries names 
            on the source http request.
            </remarks>
            <value>The databinding prefix.</value>
        </member>
        <member name="T:Castle.MonoRail.Framework.DefaultActionAttribute">
            <summary>
            Declares that the Controller should enable a DefaultAction method 
            for request processing if no action can be found with the supplied name
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.DefaultActionAttribute.#ctor">
            <summary>
            Constructs a <see cref="T:Castle.MonoRail.Framework.DefaultActionAttribute"/>
            using <c>DefaultAction</c>
            as the default action name
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.DefaultActionAttribute.#ctor(System.String)">
            <summary>
            Constructs a <see cref="T:Castle.MonoRail.Framework.DefaultActionAttribute"/>
            using the supplied value as the default action name
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.DefaultActionAttribute.DefaultAction">
            <summary>
            Gets the default action name
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.DynamicActionProviderAttribute">
            <summary>
            Associates a provider that can add dynamic actions 
            to a controller
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.DynamicActionProviderAttribute.#ctor(System.Type)">
            <summary>
            Constructs a <see cref="T:Castle.MonoRail.Framework.DynamicActionProviderAttribute"/>
            associating the supplied type as the action provider.
            </summary>
            <param name="providerType"></param>
        </member>
        <member name="P:Castle.MonoRail.Framework.DynamicActionProviderAttribute.ProviderType">
            <summary>
            Gets the provider type
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.FilterAttribute">
            <summary>
            Decorates a controller associating a <see cref="T:Castle.MonoRail.Framework.IFilter"/>
            implementation with it. More than one can be associated.
            </summary>
            <remarks>
            If more than one filter is associate with an action (or controller and 
            action), the order of execution cannot be predicted. In this case
            use <see cref="P:Castle.MonoRail.Framework.FilterAttribute.ExecutionOrder"/> to define the order of execution.
            </remarks>
        </member>
        <member name="T:Castle.MonoRail.Framework.Internal.IFilterDescriptorBuilder">
            <summary>
            Contract for <see cref="T:Castle.MonoRail.Framework.Internal.FilterDescriptor"/> builders.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Internal.IFilterDescriptorBuilder.BuildFilterDescriptors">
            <summary>
            Builds the filter descriptors.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.FilterAttribute.#ctor(Castle.MonoRail.Framework.ExecuteEnum,System.Type)">
            <summary>
            Constructs a FilterAttribute associating 
            the filter type and when the filter should be invoked.
            </summary>
            <param name="when">When to execute the filter</param>
            <param name="filterType">The filter implementation</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.FilterAttribute.BuildFilterDescriptors">
            <summary>
            Implementation of <see cref="T:Castle.MonoRail.Framework.Internal.IFilterDescriptorBuilder"/>.
            Returns the descriptor for this filter association.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Castle.MonoRail.Framework.FilterAttribute.FilterType">
            <summary>
            Gets the filter implementation type
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.FilterAttribute.When">
            <summary>
            Gets when to run the filter
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.FilterAttribute.ExecutionOrder">
            <summary>
            Gets or sets the filter execution order. 
            The lower the value, the higher the priority
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.HelperAttribute">
            <summary>
            Associates a helper class with the controller.
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.Internal.IHelperDescriptorBuilder">
            <summary>
            Contract for <see cref="T:Castle.MonoRail.Framework.Internal.HelperDescriptor"/> builders
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Internal.IHelperDescriptorBuilder.BuildHelperDescriptors">
            <summary>
            Builds the helper descriptors.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.HelperAttribute.#ctor(System.Type)">
            <summary>
            Constructs a <see cref="T:Castle.MonoRail.Framework.HelperAttribute"/> 
            with the supplied <c>helperType</c>.
            </summary>
            <param name="helperType">The helper type</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.HelperAttribute.#ctor(System.Type,System.String)">
            <summary>
            Constructs a <see cref="T:Castle.MonoRail.Framework.HelperAttribute"/> 
            with the supplied <c>helperType</c> and a name to be bound to it.
            </summary>
            <param name="helperType">The helper type</param>
            <param name="name">Name bound to the helper. The name will be
            used on the view to gain access to it</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.HelperAttribute.BuildHelperDescriptors">
            <summary>
            <see cref="T:Castle.MonoRail.Framework.Internal.IHelperDescriptorBuilder"/> implementation.
            Gets the <seealso cref="T:Castle.MonoRail.Framework.Internal.HelperDescriptor"/>
            that describes the helper.
            </summary>
            <returns>The descriptor instance</returns>
        </member>
        <member name="P:Castle.MonoRail.Framework.HelperAttribute.Name">
            <summary>
            Gets Name bound to the helper. The name will be
            used on the view to gain access to it
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.HelperAttribute.HelperType">
            <summary>
            Gets the helper type
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.LayoutAttribute">
            <summary>
            Associates a layout name with a controller.
            The layout can later be changed using the LayoutName
            property of the <see cref="T:Castle.MonoRail.Framework.Controller"/>.
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.Internal.ILayoutDescriptorBuilder">
            <summary>
            Contract for <see cref="T:Castle.MonoRail.Framework.Internal.LayoutDescriptor"/> builders
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Internal.ILayoutDescriptorBuilder.BuildLayoutDescriptor">
            <summary>
            Builds the layout descriptor.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.LayoutAttribute.#ctor(System.String)">
            <summary>
            Constructs a LayoutAttribute with the 
            layout name.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.LayoutAttribute.BuildLayoutDescriptor">
            <summary>
            <see cref="T:Castle.MonoRail.Framework.Internal.ILayoutDescriptorBuilder"/> implementation.
            Gets the descriptor that describes the layout.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.LayoutAttribute.LayoutName">
            <summary>
            Gets the layout name
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.LocalizationFilterAttribute">
            <summary>
            This is an special filter attribute. It is used
            to define from where MonoRail should read the localization information
            to find out the locale of the client. 
            <para>
            For example, it can use the browser, or a cookie, an entry in the 
            query string (or even in the session)
            </para>
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.LocalizationFilterAttribute.#ctor">
            <summary>
            Defines that 
            you want to use a cookie named 
            "locale", but if that fails it falls back
            to the client's browser locale.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.LocalizationFilterAttribute.#ctor(Castle.MonoRail.Framework.Filters.RequestStore,System.String)">
            <summary>
            Defines a new LocalizationFilter.
            </summary>
            <param name="store">Location where the localization parameter is stored.</param>
            <param name="key">Name of the parameter in the store.</param>
        </member>
        <member name="P:Castle.MonoRail.Framework.LocalizationFilterAttribute.Key">
            <summary>
            Key under which the locale value is stored.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.LocalizationFilterAttribute.Store">
            <summary>
            Location where the locale value is to be stored.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.LocalizationFilterAttribute.FailOnError">
            <summary>
            True if an exception is to be thrown when a specific
            culture appears to be incorrect (can't be created).
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.LocalizationFilterAttribute.UseBrowser">
            <summary>
            Use client browser defined languages as default.
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.Attributes.PersistFlashAttribute">
            <summary>
            Apply PersistFlashFilter, which preserve all flash contents 
            after execution of all actions on the applied controller. 
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Attributes.PersistFlashAttribute.#ctor">
            <summary>
            Default constructor. This would persist the entire flash bag.
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.RescueAttribute">
            <summary>
            Associates a rescue template with a <see cref="T:Castle.MonoRail.Framework.Controller"/> or an action 
            (method). The rescue is invoked in response to some exception during the 
            action processing.
            </summary>
            <remarks>
            The view must exist in the <c>rescues</c> folder in your view folder
            </remarks>
        </member>
        <member name="T:Castle.MonoRail.Framework.Internal.IRescueDescriptorBuilder">
            <summary>
            Contract for <see cref="T:Castle.MonoRail.Framework.Internal.RescueDescriptor"/> builders
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Internal.IRescueDescriptorBuilder.BuildRescueDescriptors">
            <summary>
            Builds the rescue descriptors.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.RescueAttribute.#ctor(System.String)">
            <summary>
            Constructs a RescueAttribute with the template name.
            </summary>
            <param name="viewName">The view to use in the event of error</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.RescueAttribute.#ctor(System.String,System.Type)">
            <summary>
            Constructs a RescueAttribute with the template name and exception type.
            </summary>
            <param name="viewName">The view to use in the event of error</param>
            <param name="exceptionType">The exception to match</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.RescueAttribute.BuildRescueDescriptors">
            <summary>
            <see cref="T:Castle.MonoRail.Framework.Internal.IRescueDescriptorBuilder"/> implementation. 
            Builds the rescue descriptors.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Castle.MonoRail.Framework.RescueAttribute.ViewName">
            <summary>
            Gets the view name to use
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.RescueAttribute.ExceptionType">
            <summary>
            Gets the exception type
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.ResourceAttribute">
            <summary>
            Declares that for the specified class or method, the given resource file should be 
            loaded and set available in the PropertyBag with the specified name.
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.Internal.IResourceDescriptorBuilder">
            <summary>
            Contract for <see cref="T:Castle.MonoRail.Framework.Internal.ResourceDescriptor"/> builders
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Internal.IResourceDescriptorBuilder.BuildResourceDescriptors">
            <summary>
            Builds the resource descriptors.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.ResourceAttribute.#ctor(System.String,System.String)">
            <summary>
            Constructs a resource attribute, with the specified name, based
            on the resource in a satellite assembly.
            </summary>
            <param name="name">Name the resource will be available as in the PropertyBag</param>
            <param name="resourceName">Fully qualified name of the resource in the sattelite assembly</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.ResourceAttribute.BuildResourceDescriptors">
            <summary>
            <see cref="T:Castle.MonoRail.Framework.Internal.IResourceDescriptorBuilder"/> implementation.
            Builds the resource descriptors.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Castle.MonoRail.Framework.ResourceAttribute.Name">
            <summary>
            Gets or sets the Name the of resource that will be available in the PropertyBag.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.ResourceAttribute.ResourceName">
            <summary>
            Gets or sets the Fully qualified name of the resource in the sattelite assembly.
            </summary>
            <value>The name of the resource.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.ResourceAttribute.CultureName">
            <summary>
            Gets or sets the name of the culture.
            </summary>
            <value>The name of the culture.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.ResourceAttribute.AssemblyName">
            <summary>
            Gets or sets the name of the assembly.
            </summary>
            <value>The name of the assembly.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.ResourceAttribute.ResourceType">
            <summary>
            Gets or sets the type of the resource.
            </summary>
            <value>The type of the resource.</value>
        </member>
        <member name="T:Castle.MonoRail.Framework.ScaffoldingAttribute">
            <summary>
            Associates scaffolding support with a controller.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.ScaffoldingAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.ScaffoldingAttribute"/> class.
            </summary>
            <param name="model">The model/entity that should be implemented</param>
        </member>
        <member name="P:Castle.MonoRail.Framework.ScaffoldingAttribute.Model">
            <summary>
            Gets the model/entity type
            </summary>
            <value>The model/entity type.</value>
        </member>
        <member name="T:Castle.MonoRail.Framework.SkipFilterAttribute">
            <summary>
            Declares that for the specific method (action)
            no filter should be applied -- or an specific filter should be
            skipped.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.SkipFilterAttribute.#ctor">
            <summary>
            Constructs a SkipFilterAttribute which skips all filters.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.SkipFilterAttribute.#ctor(System.Type)">
            <summary>
            Constructs a SkipFilterAttribute associating 
            the filter type that should be skipped.
            </summary>
            <param name="filterType">The filter type to be skipped</param>
        </member>
        <member name="P:Castle.MonoRail.Framework.SkipFilterAttribute.FilterType">
            <summary>
            Gets the type of the filter.
            </summary>
            <value>The type of the filter.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.SkipFilterAttribute.BlanketSkip">
            <summary>
            Gets a value indicating whether [blanket skip].
            </summary>
            <value><c>true</c> if [blanket skip]; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Castle.MonoRail.Framework.SkipRescueAttribute">
            <summary>
            Declares that for the specific 
            method (action) no rescue should be performed.
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.TransformFilterAttribute">
            <summary>
            Decorates an action associating a <see cref="T:Castle.MonoRail.Framework.IFilter"/>
            implementation with it. More than one can be associated.
            </summary>
            <remarks>
            If more than one filter is associate with an action (or controller and 
            action), the order of execution cannot be predicted. In this case
            use <see cref="P:Castle.MonoRail.Framework.TransformFilterAttribute.ExecutionOrder"/> to define the order of execution.
            </remarks>
        </member>
        <member name="T:Castle.MonoRail.Framework.Internal.ITransformFilterDescriptorBuilder">
            <summary>
            Contract for <see cref="T:Castle.MonoRail.Framework.Internal.TransformFilterDescriptor"/> builders
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Internal.ITransformFilterDescriptorBuilder.BuildTransformFilterDescriptors">
            <summary>
            Builds the transform filter descriptors.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.TransformFilterAttribute.#ctor(System.Type)">
            <summary>
            Constructs a TransformFilterAttribute associating the transformfilter type.
            </summary>
            <param name="transformFilterType">The transformfilter implementation</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.TransformFilterAttribute.BuildTransformFilterDescriptors">
            <summary>
            Implementation of <see cref="T:Castle.MonoRail.Framework.Internal.ITransformFilterDescriptorBuilder"/>.
            Returns the descriptor for this filter association.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Castle.MonoRail.Framework.TransformFilterAttribute.TransformFilterType">
            <summary>
            Gets the type of the transform filter.
            </summary>
            <value>The type of the transform filter.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.TransformFilterAttribute.ExecutionOrder">
            <summary>
            Gets or sets the execution order.
            </summary>
            <value>The execution order.</value>
        </member>
        <member name="T:Castle.MonoRail.Framework.ViewComponentDetailsAttribute">
            <summary>
            Decorates a <see cref="T:Castle.MonoRail.Framework.ViewComponent"/> to associate a custom name with it.
            <para>
            Optionally you can associate the section names supported by the 
            <see cref="T:Castle.MonoRail.Framework.ViewComponent"/>.
            </para>
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.ViewComponentDetailsAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.ViewComponentDetailsAttribute"/> class.
            </summary>
            <param name="name">The specified ViewComponent's Name</param>
        </member>
        <member name="P:Castle.MonoRail.Framework.ViewComponentDetailsAttribute.Name">
            <summary>
            The component's name
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.ViewComponentDetailsAttribute.Sections">
            <summary>
            Sets the nested sections that this <see cref="T:Castle.MonoRail.Framework.ViewComponent"/> supports.
            </summary>
            <value>The nested sections names, comma separated.</value>
        </member>
        <member name="T:Castle.MonoRail.Framework.ViewComponentParamAttribute">
            <summary>
            Decorates a public property in a <see cref="T:Castle.MonoRail.Framework.ViewComponent"/>
            to have the framework automatically bind the value using 
            the <see cref="P:Castle.MonoRail.Framework.ViewComponent.ComponentParams"/> dictionary. 
            By default The property name is going to be used as a key to query the params. 
            <para>
            You can also use the <see cref="P:Castle.MonoRail.Framework.ViewComponentParamAttribute.Required"/>
            property to define that a property is non-optional. 
            </para>
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.ViewComponentParamAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.ViewComponentParamAttribute"/> class.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.ViewComponentParamAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.ViewComponentParamAttribute"/> class 
            allowing you to override the parameter name to be queried on 
            the <see cref="P:Castle.MonoRail.Framework.ViewComponent.ComponentParams"/> dictionary.
            </summary>
            <param name="paramName">Overrides the name of the parameter.</param>
        </member>
        <member name="P:Castle.MonoRail.Framework.ViewComponentParamAttribute.Required">
            <summary>
            Gets or sets a value indicating whether a value for this property is required.
            </summary>
            <value><c>true</c> if required; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.ViewComponentParamAttribute.ParamName">
            <summary>
            Gets the name of the param.
            </summary>
            <value>The name of the param.</value>
        </member>
        <member name="T:Castle.MonoRail.Framework.Configuration.ControllersConfig">
            <summary>
            Represents the controller node configuration
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.Configuration.ISerializedConfig">
            <summary>
            Used by configurable elements
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Configuration.ISerializedConfig.Deserialize(System.Xml.XmlNode)">
            <summary>
            Deserializes the specified section.
            </summary>
            <param name="section">The section.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Configuration.ControllersConfig.Deserialize(System.Xml.XmlNode)">
            <summary>
            Deserializes the specified section.
            </summary>
            <param name="section">The section.</param>
        </member>
        <member name="P:Castle.MonoRail.Framework.Configuration.ControllersConfig.Assemblies">
            <summary>
            Gets or sets the assemblies.
            </summary>
            <value>The assemblies.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Configuration.ControllersConfig.CustomControllerFactory">
            <summary>
            Gets or sets the custom controller factory.
            </summary>
            <value>The custom controller factory.</value>
        </member>
        <member name="T:Castle.MonoRail.Framework.Configuration.DefaultUrl">
            <summary>
            Represents a url mapping
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Configuration.DefaultUrl.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.Configuration.DefaultUrl"/> class.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Configuration.DefaultUrl.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.Configuration.DefaultUrl"/> class.
            </summary>
            <param name="url">The URL.</param>
            <param name="controller">The controller.</param>
            <param name="action">The action.</param>
            <param name="area">The area.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Configuration.DefaultUrl.Deserialize(System.Xml.XmlNode)">
            <summary>
            Deserializes the specified section.
            </summary>
            <param name="section">The section.</param>
        </member>
        <member name="P:Castle.MonoRail.Framework.Configuration.DefaultUrl.Url">
            <summary>
            Gets the URL.
            </summary>
            <value>The URL.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Configuration.DefaultUrl.Controller">
            <summary>
            Gets the controller.
            </summary>
            <value>The controller.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Configuration.DefaultUrl.Action">
            <summary>
            Gets the action.
            </summary>
            <value>The action.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Configuration.DefaultUrl.Area">
            <summary>
            Gets the area.
            </summary>
            <value>The area.</value>
        </member>
        <member name="T:Castle.MonoRail.Framework.Configuration.DefaultUrlCollection">
            <summary>
            Represents a set of url mappings
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Configuration.DefaultUrlCollection.Deserialize(System.Xml.XmlNode)">
            <summary>
            Deserializes the specified section.
            </summary>
            <param name="section">The section.</param>
        </member>
        <member name="T:Castle.MonoRail.Framework.Configuration.ExtensionEntry">
            <summary>
            Represents a MonoRail extension configuration entry
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Configuration.ExtensionEntry.Deserialize(System.Xml.XmlNode)">
            <summary>
            Deserializes the specified section.
            </summary>
            <param name="section">The section.</param>
        </member>
        <member name="P:Castle.MonoRail.Framework.Configuration.ExtensionEntry.ExtensionType">
            <summary>
            Gets or sets the type of the extension.
            </summary>
            <value>The type of the extension.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Configuration.ExtensionEntry.ExtensionNode">
            <summary>
            Gets or sets the extension node.
            </summary>
            <value>The extension node.</value>
        </member>
        <member name="T:Castle.MonoRail.Framework.Configuration.ExtensionEntryCollection">
            <summary>
            Represents a set of MonoRail extensions
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Configuration.ExtensionEntryCollection.Deserialize(System.Xml.XmlNode)">
            <summary>
            Deserializes the specified section.
            </summary>
            <param name="section">The section.</param>
        </member>
        <member name="P:Castle.MonoRail.Framework.Configuration.ExtensionEntryCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Castle.MonoRail.Framework.Configuration.ExtensionEntry"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="T:Castle.MonoRail.Framework.Configuration.MonoRailConfiguration">
            <summary>
            Represents the MonoRail external configuration
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Configuration.MonoRailConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.Configuration.MonoRailConfiguration"/> class.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Configuration.MonoRailConfiguration.#ctor(System.Xml.XmlNode)">
            <summary>
            Pendent
            </summary>
            <param name="section"></param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Configuration.MonoRailConfiguration.GetConfig">
            <summary>
            Gets the config.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Configuration.MonoRailConfiguration.Deserialize(System.Xml.XmlNode)">
            <summary>
            Deserializes the specified node.
            </summary>
            <param name="node">The node.</param>
        </member>
        <member name="P:Castle.MonoRail.Framework.Configuration.MonoRailConfiguration.SmtpConfig">
            <summary>
            Gets the SMTP config.
            </summary>
            <value>The SMTP config.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Configuration.MonoRailConfiguration.ViewEngineConfig">
            <summary>
            Gets the view engine config.
            </summary>
            <value>The view engine config.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Configuration.MonoRailConfiguration.ControllersConfig">
            <summary>
            Gets the controllers config.
            </summary>
            <value>The controllers config.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Configuration.MonoRailConfiguration.ViewComponentsConfig">
            <summary>
            Gets the view components config.
            </summary>
            <value>The view components config.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Configuration.MonoRailConfiguration.RoutingRules">
            <summary>
            Gets the routing rules.
            </summary>
            <value>The routing rules.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Configuration.MonoRailConfiguration.ExtensionEntries">
            <summary>
            Gets the extension entries.
            </summary>
            <value>The extension entries.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Configuration.MonoRailConfiguration.ServiceEntries">
            <summary>
            Gets the service entries.
            </summary>
            <value>The service entries.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Configuration.MonoRailConfiguration.CustomFilterFactory">
            <summary>
            Gets the custom filter factory.
            </summary>
            <value>The custom filter factory.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Configuration.MonoRailConfiguration.ScaffoldConfig">
            <summary>
            Gets the scaffold config.
            </summary>
            <value>The scaffold config.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Configuration.MonoRailConfiguration.CheckClientIsConnected">
            <summary>
            Gets a value indicating whether MR should check for client connection.
            </summary>
            <value>
            	<c>true</c> if it should check client is connected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Configuration.MonoRailConfiguration.UseWindsorIntegration">
            <summary>
            Gets a value indicating whether to use windsor integration.
            </summary>
            <value>
            	<c>true</c> if it should use windsor integration; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Configuration.MonoRailConfiguration.MatchHostNameAndPath">
            <summary>
            Gets a value indicating whether match host name and path should be used on 
            MonoRail routing.
            </summary>
            <value>
            	<c>true</c> if it should match host name and path; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Configuration.MonoRailConfiguration.ExcludeAppPath">
            <summary>
            Gets a value indicating whether routing should exclude app path.
            </summary>
            <value><c>true</c> if exclude app path; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Configuration.MonoRailConfiguration.ConfigurationSection">
            <summary>
            Gets the configuration section.
            </summary>
            <value>The configuration section.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Configuration.MonoRailConfiguration.DefaultUrls">
            <summary>
            Gets the default urls.
            </summary>
            <value>The default urls.</value>
        </member>
        <member name="T:Castle.MonoRail.Framework.Configuration.MonoRailSectionHandler">
            <summary>
            The MonoRail section handler
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Configuration.MonoRailSectionHandler.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.Configuration.MonoRailSectionHandler"/> class.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Configuration.MonoRailSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            Creates a configuration section handler.
            </summary>
            <param name="parent"></param>
            <param name="configContext">Configuration context object.</param>
            <param name="section"></param>
            <returns>The created section handler object.</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Configuration.MonoRailSectionHandler.Deserialize(System.Xml.XmlNode,Castle.MonoRail.Framework.Configuration.MonoRailConfiguration)">
            <summary>
            Deserializes the config section.
            </summary>
            <param name="section">The section.</param>
            <param name="config">The config.</param>
        </member>
        <member name="T:Castle.MonoRail.Framework.Configuration.RoutingRule">
            <summary>
            Represents a url routing rule. 
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Configuration.RoutingRule.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.Configuration.RoutingRule"/> class.
            </summary>
            <param name="pattern">The regular expression pattern.</param>
            <param name="replace">The replace.</param>
        </member>
        <member name="P:Castle.MonoRail.Framework.Configuration.RoutingRule.Pattern">
            <summary>
            Gets the pattern.
            </summary>
            <value>The pattern.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Configuration.RoutingRule.Replace">
            <summary>
            Gets the replace.
            </summary>
            <value>The replace.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Configuration.RoutingRule.CompiledRule">
            <summary>
            Gets the compiled rule.
            </summary>
            <value>The compiled rule.</value>
        </member>
        <member name="T:Castle.MonoRail.Framework.Configuration.RoutingRuleCollection">
            <summary>
            Represents a set of url routing rules.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Configuration.RoutingRuleCollection.Deserialize(System.Xml.XmlNode)">
            <summary>
            Deserializes the specified section.
            </summary>
            <param name="section">The section.</param>
        </member>
        <member name="P:Castle.MonoRail.Framework.Configuration.RoutingRuleCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:Castle.MonoRail.Framework.Configuration.RoutingRule"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="T:Castle.MonoRail.Framework.Configuration.ScaffoldConfig">
            <summary>
            Represents the Scaffolding support configuration.
            <seealso cref="T:Castle.MonoRail.Framework.IScaffoldingSupport"/>
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Configuration.ScaffoldConfig.Deserialize(System.Xml.XmlNode)">
            <summary>
            Deserializes the configuration section looking 
            for a 'scaffold' element with a 'type' attribute
            </summary>
            <param name="section">The section.</param>
        </member>
        <member name="P:Castle.MonoRail.Framework.Configuration.ScaffoldConfig.ScaffoldImplType">
            <summary>
            Gets the scaffolding support implementation type.
            <seealso cref="T:Castle.MonoRail.Framework.IScaffoldingSupport"/>
            </summary>
            <value>The type of the scaffold impl.</value>
        </member>
        <member name="T:Castle.MonoRail.Framework.Configuration.ServiceIdentification">
            <summary>
            Enum for all known MonoRail services.
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Configuration.ServiceIdentification.Custom">
            <summary>
            Custom ( not know service )
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Configuration.ServiceIdentification.ControllerFactory">
            <summary>
            The <see cref="T:Castle.MonoRail.Framework.IControllerFactory"/> service
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Configuration.ServiceIdentification.ViewComponentFactory">
            <summary>
            The <see cref="T:Castle.MonoRail.Framework.IViewComponentFactory"/> service
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Configuration.ServiceIdentification.ViewSourceLoader">
            <summary>
            The <see cref="T:Castle.MonoRail.Framework.IViewSourceLoader"/> service.
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Configuration.ServiceIdentification.FilterFactory">
            <summary>
            The <see cref="T:Castle.MonoRail.Framework.IFilterFactory"/> service.
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Configuration.ServiceIdentification.EmailSender">
            <summary>
            The <see cref="T:Castle.Components.Common.EmailSender.IEmailSender"/> service.
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Configuration.ServiceIdentification.ControllerDescriptorProvider">
            <summary>
            The <see cref="T:Castle.MonoRail.Framework.IControllerDescriptorProvider"/> service
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Configuration.ServiceIdentification.ResourceDescriptorProvider">
            <summary>
            The <see cref="T:Castle.MonoRail.Framework.Internal.IResourceDescriptorProvider"/> service
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Configuration.ServiceIdentification.RescueDescriptorProvider">
            <summary>
            The <see cref="T:Castle.MonoRail.Framework.Internal.IRescueDescriptorProvider"/> service
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Configuration.ServiceIdentification.LayoutDescriptorProvider">
            <summary>
            The <see cref="T:Castle.MonoRail.Framework.Internal.ILayoutDescriptorProvider"/> service
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Configuration.ServiceIdentification.HelperDescriptorProvider">
            <summary>
            The <see cref="T:Castle.MonoRail.Framework.Internal.IHelperDescriptorProvider"/> service
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Configuration.ServiceIdentification.FilterDescriptorProvider">
            <summary>
            The <see cref="T:Castle.MonoRail.Framework.Internal.IFilterDescriptorProvider"/> service
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Configuration.ServiceIdentification.ResourceFactory">
            <summary>
            The <see cref="T:Castle.MonoRail.Framework.IResourceFactory"/> service
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Configuration.ServiceIdentification.EmailTemplateService">
            <summary>
            The <see cref="T:Castle.MonoRail.Framework.IEmailTemplateService"/> service
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Configuration.ServiceIdentification.ControllerTree">
            <summary>
            The <see cref="T:Castle.MonoRail.Framework.IControllerTree"/> service
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Configuration.ServiceIdentification.CacheProvider">
            <summary>
            The <see cref="T:Castle.MonoRail.Framework.ICacheProvider"/> service
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Configuration.ServiceIdentification.ScaffoldingSupport">
            <summary>
            The <see cref="T:Castle.MonoRail.Framework.IScaffoldingSupport"/> service
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Configuration.ServiceIdentification.ExecutorFactory">
            <summary>
            The <see cref="T:Castle.MonoRail.Framework.IControllerLifecycleExecutorFactory"/> service
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Configuration.ServiceIdentification.TransformFilterDescriptorProvider">
            <summary>
            The <see cref="T:Castle.MonoRail.Framework.Internal.ITransformFilterDescriptorProvider"/> service
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Configuration.ServiceIdentification.TransformationFilterFactory">
            <summary>
            The <see cref="T:Castle.MonoRail.Framework.ITransformFilterFactory"/> service
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Configuration.ServiceIdentification.ViewEngineManager">
            <summary>
            The <see cref="T:Castle.MonoRail.Framework.IViewEngineManager"/> service
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Configuration.ServiceIdentification.UrlBuilder">
            <summary>
            The <see cref="T:Castle.MonoRail.Framework.IUrlBuilder"/> service
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Configuration.ServiceIdentification.UrlTokenizer">
            <summary>
            The <see cref="T:Castle.MonoRail.Framework.IUrlTokenizer"/> service
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Configuration.ServiceIdentification.ServerUtility">
            <summary>
            The <see cref="T:Castle.MonoRail.Framework.IServerUtility"/> service
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Configuration.ServiceIdentification.ValidatorRegistry">
            <summary>
            The <see cref="T:Castle.Components.Validator.IValidatorRegistry"/> service
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Configuration.ServiceIdentification.AjaxProxyGenerator">
            <summary>
            The <see cref="T:Castle.MonoRail.Framework.Services.AjaxProxyGenerator.IAjaxProxyGenerator"/> service
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.Configuration.ServiceEntry">
            <summary>
            Represents a MonoRail service entry
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Configuration.ServiceEntry.Deserialize(System.Xml.XmlNode)">
            <summary>
            Deserializes the specified section.
            </summary>
            <param name="section">The section.</param>
        </member>
        <member name="P:Castle.MonoRail.Framework.Configuration.ServiceEntry.ServiceType">
            <summary>
            Gets the type of the service.
            </summary>
            <value>The type of the service.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Configuration.ServiceEntry.Service">
            <summary>
            Gets the service.
            </summary>
            <value>The service.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Configuration.ServiceEntry.Interface">
            <summary>
            Gets the interface.
            </summary>
            <value>The interface.</value>
        </member>
        <member name="T:Castle.MonoRail.Framework.Configuration.ServiceEntryCollection">
            <summary>
            Represents a set of MonoRail services entries
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Configuration.ServiceEntryCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.Configuration.ServiceEntryCollection"/> class.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Configuration.ServiceEntryCollection.Deserialize(System.Xml.XmlNode)">
            <summary>
            Deserializes the specified section.
            </summary>
            <param name="section">The section.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Configuration.ServiceEntryCollection.RegisterService(Castle.MonoRail.Framework.Configuration.ServiceIdentification,System.Type)">
            <summary>
            Registers the service.
            </summary>
            <param name="id">The id.</param>
            <param name="service">The service.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Configuration.ServiceEntryCollection.RegisterService(System.Type,System.Type)">
            <summary>
            Registers the service.
            </summary>
            <param name="inter">The inter.</param>
            <param name="service">The service.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Configuration.ServiceEntryCollection.GetService(Castle.MonoRail.Framework.Configuration.ServiceIdentification)">
            <summary>
            Gets the service.
            </summary>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Configuration.ServiceEntryCollection.HasService(Castle.MonoRail.Framework.Configuration.ServiceIdentification)">
            <summary>
            Determines whether it has service.
            </summary>
            <param name="id">The id.</param>
            <returns>
            	<c>true</c> if the specified id has service; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Castle.MonoRail.Framework.Configuration.ServiceEntryCollection.CustomServices">
            <summary>
            Gets the custom services.
            </summary>
            <value>The custom services.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Configuration.ServiceEntryCollection.ServiceImplMap">
            <summary>
            Gets the service impl map.
            </summary>
            <value>The service impl map.</value>
        </member>
        <member name="T:Castle.MonoRail.Framework.Configuration.SmtpConfig">
            <summary>
            Represents the SMTP configuration
            on the configuration file
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Configuration.SmtpConfig.Deserialize(System.Xml.XmlNode)">
            <summary>
            Deserializes the specified smtp section.
            </summary>
            <param name="section">The smtp section.</param>
        </member>
        <member name="P:Castle.MonoRail.Framework.Configuration.SmtpConfig.Host">
            <summary>
            Gets or sets the smtp host.
            </summary>
            <value>The host.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Configuration.SmtpConfig.Port">
            <summary>
            Gets or sets the smtp port.
            </summary>
            <value>The port.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Configuration.SmtpConfig.Username">
            <summary>
            Gets or sets the smtp username.
            </summary>
            <value>The username.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Configuration.SmtpConfig.Password">
            <summary>
            Gets or sets the smtp password.
            </summary>
            <value>The password.</value>
        </member>
        <member name="M:Castle.MonoRail.Framework.Configuration.TypeLoadUtil.GetEffectiveTypeName(System.String)">
            <summary>
            Hack to allow MR to work when the main assemblies are on 
            GAC. This method returns the complete name.
            </summary>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="T:Castle.MonoRail.Framework.Configuration.ViewComponentsConfig">
            <summary>
            Represents the view components node configuration
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Configuration.ViewComponentsConfig.Deserialize(System.Xml.XmlNode)">
            <summary>
            Deserializes the specified section.
            </summary>
            <param name="section">The section.</param>
        </member>
        <member name="P:Castle.MonoRail.Framework.Configuration.ViewComponentsConfig.Assemblies">
            <summary>
            Gets or sets the assemblies.
            </summary>
            <value>The assemblies.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Configuration.ViewComponentsConfig.CustomViewComponentFactory">
            <summary>
            Gets or sets the custom view component factory.
            </summary>
            <value>The custom view component factory.</value>
        </member>
        <member name="T:Castle.MonoRail.Framework.Configuration.ViewEngineConfig">
            <summary>
            Represents the view engines configuration
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Configuration.ViewEngineConfig.Deserialize(System.Xml.XmlNode)">
            <summary>
            Deserializes the specified section.
            </summary>
            <param name="section">The section.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Configuration.ViewEngineConfig.ConfigureDefaultViewEngine">
            <summary>
            Configures the default view engine.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.Configuration.ViewEngineConfig.ViewPathRoot">
            <summary>
            Gets or sets the view path root.
            </summary>
            <value>The view path root.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Configuration.ViewEngineConfig.ViewEngines">
            <summary>
            Gets the view engines.
            </summary>
            <value>The view engines.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Configuration.ViewEngineConfig.Sources">
            <summary>
            Gets or sets the additional assembly sources.
            </summary>
            <value>The sources.</value>
        </member>
        <member name="T:Castle.MonoRail.Framework.Controllers.FilesController">
            <summary>
            Buit in <see cref="T:Castle.MonoRail.Framework.Controller"/> containing the files requireds by helpers and other 
            parts of MonoRail.
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.Controller">
            <summary>
            Implements the core functionality and exposes the
            common methods for concrete controllers.
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Controller.context">
            <summary>
            Holds the request/context information
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Controller.viewEngineManager">
            <summary>
            The reference to the <see cref="T:Castle.MonoRail.Framework.IViewEngineManager"/> instance
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Controller.logger">
            <summary>
            Logger instance. Should never be null
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Controller.bag">
            <summary>
            Holds information to pass to the view
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Controller._areaName">
            <summary>
            The area name which was used to access this controller
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Controller._controllerName">
            <summary>
            The controller name which was used to access this controller
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Controller._selectedViewName">
            <summary>
            The view name selected to be rendered after the execution 
            of the action
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Controller._layoutName">
            <summary>
            The layout name that the view engine should use
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Controller._evaluatedAction">
            <summary>
            The original action requested
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Controller._resetIsPostBack">
            <summary>
            True if any Controller.Send operation was called.
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Controller.helpers">
            <summary>
            The helper instances collected
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Controller.resources">
            <summary>
            The resources associated with this controller
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Controller._dynamicActions">
            <summary>
            Reference to the <see cref="T:Castle.MonoRail.Framework.IResourceFactory"/> instance
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controller.#ctor">
            <summary>
            Constructs a Controller
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controller.RenderView(System.String)">
            <summary>
            Specifies the view to be processed after the action has finished its processing. 
            </summary>
            <param name="name">view template name (the file extension is optional)</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controller.RenderView(System.String,System.Boolean)">
            <summary>
            Specifies the view to be processed after the action has finished its processing. 
            </summary>
            <param name="name">view template name (the file extension is optional)</param>
            <param name="skipLayout">If set to <c>true</c>, no layout will be used when rendering the view</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controller.RenderView(System.String,System.Boolean,System.String)">
            <summary>
            Specifies the view to be processed after the action has finished its processing. 
            </summary>
            <param name="name">view template name (the file extension is optional)</param>
            <param name="skipLayout">If set to <c>true</c>, no layout will be used when rendering the view</param>
            <param name="mimeType">The mime type to use on the reply</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controller.RenderView(System.String,System.String)">
            <summary>
            Specifies the view to be processed after the action has finished its processing. 
            </summary>
            <param name="controller">Controller name get view from (if you intend to user another controller's view</param>
            <param name="name">view template name (the file extension is optional)</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controller.RenderView(System.String,System.String,System.Boolean)">
            <summary>
            Specifies the view to be processed after the action has finished its processing. 
            </summary>
            <param name="controller">Controller name get view from (if you intend to user another controller's view</param>
            <param name="name">view template name (the file extension is optional)</param>
            <param name="skipLayout">If set to <c>true</c>, no layout will be used when rendering the view</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controller.RenderView(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Specifies the view to be processed after the action has finished its processing. 
            </summary>
            <param name="controller">Controller name get view from (if you intend to user another controller's view</param>
            <param name="name">view template name (the file extension is optional)</param>
            <param name="skipLayout">If set to <c>true</c>, no layout will be used when rendering the view</param>
            <param name="mimeType">The mime type to use on the reply</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controller.RenderView(System.String,System.String,System.String)">
            <summary>
            Specifies the view to be processed after the action has finished its processing. 
            </summary>
            <param name="controller">Controller name get view from (if you intend to user another controller's view</param>
            <param name="name">view template name (the file extension is optional)</param>
            <param name="mimeType">The mime type to use on the reply</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controller.InPlaceRenderView(System.IO.TextWriter,System.String)">
            <summary>
            Specifies the view to be processed and results are written to System.IO.TextWriter. 
            </summary>
            <param name="output"></param>
            <param name="name">The name of the view to process.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controller.RenderSharedView(System.String)">
            <summary>
            Specifies the shared view to be processed after the action has finished its
            processing. (A partial view shared 
            by others views and usually in the root folder
            of the view directory).
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controller.RenderSharedView(System.String,System.Boolean)">
            <summary>
            Specifies the shared view to be processed after the action has finished its
            processing. (A partial view shared 
            by others views and usually in the root folder
            of the view directory).
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controller.InPlaceRenderSharedView(System.IO.TextWriter,System.String)">
            <summary>
            Specifies the shared view to be processed and results are written to System.IO.TextWriter.
            (A partial view shared by others views and usually in the root folder
            of the view directory).
            </summary>
            <param name="output"></param>
            <param name="name">The name of the view to process.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controller.CancelView">
            <summary>
            Cancels the view processing.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controller.CancelLayout">
            <summary>
            Cancels the layout processing.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controller.RenderText(System.String)">
            <summary>
            Cancels the view processing and writes
            the specified contents to the browser
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controller.RenderText(System.String,System.Object[])">
            <summary>
            Cancels the view processing and writes
            the specified contents to the browser
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controller.RenderText(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Cancels the view processing and writes
            the specified contents to the browser
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controller.DirectRender(System.String)">
            <summary>
            Sends raw contents to be rendered directly by the view engine.
            It's up to the view engine just to apply the layout and nothing else.
            </summary>
            <param name="contents">Contents to be rendered.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controller.HasTemplate(System.String)">
            <summary>
            Returns true if the specified template exists.
            </summary>
            <param name="templateName"></param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controller.RedirectToAction(System.String)">
            <summary> 
            Redirects to another action in the same controller.
            </summary>
            <param name="action">The action name</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controller.RedirectToAction(System.String,System.String[])">
            <summary> 
            Redirects to another action in the same controller.
            </summary>
            <param name="action">The action name</param>
            <param name="queryStringParameters">list of key/value pairs. Each string is supposed
            to have the format "key=value" that will be converted to a proper 
            query string</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controller.RedirectToAction(System.String,System.Collections.IDictionary)">
            <summary> 
            Redirects to another action in the same controller.
            </summary>
            <param name="action">The action name</param>
            <param name="queryStringParameters">Query string entries</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controller.RedirectToAction(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary> 
            Redirects to another action in the same controller.
            </summary>
            <param name="action">The action name</param>
            <param name="queryStringParameters">Query string entries</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controller.RedirectToReferer">
            <summary>
            Redirects to the referrer action, according to the "HTTP_REFERER" header (<c>Context.UrlReferrer</c>).
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controller.RedirectToReferrer">
            <summary>
            Redirects to the referrer action, according to the "HTTP_REFERER" header (<c>Context.UrlReferrer</c>).
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controller.RedirectToSiteRoot">
            <summary> 
            Redirects to the site root directory (<c>Context.ApplicationPath + "/"</c>).
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controller.Redirect(System.String)">
            <summary>
            Redirects to the specified URL. All other Redirects call this one.
            </summary>
            <param name="url">Target URL</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controller.Redirect(System.String,System.Collections.IDictionary)">
            <summary>
            Redirects to the specified URL. 
            </summary>
            <param name="url">Target URL</param>
            <param name="parameters">URL parameters</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controller.Redirect(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Redirects to the specified URL. 
            </summary>
            <param name="url">Target URL</param>
            <param name="parameters">URL parameters</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controller.Redirect(System.String,System.String)">
            <summary>
            Redirects to another controller and action.
            </summary>
            <param name="controller">Controller name</param>
            <param name="action">Action name</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controller.Redirect(System.String,System.String,System.String)">
            <summary>
            Redirects to another controller and action.
            </summary>
            <param name="area">Area name</param>
            <param name="controller">Controller name</param>
            <param name="action">Action name</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controller.Redirect(System.String,System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Redirects to another controller and action with the specified paramters.
            </summary>
            <param name="controller">Controller name</param>
            <param name="action">Action name</param>
            <param name="parameters">Key/value pairings</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controller.Redirect(System.String,System.String,System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Redirects to another controller and action with the specified paramters.
            </summary>
            <param name="area">Area name</param>
            <param name="controller">Controller name</param>
            <param name="action">Action name</param>
            <param name="parameters">Key/value pairings</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controller.Redirect(System.String,System.String,System.Collections.IDictionary)">
            <summary>
            Redirects to another controller and action with the specified paramters.
            </summary>
            <param name="controller">Controller name</param>
            <param name="action">Action name</param>
            <param name="parameters">Key/value pairings</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controller.Redirect(System.String,System.String,System.String,System.Collections.IDictionary)">
            <summary>
            Redirects to another controller and action with the specified paramters.
            </summary>
            <param name="area">Area name</param>
            <param name="controller">Controller name</param>
            <param name="action">Action name</param>
            <param name="parameters">Key/value pairings</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controller.ToQueryString(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Creates a querystring string representation of the namevalue collection.
            </summary>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controller.ToQueryString(System.Collections.IDictionary)">
            <summary>
            Creates a querystring string representation of the entries in the dictionary.
            </summary>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controller.InitializeFieldsFromServiceProvider(Castle.MonoRail.Framework.IRailsEngineContext)">
            <summary>
            Extracts the services the controller uses from the context -- which ultimately 
            is a service provider.
            </summary>
            <param name="context">The context/service provider.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controller.InitializeControllerState(System.String,System.String,System.String)">
            <summary>
            Initializes the state of the controller.
            </summary>
            <param name="areaName">Name of the area.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controller.SetEvaluatedAction(System.String)">
            <summary>
            Sets the evaluated action.
            </summary>
            <param name="actionName">Name of the action.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controller.Send(System.String)">
            <summary>
            Performs the specified action, which means:
            <br/>
            1. Define the default view name<br/>
            2. Run the before filters<br/>
            3. Select the method related to the action name and invoke it<br/>
            4. On error, execute the rescues if available<br/>
            5. Run the after filters<br/>
            6. Invoke the view engine<br/>
            </summary>
            <param name="action">Action name</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controller.Send(System.String,System.Collections.IDictionary)">
            <summary>
            Performs the specified action with arguments.
            </summary>
            <param name="action">Action name</param>
            <param name="actionArgs">Action arguments</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controller.InternalSend(System.String,System.Collections.IDictionary)">
            <summary>
            Performs the specified action, which means:
            <br/>
            1. Define the default view name<br/>
            2. Run the before filters<br/>
            3. Select the method related to the action name and invoke it<br/>
            4. On error, execute the rescues if available<br/>
            5. Run the after filters<br/>
            6. Invoke the view engine<br/>
            </summary>
            <param name="action">Action name</param>
            <param name="actionArgs">Action arguments</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controller.TransformActionName(System.String)">
            <summary>
            Gives a chance to subclasses to format the action name properly
            <seealso cref="T:Castle.MonoRail.Framework.WizardStepPage"/>
            </summary>
            <param name="action">Raw action name</param>
            <returns>Properly formatted action name</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controller.ResetIsPostback">
            <summary>
            To preserve standard Action semantics when using ASP.NET Views,
            the event handlers in the CodeBehind typically call <see cref="M:Castle.MonoRail.Framework.Controller.Send(System.String)"/>.
            As a result, the <see cref="P:Castle.MonoRail.Framework.Controller.IsPostBack"/> property must be logically 
            cleared to allow the Action to behave as if it was called directly.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controller.SelectMethod(System.String,System.Collections.IDictionary,Castle.MonoRail.Framework.IRequest,System.Collections.IDictionary)">
            <summary>
            Pendent
            </summary>
            <param name="action"></param>
            <param name="actions"></param>
            <param name="request"></param>
            <param name="actionArgs"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controller.InvokeMethod(System.Reflection.MethodInfo,System.Collections.IDictionary)">
            <summary>
            Pendent
            </summary>
            <param name="method"></param>
            <param name="methodArgs"></param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controller.InvokeMethod(System.Reflection.MethodInfo,Castle.MonoRail.Framework.IRequest,System.Collections.IDictionary)">
            <summary>
            Pendent
            </summary>
            <param name="method"></param>
            <param name="request"></param>
            <param name="methodArgs"></param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controller.Initialize">
            <summary>
            Initializes this instance. Implementors 
            can use this method to perform initialization
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controller.Dispose">
            <summary>
            Performs application-defined tasks associated 
            with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controller.CreateValidatorRunner(Castle.Components.Validator.IValidatorRegistry)">
            <summary>
            Creates the default validator runner. 
            </summary>
            <param name="validatorRegistry">The validator registry.</param>
            <returns></returns>
            <remarks>
            You can override this method to create a runner
            with some different configuration
            </remarks>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controller.PreSendView(System.Object)">
            <summary>
            Invoked by the view engine to perform
            any logic before the view is sent to the client.
            </summary>
            <param name="view"></param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controller.PostSendView(System.Object)">
            <summary>
            Invoked by the view engine to perform
            any logic after the view had been sent to the client.
            </summary>
            <param name="view"></param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controller.RenderMailMessage(System.String)">
            <summary>
            Creates an instance of <see cref="T:Castle.Components.Common.EmailSender.Message"/>
            using the specified template for the body
            </summary>
            <param name="templateName">
            Name of the template to load. 
            Will look in Views/mail for that template file.
            </param>
            <returns>An instance of <see cref="T:Castle.Components.Common.EmailSender.Message"/></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controller.RenderMailMessage(System.String,System.Boolean)">
            <summary>
            Creates an instance of <see cref="T:Castle.Components.Common.EmailSender.Message"/>
            using the specified template for the body
            </summary>
            <param name="templateName">
            Name of the template to load. 
            Will look in Views/mail for that template file.
            </param>
            <param name="doNotApplyLayout">If <c>true</c>, it will skip the layout</param>
            <returns>An instance of <see cref="T:Castle.Components.Common.EmailSender.Message"/></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controller.DeliverEmail(Castle.Components.Common.EmailSender.Message)">
            <summary>
            Attempts to deliver the Message using the server specified on the web.config.
            </summary>
            <param name="message">The instance of System.Web.Mail.MailMessage that will be sent</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controller.RenderEmailAndSend(System.String)">
            <summary>
            Renders and delivers the e-mail message.
            <seealso cref="M:Castle.MonoRail.Framework.Controller.DeliverEmail(Castle.Components.Common.EmailSender.Message)"/>
            </summary>
            <param name="templateName"></param>
        </member>
        <member name="P:Castle.MonoRail.Framework.Controller.ViewFolder">
            <summary>
            Gets the view folder -- (areaname + 
            controllername) or just controller name -- that this controller 
            will use by default.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.Controller.MetaDescriptor">
            <summary>
            This is intended to be used by MonoRail infrastructure.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.Controller.Actions">
            <summary>
            Gets the actions available in this controller.
            </summary>
            <remarks>It is supposed to be used by MonoRail infrastructure only</remarks>
            <value>The actions.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Controller.Resources">
            <summary>
            Gets a dicitionary of name/<see cref="T:Castle.MonoRail.Framework.IResource"/>
            </summary>
            <remarks>It is supposed to be used by MonoRail infrastructure only</remarks>
            <value>The resources.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Controller.Helpers">
            <summary>
            Gets a dictionary of name/helper instance
            </summary>
            <value>The helpers.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Controller.IsPost">
            <summary>
            Gets a value indicating whether the request is a post.
            </summary>
            <value>
            <see langword="true"/> if this request is a post; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Controller.IsGet">
            <summary>
            Gets a value indicating whether the request is a get.
            </summary>
            <value>
            <see langword="true"/> if this request is a get; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Controller.IsPut">
            <summary>
            Gets a value indicating whether the request is a put.
            </summary>
            <value>
            <see langword="true"/> if this request is a put; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Controller.IsHead">
            <summary>
            Gets a value indicating whether the request is a head.
            </summary>
            <value>
            <see langword="true"/> if this request is a head; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Controller.Name">
            <summary>
            Gets the controller's name.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.Controller.AreaName">
            <summary>
            Gets the controller's area name.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.Controller.LayoutName">
            <summary>
            Gets or set the layout being used.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.Controller.Action">
            <summary>
            Gets the name of the action being processed.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.Controller.Logger">
            <summary>
            Logger for the controller
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.Controller.SelectedViewName">
            <summary>
            Gets or sets the view which will be rendered by this action.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.Controller.PropertyBag">
            <summary>
            Gets the property bag, which is used
            to pass variables to the view.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.Controller.Context">
            <summary>
            Gets the context of this request execution.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.Controller.Session">
            <summary>
            Gets the Session dictionary.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.Controller.Flash">
            <summary>
            Gets a dictionary of volative items.
            Ideal for showing success and failures messages.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.Controller.HttpContext">
            <summary>
            Gets the web context of ASP.NET API.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.Controller.Request">
            <summary>
            Gets the request object.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.Controller.Response">
            <summary>
            Gets the response object.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.Controller.Params">
            <summary>
            Shortcut to <see cref="P:Castle.MonoRail.Framework.IRequest.Params"/> 
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.Controller.Form">
            <summary>
            Shortcut to <see cref="P:Castle.MonoRail.Framework.IRequest.Form"/> 
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.Controller.Query">
            <summary>
            Shortcut to <see cref="P:Castle.MonoRail.Framework.IRequest.QueryString"></see>
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.Controller.DynamicActions">
            <summary>
            Gets the dynamic actions dictionary. 
            <para>
            Can be used to insert dynamic actions on the controller instance.
            </para>
            </summary>
            <value>The dynamic actions dictionary.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Controller.Validator">
            <summary>
            Gets the validator runner instance.
            </summary>
            <value>The validator instance.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Controller.UrlBuilder">
            <summary>
            Gets the URL builder instance.
            </summary>
            <value>The URL builder.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Controller.IsClientConnected">
            <summary>
            Shortcut to 
            <see cref="P:Castle.MonoRail.Framework.IResponse.IsClientConnected"/>
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.Controller.IsPostBack">
            <summary>
            Indicates that the current Action resulted from an ASP.NET PostBack.
            As a result, this property is only relavent to controllers using 
            WebForms views.  It is placed on the base Controller for convenience 
            only to avoid the need to extend the Controller or provide additional 
            helper classes.  It is marked virtual to better support testing.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.Controller.ServiceProvider">
            <summary>
            Gets the service provider.
            </summary>
            <value>The service provider.</value>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controllers.FilesController.AjaxScripts">
            <summary>
            Script used by <see cref="T:Castle.MonoRail.Framework.Helpers.AjaxHelper"/>.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controllers.FilesController.BehaviourScripts">
            <summary>
            Script used by <see cref="T:Castle.MonoRail.Framework.Helpers.AjaxHelper"/>.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controllers.FilesController.EffectsFatScripts">
            <summary>
            Script used by <see cref="T:Castle.MonoRail.Framework.Helpers.EffectsFatHelper"/>.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controllers.FilesController.Effects2">
            <summary>
            Script used by <see cref="T:Castle.MonoRail.Framework.Helpers.Effects2Helper"/>.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controllers.FilesController.ValidateConfig">
            <summary>
            Script used by <see cref="T:Castle.MonoRail.Framework.Helpers.ValidationHelper"/>.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controllers.FilesController.ValidateCore">
            <summary>
            Script used by <see cref="T:Castle.MonoRail.Framework.Helpers.ValidationHelper"/>.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controllers.FilesController.ValidateValidators">
            <summary>
            Script used by <see cref="T:Castle.MonoRail.Framework.Helpers.ValidationHelper"/>.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controllers.FilesController.ValidateLang">
            <summary>
            Script used by <see cref="T:Castle.MonoRail.Framework.Helpers.ValidationHelper"/>.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controllers.FilesController.ZebdaScripts">
            <summary>
            Install the zebda validation script
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Controllers.FilesController.FormHelperScript">
            <summary>
            Script used by <see cref="T:Castle.MonoRail.Framework.Helpers.AjaxHelper"/>.
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.Extensions.ExceptionChaining.AbstractExceptionHandler">
            <summary>
            Provides a basic implementation of <see cref="T:Castle.MonoRail.Framework.Extensions.ExceptionChaining.IExceptionHandler"/>
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.Extensions.ExceptionChaining.IExceptionHandler">
            <summary>
            Represents a processor of an exception.
            The processor might choose to register the exception
            in some specific way and then delegate the execution
            to the next handler
            <seealso cref="T:Castle.MonoRail.Framework.Extensions.ExceptionChaining.IConfigurableHandler"/>
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Extensions.ExceptionChaining.IExceptionHandler.Initialize">
            <summary>
            Implementors should perform any required
            initialization
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Extensions.ExceptionChaining.IExceptionHandler.Process(Castle.MonoRail.Framework.IRailsEngineContext)">
            <summary>
            Implementors should perform the action 
            on the exception. Note that the exception 
            is available in <see cref="P:Castle.MonoRail.Framework.IRailsEngineContext.LastException"/>
            </summary>
            <param name="context"></param>
        </member>
        <member name="P:Castle.MonoRail.Framework.Extensions.ExceptionChaining.IExceptionHandler.Next">
            <summary>
            The next exception in the sink 
            or null if none exists.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Extensions.ExceptionChaining.AbstractExceptionHandler.Initialize">
            <summary>
            Implementors should perform any required
            initialization
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Extensions.ExceptionChaining.AbstractExceptionHandler.Process(Castle.MonoRail.Framework.IRailsEngineContext)">
            <summary>
            Implementors should perform the action
            on the exception. Note that the exception
            is available in <see cref="P:Castle.MonoRail.Framework.IRailsEngineContext.LastException"/>
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Extensions.ExceptionChaining.AbstractExceptionHandler.InvokeNext(Castle.MonoRail.Framework.IRailsEngineContext)">
            <summary>
            Invokes the next handler.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Extensions.ExceptionChaining.AbstractExceptionHandler.BuildStandardMessage(Castle.MonoRail.Framework.IRailsEngineContext)">
            <summary>
            Builds the standard message.
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="P:Castle.MonoRail.Framework.Extensions.ExceptionChaining.AbstractExceptionHandler.Next">
            <summary>
            The next exception in the sink
            or null if none exists.
            </summary>
            <value></value>
        </member>
        <member name="T:Castle.MonoRail.Framework.Extensions.ExceptionChaining.EmailHandler">
            <summary>
            A handle that sends the exception by email
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.Extensions.ExceptionChaining.IConfigurableHandler">
            <summary>
            Extends <see cref="T:Castle.MonoRail.Framework.Extensions.ExceptionChaining.IExceptionHandler"/> providing
            an <see cref="M:Castle.MonoRail.Framework.Extensions.ExceptionChaining.IConfigurableHandler.Configure(System.Xml.XmlNode)"/> method
            that is invoked by the framework.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Extensions.ExceptionChaining.IConfigurableHandler.Configure(System.Xml.XmlNode)">
            <summary>
            Implementors should check for known attributes and child nodes
            within the <c>exceptionHandlerNode</c>
            </summary>
            <param name="exceptionHandlerNode">The Xml node 
            that represents this handler on the configuration file</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Extensions.ExceptionChaining.EmailHandler.Configure(System.Xml.XmlNode)">
            <summary>
            Implementors should check for known attributes and child nodes
            within the <c>exceptionHandlerNode</c>
            </summary>
            <param name="exceptionHandlerNode">The Xml node
            that represents this handler on the configuration file</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Extensions.ExceptionChaining.EmailHandler.Process(Castle.MonoRail.Framework.IRailsEngineContext)">
            <summary>
            Implementors should perform the action
            on the exception. Note that the exception
            is available in <see cref="P:Castle.MonoRail.Framework.IRailsEngineContext.LastException"/>
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Castle.MonoRail.Framework.Extensions.ExceptionChaining.ExceptionChainingExtension">
            <summary>
            This extension allow one to perform one or more steps
            in response to an exception threw by an action. 
            
            <seealso cref="T:Castle.MonoRail.Framework.Extensions.ExceptionChaining.IExceptionHandler"/>
            
            </summary>
            
            <remarks>
            To successfully install this extension you must register 
            it on the <c>extensions</c> node and the handlers within the <c>exception</c> node:
            <code>
              &lt;monorail&gt;
              	&lt;extensions&gt;
              	  &lt;extension type="Castle.MonoRail.Framework.Extensions.ExceptionChaining.ExceptionChainingExtension, Castle.MonoRail.Framework" /&gt;
              	&lt;/extensions&gt;
              	
              	&lt;exception&gt;
              	  &lt;exceptionHandler type="Type name that implements IExceptionHandler" /&gt;
              	  &lt;exceptionHandler type="Type name that implements IExceptionHandler" /&gt;
              	&lt;/exception&gt;
              &lt;/monorail&gt;
            </code>
            <para>
            Controllers can request IExceptionProcessor through IServiceProvider
            and invoke the handlers to process an exception
            </para>
            <code>
            <![CDATA[
            public void BuyMercedes()
            {
            	try
            	{
            		...
            	}
            	catch(Exception ex)
            	{
            		IExceptionProcessor exProcessor = ServiceProvider.GetService<IExceptionProcessor>();
            		exProcessor.ProcessException(ex);
            
            		RenderView("CouldNotBuyMercedes");
            	}
            }
            ]]>
            </code>
            </remarks>
        </member>
        <member name="T:Castle.MonoRail.Framework.IMonoRailExtension">
            <summary>
            Contract for extensions that want to hook 
            on MonoRail's events
            </summary>
            <remarks>
            Extensions implementations must be thread safe and stateless.
            </remarks>
        </member>
        <member name="M:Castle.MonoRail.Framework.IMonoRailExtension.SetExtensionConfigNode(System.Xml.XmlNode)">
            <summary>
            Gives to the extension implementor a chance to read 
            attributes and child nodes of the extension node
            </summary>
            <param name="node">The node that defines the MonoRail extension</param>
        </member>
        <member name="T:Castle.MonoRail.Framework.Extensions.ExceptionChaining.IExceptionProcessor">
            <summary>
            Provides an interface to the ExceptionChaingingExtension 
            for manual triggering
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Extensions.ExceptionChaining.IExceptionProcessor.ProcessException(System.Exception)">
            <summary>
            Initiates the ExceptionChainingExtension manualy
            </summary>
            <param name="exception">The exception to process</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Extensions.ExceptionChaining.ExceptionChainingExtension.SetExtensionConfigNode(System.Xml.XmlNode)">
            <summary>
            Gives to the extension implementor a chance to read
            attributes and child nodes of the extension node
            </summary>
            <param name="node">The node that defines the MonoRail extension</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Extensions.ExceptionChaining.ExceptionChainingExtension.Service(System.IServiceProvider)">
            <summary>
            Services the specified provider.
            </summary>
            <param name="provider">The provider.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Extensions.ExceptionChaining.ExceptionChainingExtension.ProcessException(System.Exception)">
            <summary>
            Initiates the ExceptionChainingExtension manualy
            </summary>
            <param name="exception">The exception to process</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Extensions.ExceptionChaining.ExceptionChainingExtension.OnException(Castle.MonoRail.Framework.IRailsEngineContext)">
            <summary>
            Called when an exception happens.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Extensions.ExceptionChaining.ExceptionChainingExtension.InstallExceptionHandler(System.Xml.XmlNode,System.String)">
            <summary>
            Installs the exception handler.
            </summary>
            <param name="node">The node.</param>
            <param name="typeName">Name of the type.</param>
        </member>
        <member name="T:Castle.MonoRail.Framework.Extensions.ExceptionChaining.FilteredExceptionHandler">
            <summary>
            This class expects to be configured with exclude types that detail the types of 
            exceptions to be ignored.
            
            <code>
                <exclude type="System.Security.SecurityException, mscrolib" />
            </code>
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Extensions.ExceptionChaining.FilteredExceptionHandler.Configure(System.Xml.XmlNode)">
            <summary>
            Implementors should check for known attributes and child nodes
            within the <c>exceptionHandlerNode</c>
            </summary>
            <param name="exceptionHandlerNode">The Xml node
            that represents this handler on the configuration file</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Extensions.ExceptionChaining.FilteredExceptionHandler.Process(Castle.MonoRail.Framework.IRailsEngineContext)">
            <summary>
            Implementors should perform the action
            on the exception. Note that the exception
            is available in <see cref="P:Castle.MonoRail.Framework.IRailsEngineContext.LastException"/>
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Castle.MonoRail.Framework.Extensions.ExceptionChaining.LoggingExceptionHandler">
            <summary>
            Handles that logs the exception using the the logger factory.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Extensions.ExceptionChaining.LoggingExceptionHandler.Process(Castle.MonoRail.Framework.IRailsEngineContext)">
            <summary>
            Implementors should perform the action
            on the exception. Note that the exception
            is available in <see cref="P:Castle.MonoRail.Framework.IRailsEngineContext.LastException"/>
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Castle.MonoRail.Framework.Extensions.Session.CustomSessionExtension">
            <summary>
            This extension allow one to provide a custom 
            implementation of the session available on <see cref="T:Castle.MonoRail.Framework.IRailsEngineContext"/>
            </summary>
            <remarks>
            To successfully install this extension you must add the attribute <c>customSession</c>
            to the <c>monoRail</c> configuration node and register the extension on the extensions node.
            <code>
              &lt;monoRail customSession="Type name that implements ICustomSessionFactory"&gt;
              	&lt;extensions&gt;
              	  &lt;extension type="Castle.MonoRail.Framework.Extensions.Session.CustomSessionExtension, Castle.MonoRail.Framework" /&gt;
              	&lt;/extensions&gt;
              &lt;/monoRail&gt;
            </code>
            </remarks>
        </member>
        <member name="F:Castle.MonoRail.Framework.Extensions.Session.CustomSessionExtension.customSession">
            <summary>
            Reference to an instance of <see cref="T:Castle.MonoRail.Framework.Extensions.Session.ICustomSessionFactory"/>
            obtained from the configuration
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Extensions.Session.CustomSessionExtension.SetExtensionConfigNode(System.Xml.XmlNode)">
            <summary>
            Gives to the extension implementor a chance to read
            attributes and child nodes of the extension node
            </summary>
            <param name="node">The node that defines the MonoRail extension</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Extensions.Session.CustomSessionExtension.Service(System.IServiceProvider)">
            <summary>
            Services the specified provider.
            </summary>
            <param name="provider">The provider.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Extensions.Session.CustomSessionExtension.Init(Castle.MonoRail.Framework.ExtensionManager,Castle.MonoRail.Framework.Configuration.MonoRailConfiguration)">
            <summary>
            Reads the attribute <c>customSession</c> 
            from <see cref="T:Castle.MonoRail.Framework.Configuration.MonoRailConfiguration"/> and
            instantiate it based on the type name provided.
            </summary>
            <exception cref="T:System.Configuration.ConfigurationException">
            If the typename was not provided or the type 
            could not be instantiated/found
            </exception>
            <param name="manager">The Extension Manager</param>
            <param name="configuration">The configuration</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Extensions.Session.CustomSessionExtension.OnAdquireSessionState(Castle.MonoRail.Framework.IRailsEngineContext)">
            <summary>
            Overrides the ISession instance on <see cref="T:Castle.MonoRail.Framework.IRailsEngineContext"/>.
            </summary>
            <remarks>
            Note that the session available through IHttpContext is left untouched</remarks>
            <param name="context"></param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Extensions.Session.CustomSessionExtension.OnReleaseSessionState(Castle.MonoRail.Framework.IRailsEngineContext)">
            <summary>
            Retrives the ISession instance from <see cref="T:Castle.MonoRail.Framework.IRailsEngineContext"/>.
            and invokes <see cref="M:Castle.MonoRail.Framework.Extensions.Session.ICustomSessionFactory.PersistSession(System.Collections.IDictionary,Castle.MonoRail.Framework.IRailsEngineContext)"/>
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.Extensions.Session.ICustomSessionFactory">
            <summary>
            Contract used by <see cref="T:Castle.MonoRail.Framework.Extensions.Session.CustomSessionExtension"/>
            to obtain the session implementation provided by the programmer
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Extensions.Session.ICustomSessionFactory.ObtainSession(Castle.MonoRail.Framework.IRailsEngineContext)">
            <summary>
            Should identify the session using the context (usually a cookie is used
            for that)
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Extensions.Session.ICustomSessionFactory.PersistSession(System.Collections.IDictionary,Castle.MonoRail.Framework.IRailsEngineContext)">
            <summary>
            Should persist the session state associated with the context (again, a cookie 
            is the standard approach to identify the session)
            </summary>
            <param name="session"></param>
            <param name="context"></param>
        </member>
        <member name="T:Castle.MonoRail.Framework.ExtensionHandler">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Castle.MonoRail.Framework.ExtensionManager">
            <summary>
            MonoRail's extension manager. 
            It fires events related to MonoRail that can be used to add additional behaviour.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.ExtensionManager.#ctor(System.ComponentModel.Design.IServiceContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.ExtensionManager"/> class.
            </summary>
            <param name="serviceContainer">The service container.</param>
        </member>
        <member name="P:Castle.MonoRail.Framework.ExtensionManager.ServiceContainer">
            <summary>
            Gets the service container.
            </summary>
            <value>The service container.</value>
        </member>
        <member name="E:Castle.MonoRail.Framework.ExtensionManager.ContextCreated">
            <summary>
            Occurs when a context is created.
            </summary>
        </member>
        <member name="E:Castle.MonoRail.Framework.ExtensionManager.ContextDisposed">
            <summary>
            Occurs when a context is disposed.
            </summary>
        </member>
        <member name="E:Castle.MonoRail.Framework.ExtensionManager.ActionException">
            <summary>
            Occurs when an action throws an exception.
            </summary>
        </member>
        <member name="E:Castle.MonoRail.Framework.ExtensionManager.UnhandledException">
            <summary>
            Occurs when an unhandled exception is thrown.
            </summary>
        </member>
        <member name="E:Castle.MonoRail.Framework.ExtensionManager.AcquireSessionState">
            <summary>
            Occurs when a session is adquired.
            </summary>
        </member>
        <member name="E:Castle.MonoRail.Framework.ExtensionManager.ReleaseSessionState">
            <summary>
            Occurs when a session is released.
            </summary>
        </member>
        <member name="E:Castle.MonoRail.Framework.ExtensionManager.PreProcess">
            <summary>
            Occurs before pre process a handler.
            </summary>
        </member>
        <member name="E:Castle.MonoRail.Framework.ExtensionManager.PostProcess">
            <summary>
            Occurs after process a handler.
            </summary>
        </member>
        <member name="E:Castle.MonoRail.Framework.ExtensionManager.AuthenticateRequest">
            <summary>
            Occurs when a request needs to authenticate.
            </summary>
        </member>
        <member name="E:Castle.MonoRail.Framework.ExtensionManager.AuthorizeRequest">
            <summary>
            Occurs when a request needs to be authorized.
            </summary>
        </member>
        <member name="E:Castle.MonoRail.Framework.ExtensionManager.ResolveRequestCache">
            <summary>
            Occurs upon request cache resolval.
            </summary>
        </member>
        <member name="E:Castle.MonoRail.Framework.ExtensionManager.UpdateRequestCache">
            <summary>
            Occurs when a cache need to be updated.
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.Filters.AntiGoogleWebAcceleratorFilter">
            <summary>
            Pendent
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.IFilter">
            <summary>
            Dictates the contract for filters. Implementors 
            should use filter to perform any logic before and/or
            after the action invocation.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.IFilter.Perform(Castle.MonoRail.Framework.ExecuteEnum,Castle.MonoRail.Framework.IRailsEngineContext,Castle.MonoRail.Framework.Controller)">
            <summary>
            Implementors should perform they filter logic and
            return <c>true</c> if the action should be processed.
            </summary>
            <param name="exec">When this filter is being invoked</param>
            <param name="context">Current context</param>
            <param name="controller">The controller instance</param>
            <returns><c>true</c> if the action 
            should be invoked, otherwise <c>false</c></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Filters.AntiGoogleWebAcceleratorFilter.Perform(Castle.MonoRail.Framework.ExecuteEnum,Castle.MonoRail.Framework.IRailsEngineContext,Castle.MonoRail.Framework.Controller)">
            <summary>
            Implementors should perform they filter logic and
            return <c>true</c> if the action should be processed.
            </summary>
            <param name="exec">When this filter is being invoked</param>
            <param name="context">Current context</param>
            <param name="controller">The controller instance</param>
            <returns>
            	<c>true</c> if the action
            should be invoked, otherwise <c>false</c>
            </returns>
        </member>
        <member name="T:Castle.MonoRail.Framework.Filters.RequestStore">
            <summary>
            Enum to identify where a value is stored.
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Filters.RequestStore.Session">
            <summary>
            Value is stored in the Session object.
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Filters.RequestStore.Cookie">
            <summary>
            Value is stored in a cookie object.
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Filters.RequestStore.QueryString">
            <summary>
            Value is stored in the querystring.
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Filters.RequestStore.Form">
            <summary>
            Value is stored in the form collection.
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Filters.RequestStore.Params">
            <summary>
            Value is stored in either query string or form collection.
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.Filters.LocalizationFilter">
            <summary>
            The LocalizationFilter can be used to determine the culture to use
            for resources and UI.
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.IFilterAttributeAware">
            <summary>
            Dictates a contract that the defining 
            FilterAttribute can be set
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.IFilterAttributeAware.Filter">
            <summary>
            Sets the filter.
            </summary>
            <value>The filter.</value>
        </member>
        <member name="M:Castle.MonoRail.Framework.Filters.LocalizationFilter.Perform(Castle.MonoRail.Framework.ExecuteEnum,Castle.MonoRail.Framework.IRailsEngineContext,Castle.MonoRail.Framework.Controller)">
            <summary>
            Executes a sequence of steps to determine the browser location/culture.
            </summary>
            <param name="exec">When this filter is being invoked</param>
            <param name="context">Current context</param>
            <param name="controller">The controller instance</param>
            <returns>
            	<c>true</c> if the action should be invoked, otherwise <c>false</c>
            </returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Filters.LocalizationFilter.GetUserLanguage(Castle.MonoRail.Framework.IRequest)">
            <summary>
            Gets the user language.
            </summary>
            <param name="request">The request.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Filters.LocalizationFilter.GetLocaleId(Castle.MonoRail.Framework.IRailsEngineContext)">
            <summary>
            Gets the locale id.
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="P:Castle.MonoRail.Framework.Filters.LocalizationFilter.Filter">
            <summary>
            Sets the filter.
            </summary>
            <value>The filter.</value>
        </member>
        <member name="T:Castle.MonoRail.Framework.Filters.PersistFlashFilter">
            <summary>
            Persist entire flash content after an action execution on the controller.
            <seealso cref="T:Castle.MonoRail.Framework.Attributes.PersistFlashAttribute"/>
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Filters.PersistFlashFilter.Perform(Castle.MonoRail.Framework.ExecuteEnum,Castle.MonoRail.Framework.IRailsEngineContext,Castle.MonoRail.Framework.Controller)">
            <summary>
            Implementors should perform they filter logic and
            return <c>true</c> if the action should be processed.
            </summary>
            <param name="exec">When this filter is being invoked</param>
            <param name="context">Current context</param>
            <param name="controller">The controller instance</param>
            <returns>
            	<c>true</c> if the action
            should be invoked, otherwise <c>false</c>
            </returns>
        </member>
        <member name="T:Castle.MonoRail.Framework.Filters.RequestValidatorFilter">
            <summary>
            Forces ASP.Net to perform a more complete request validation
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Filters.RequestValidatorFilter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.Filters.RequestValidatorFilter"/> class.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Filters.RequestValidatorFilter.Perform(Castle.MonoRail.Framework.ExecuteEnum,Castle.MonoRail.Framework.IRailsEngineContext,Castle.MonoRail.Framework.Controller)">
            <summary>
            
            </summary>
            <param name="exec">When this filter is being invoked</param>
            <param name="context">Current context</param>
            <param name="controller">The controller instance</param>
            <returns>
            	<c>true</c> if the action
            should be invoked, otherwise <c>false</c>
            </returns>
        </member>
        <member name="T:Castle.MonoRail.Framework.Helpers.ValidationStrategy.FValidateWebValidator">
            <summary>
            Implementation of a browser validator that uses the <c>fValidate</c>
            javascript library.
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.Helpers.ValidationStrategy.IBrowserValidatorProvider">
            <summary>
            Abstracts the approach to create javascript
            validation for forms.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.ValidationStrategy.IBrowserValidatorProvider.CreateConfiguration(System.Collections.IDictionary)">
            <summary>
            Implementors should attempt to read their specific configuration 
            from the <paramref name="parameters"/>, configure and return 
            a class that extends from <see cref="T:Castle.Components.Validator.BrowserValidationConfiguration"/>
            </summary>
            <returns>An instance that extends from <see cref="T:Castle.Components.Validator.BrowserValidationConfiguration"/></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.ValidationStrategy.IBrowserValidatorProvider.CreateGenerator(Castle.Components.Validator.BrowserValidationConfiguration,Castle.Components.Validator.InputElementType,System.Collections.IDictionary)">
            <summary>
            Implementors should return their generator instance. 
            </summary>
            <returns>A generator instance</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.ValidationStrategy.FValidateWebValidator.CreateConfiguration(System.Collections.IDictionary)">
            <summary>
            Implementors should attempt to read their specific configuration
            from the <paramref name="parameters"/>, configure and return
            a class that extends from <see cref="T:Castle.Components.Validator.BrowserValidationConfiguration"/>
            </summary>
            <param name="parameters"></param>
            <returns>
            An instance that extends from <see cref="T:Castle.Components.Validator.BrowserValidationConfiguration"/>
            </returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.ValidationStrategy.FValidateWebValidator.CreateGenerator(Castle.Components.Validator.BrowserValidationConfiguration,Castle.Components.Validator.InputElementType,System.Collections.IDictionary)">
            <summary>
            Implementors should return their generator instance.
            </summary>
            <param name="config"></param>
            <param name="inputType"></param>
            <param name="attributes"></param>
            <returns>A generator instance</returns>
        </member>
        <member name="T:Castle.MonoRail.Framework.Helpers.ValidationStrategy.FValidateWebValidator.FValidateConfiguration">
            <summary>
            Supported configuration for fValidate.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.ValidationStrategy.FValidateWebValidator.FValidateConfiguration.Configure(System.Collections.IDictionary)">
            <summary>
            Configures the JS library based on the supplied parameters.
            </summary>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="T:Castle.MonoRail.Framework.Helpers.ValidationStrategy.FValidateWebValidator.FValidateGenerator">
            <summary>
            Generator for fValidate validation.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.ValidationStrategy.FValidateWebValidator.FValidateGenerator.#ctor(Castle.Components.Validator.InputElementType,System.Collections.IDictionary)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.Helpers.ValidationStrategy.FValidateWebValidator.FValidateGenerator"/> class.
            </summary>
            <param name="inputType">Type of the input.</param>
            <param name="attributes">The attributes.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.ValidationStrategy.FValidateWebValidator.FValidateGenerator.SetAsRequired(System.String,System.String)">
            <summary>
            Sets that a field is required.
            </summary>
            <param name="target">The target name (ie, a hint about the controller being validated)</param>
            <param name="violationMessage">The violation message.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.ValidationStrategy.FValidateWebValidator.FValidateGenerator.SetRegExp(System.String,System.String,System.String)">
            <summary>
            Sets that a field value must match the specified regular expression.
            </summary>
            <param name="target">The target name (ie, a hint about the controller being validated)</param>
            <param name="regExp">The reg exp.</param>
            <param name="violationMessage">The violation message.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.ValidationStrategy.FValidateWebValidator.FValidateGenerator.SetEmail(System.String,System.String)">
            <summary>
            Sets that a field value must be a valid email address.
            </summary>
            <param name="target">The target name (ie, a hint about the controller being validated)</param>
            <param name="violationMessage">The violation message.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.ValidationStrategy.FValidateWebValidator.FValidateGenerator.SetDigitsOnly(System.String,System.String)">
            <summary>
            Set that a field should only accept digits.
            </summary>
            <param name="target">The target name (ie, a hint about the controller being validated)</param>
            <param name="violationMessage">The violation message.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.ValidationStrategy.FValidateWebValidator.FValidateGenerator.SetNumberOnly(System.String,System.String)">
            <summary>
            Set that a field should only accept numbers.
            </summary>
            <param name="target">The target name (ie, a hint about the controller being validated)</param>
            <param name="violationMessage">The violation message.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.ValidationStrategy.FValidateWebValidator.FValidateGenerator.SetExactLength(System.String,System.Int32)">
            <summary>
            Sets that field must have an exact lenght.
            </summary>
            <param name="target">The target name (ie, a hint about the controller being validated)</param>
            <param name="length">The length.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.ValidationStrategy.FValidateWebValidator.FValidateGenerator.SetExactLength(System.String,System.Int32,System.String)">
            <summary>
            Sets that field must have an exact lenght.
            </summary>
            <param name="target">The target name (ie, a hint about the controller being validated)</param>
            <param name="length">The length.</param>
            <param name="violationMessage">The violation message.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.ValidationStrategy.FValidateWebValidator.FValidateGenerator.SetMinLength(System.String,System.Int32)">
            <summary>
            Sets that field must have an minimum lenght.
            </summary>
            <param name="target">The target name (ie, a hint about the controller being validated)</param>
            <param name="minLength">The minimum length.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.ValidationStrategy.FValidateWebValidator.FValidateGenerator.SetMinLength(System.String,System.Int32,System.String)">
            <summary>
            Sets that field must have an minimum lenght.
            </summary>
            <param name="target">The target name (ie, a hint about the controller being validated)</param>
            <param name="minLength">The minimum length.</param>
            <param name="violationMessage">The violation message.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.ValidationStrategy.FValidateWebValidator.FValidateGenerator.SetMaxLength(System.String,System.Int32)">
            <summary>
            Sets that field must have an maximum lenght.
            </summary>
            <param name="target">The target name (ie, a hint about the controller being validated)</param>
            <param name="maxLength">The maximum length.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.ValidationStrategy.FValidateWebValidator.FValidateGenerator.SetMaxLength(System.String,System.Int32,System.String)">
            <summary>
            Sets that field must have an maximum lenght.
            </summary>
            <param name="target">The target name (ie, a hint about the controller being validated)</param>
            <param name="maxLength">The maximum length.</param>
            <param name="violationMessage">The violation message.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.ValidationStrategy.FValidateWebValidator.FValidateGenerator.SetLengthRange(System.String,System.Int32,System.Int32)">
            <summary>
            Sets that field must be between a length range.
            </summary>
            <param name="target">The target name (ie, a hint about the controller being validated)</param>
            <param name="minLength">The minimum length.</param>
            <param name="maxLength">The maximum length.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.ValidationStrategy.FValidateWebValidator.FValidateGenerator.SetLengthRange(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Sets that field must be between a length range.
            </summary>
            <param name="target">The target name (ie, a hint about the controller being validated)</param>
            <param name="minLength">The minimum length.</param>
            <param name="maxLength">The maximum length.</param>
            <param name="violationMessage">The violation message.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.ValidationStrategy.FValidateWebValidator.FValidateGenerator.SetValueRange(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Sets that field must be between a value range.
            </summary>
            <param name="target">The target name (ie, a hint about the controller being validated)</param>
            <param name="minValue">Minimum value.</param>
            <param name="maxValue">Maximum value.</param>
            <param name="violationMessage">The violation message.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.ValidationStrategy.FValidateWebValidator.FValidateGenerator.SetValueRange(System.String,System.Decimal,System.Decimal,System.String)">
            <summary>
            Sets that field must be between a value range.
            </summary>
            <param name="target">The target name (ie, a hint about the controller being validated)</param>
            <param name="minValue">Minimum value.</param>
            <param name="maxValue">Maximum value.</param>
            <param name="violationMessage">The violation message.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.ValidationStrategy.FValidateWebValidator.FValidateGenerator.SetValueRange(System.String,System.DateTime,System.DateTime,System.String)">
            <summary>
            Sets that field must be between a value range.
            </summary>
            <param name="target">The target name (ie, a hint about the controller being validated)</param>
            <param name="minValue">Minimum value.</param>
            <param name="maxValue">Maximum value.</param>
            <param name="violationMessage">The violation message.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.ValidationStrategy.FValidateWebValidator.FValidateGenerator.SetValueRange(System.String,System.String,System.String,System.String)">
            <summary>
            Sets that field must be between a value range.
            </summary>
            <param name="target">The target name (ie, a hint about the controller being validated)</param>
            <param name="minValue">Minimum value.</param>
            <param name="maxValue">Maximum value.</param>
            <param name="violationMessage">The violation message.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.ValidationStrategy.FValidateWebValidator.FValidateGenerator.SetAsSameAs(System.String,System.String,System.String)">
            <summary>
            Set that a field value must be the same as another field's value.
            </summary>
            <param name="target">The target name (ie, a hint about the controller being validated)</param>
            <param name="comparisonFieldName">The name of the field to compare with.</param>
            <param name="violationMessage">The violation message.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.ValidationStrategy.FValidateWebValidator.FValidateGenerator.SetAsNotSameAs(System.String,System.String,System.String)">
            <summary>
            Set that a field value must _not_ be the same as another field's value.
            </summary>
            <param name="target">The target name (ie, a hint about the controller being validated)</param>
            <param name="comparisonFieldName">The name of the field to compare with.</param>
            <param name="violationMessage">The violation message.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.ValidationStrategy.FValidateWebValidator.FValidateGenerator.SetDate(System.String,System.String)">
            <summary>
            Set that a field value must be a valid date.
            </summary>
            <param name="target">The target name (ie, a hint about the controller being validated)</param>
            <param name="violationMessage">The violation message.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.ValidationStrategy.FValidateWebValidator.FValidateGenerator.AddValidator(System.String,System.String)">
            <summary>
            Adds the validator.
            </summary>
            <param name="target">The target.</param>
            <param name="validator">The validator.</param>
        </member>
        <member name="T:Castle.MonoRail.Framework.Helpers.ValidationStrategy.PrototypeWebValidator">
            <summary>
            Implements support for really easy field validation 
            http://tetlaw.id.au/view/javascript/really-easy-field-validation
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.ValidationStrategy.PrototypeWebValidator.CreateConfiguration(System.Collections.IDictionary)">
            <summary>
            Implementors should attempt to read their specific configuration
            from the <paramref name="parameters"/>, configure and return
            a class that extends from <see cref="T:Castle.Components.Validator.BrowserValidationConfiguration"/>
            </summary>
            <param name="parameters"></param>
            <returns>
            An instance that extends from <see cref="T:Castle.Components.Validator.BrowserValidationConfiguration"/>
            </returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.ValidationStrategy.PrototypeWebValidator.CreateGenerator(Castle.Components.Validator.BrowserValidationConfiguration,Castle.Components.Validator.InputElementType,System.Collections.IDictionary)">
            <summary>
            Implementors should return their generator instance.
            </summary>
            <param name="config"></param>
            <param name="inputType"></param>
            <param name="attributes"></param>
            <returns>A generator instance</returns>
        </member>
        <member name="T:Castle.MonoRail.Framework.Helpers.ValidationStrategy.PrototypeWebValidator.PrototypeValidationConfiguration">
            <summary>
            Configuration for the Prototype Field Validation
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.ValidationStrategy.PrototypeWebValidator.PrototypeValidationConfiguration.CreateBeforeFormClosed(System.String)">
            <summary>
            Implementors should return any tag/js content
            to be rendered after the form tag is closed.
            </summary>
            <param name="formId">The form id.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.ValidationStrategy.PrototypeWebValidator.PrototypeValidationConfiguration.Configure(System.Collections.IDictionary)">
            <summary>
            Configures the JS library based on the supplied parameters.
            </summary>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.ValidationStrategy.PrototypeWebValidator.PrototypeValidationConfiguration.AddCustomRule(System.String,System.String,System.String)">
            <summary>
            Adds a custom rule.
            </summary>
            <param name="className">Name of the class.</param>
            <param name="violationMessage">The violation message.</param>
            <param name="rule">The rule.</param>
        </member>
        <member name="T:Castle.MonoRail.Framework.Helpers.ValidationStrategy.PrototypeWebValidator.PrototypeValidationGenerator">
            <summary>
            Generator for prototype field validation 
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.ValidationStrategy.PrototypeWebValidator.PrototypeValidationGenerator.#ctor(Castle.MonoRail.Framework.Helpers.ValidationStrategy.PrototypeWebValidator.PrototypeValidationConfiguration,Castle.Components.Validator.InputElementType,System.Collections.IDictionary)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.Helpers.ValidationStrategy.PrototypeWebValidator.PrototypeValidationGenerator"/> class.
            </summary>
            <param name="config">Validation configuration instance</param>
            <param name="inputType">Type of the input.</param>
            <param name="attributes">The attributes.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.ValidationStrategy.PrototypeWebValidator.PrototypeValidationGenerator.SetAsRequired(System.String,System.String)">
            <summary>
            Sets that a field is required.
            </summary>
            <param name="target">The target name (ie, a hint about the controller being validated)</param>
            <param name="violationMessage">The violation message.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.ValidationStrategy.PrototypeWebValidator.PrototypeValidationGenerator.SetDigitsOnly(System.String,System.String)">
            <summary>
            Set that a field should only accept digits.
            </summary>
            <param name="target">The target name (ie, a hint about the controller being validated)</param>
            <param name="violationMessage">The violation message.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.ValidationStrategy.PrototypeWebValidator.PrototypeValidationGenerator.SetNumberOnly(System.String,System.String)">
            <summary>
            Set that a field should only accept numbers.
            </summary>
            <param name="target">The target name (ie, a hint about the controller being validated)</param>
            <param name="violationMessage">The violation message.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.ValidationStrategy.PrototypeWebValidator.PrototypeValidationGenerator.SetEmail(System.String,System.String)">
            <summary>
            Sets that a field value must be a valid email address.
            </summary>
            <param name="target">The target name (ie, a hint about the controller being validated)</param>
            <param name="violationMessage">The violation message.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.ValidationStrategy.PrototypeWebValidator.PrototypeValidationGenerator.SetRegExp(System.String,System.String,System.String)">
            <summary>
            Sets that a field value must match the specified regular expression.
            </summary>
            <param name="target">The target name (ie, a hint about the controller being validated)</param>
            <param name="regExp">The reg exp.</param>
            <param name="violationMessage">The violation message.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.ValidationStrategy.PrototypeWebValidator.PrototypeValidationGenerator.SetExactLength(System.String,System.Int32)">
            <summary>
            Sets that field must have an exact lenght.
            </summary>
            <param name="target">The target name (ie, a hint about the controller being validated)</param>
            <param name="length">The length.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.ValidationStrategy.PrototypeWebValidator.PrototypeValidationGenerator.SetExactLength(System.String,System.Int32,System.String)">
            <summary>
            Sets that field must have an exact lenght.
            </summary>
            <param name="target">The target name (ie, a hint about the controller being validated)</param>
            <param name="length">The length.</param>
            <param name="violationMessage">The violation message.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.ValidationStrategy.PrototypeWebValidator.PrototypeValidationGenerator.SetMinLength(System.String,System.Int32)">
            <summary>
            Sets that field must have an minimum lenght.
            </summary>
            <param name="target">The target name (ie, a hint about the controller being validated)</param>
            <param name="minLength">The minimum length.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.ValidationStrategy.PrototypeWebValidator.PrototypeValidationGenerator.SetMinLength(System.String,System.Int32,System.String)">
            <summary>
            Sets that field must have an minimum lenght.
            </summary>
            <param name="target">The target name (ie, a hint about the controller being validated)</param>
            <param name="minLength">The minimum length.</param>
            <param name="violationMessage">The violation message.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.ValidationStrategy.PrototypeWebValidator.PrototypeValidationGenerator.SetMaxLength(System.String,System.Int32)">
            <summary>
            Sets that field must have an maximum lenght.
            </summary>
            <param name="target">The target name (ie, a hint about the controller being validated)</param>
            <param name="maxLength">The maximum length.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.ValidationStrategy.PrototypeWebValidator.PrototypeValidationGenerator.SetMaxLength(System.String,System.Int32,System.String)">
            <summary>
            Sets that field must have an maximum lenght.
            </summary>
            <param name="target">The target name (ie, a hint about the controller being validated)</param>
            <param name="maxLength">The maximum length.</param>
            <param name="violationMessage">The violation message.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.ValidationStrategy.PrototypeWebValidator.PrototypeValidationGenerator.SetLengthRange(System.String,System.Int32,System.Int32)">
            <summary>
            Sets that field must be between a length range.
            </summary>
            <param name="target">The target name (ie, a hint about the controller being validated)</param>
            <param name="minLength">The minimum length.</param>
            <param name="maxLength">The maximum length.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.ValidationStrategy.PrototypeWebValidator.PrototypeValidationGenerator.SetLengthRange(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Sets that field must be between a length range.
            </summary>
            <param name="target">The target name (ie, a hint about the controller being validated)</param>
            <param name="minLength">The minimum length.</param>
            <param name="maxLength">The maximum length.</param>
            <param name="violationMessage">The violation message.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.ValidationStrategy.PrototypeWebValidator.PrototypeValidationGenerator.SetValueRange(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Sets that field must be between a value range.
            </summary>
            <param name="target">The target name (ie, a hint about the controller being validated)</param>
            <param name="minValue">Minimum value.</param>
            <param name="maxValue">Maximum value.</param>
            <param name="violationMessage">The violation message.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.ValidationStrategy.PrototypeWebValidator.PrototypeValidationGenerator.SetValueRange(System.String,System.Decimal,System.Decimal,System.String)">
            <summary>
            Sets that field must be between a value range.
            </summary>
            <param name="target">The target name (ie, a hint about the controller being validated)</param>
            <param name="minValue">Minimum value.</param>
            <param name="maxValue">Maximum value.</param>
            <param name="violationMessage">The violation message.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.ValidationStrategy.PrototypeWebValidator.PrototypeValidationGenerator.SetValueRange(System.String,System.DateTime,System.DateTime,System.String)">
            <summary>
            Sets that field must be between a value range.
            </summary>
            <param name="target">The target name (ie, a hint about the controller being validated)</param>
            <param name="minValue">Minimum value.</param>
            <param name="maxValue">Maximum value.</param>
            <param name="violationMessage">The violation message.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.ValidationStrategy.PrototypeWebValidator.PrototypeValidationGenerator.SetValueRange(System.String,System.String,System.String,System.String)">
            <summary>
            Sets that field must be between a value range.
            </summary>
            <param name="target">The target name (ie, a hint about the controller being validated)</param>
            <param name="minValue">Minimum value.</param>
            <param name="maxValue">Maximum value.</param>
            <param name="violationMessage">The violation message.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.ValidationStrategy.PrototypeWebValidator.PrototypeValidationGenerator.SetAsSameAs(System.String,System.String,System.String)">
            <summary>
            Set that a field value must be the same as another field's value.
            </summary>
            <param name="target">The target name (ie, a hint about the controller being validated)</param>
            <param name="comparisonFieldName">The name of the field to compare with.</param>
            <param name="violationMessage">The violation message.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.ValidationStrategy.PrototypeWebValidator.PrototypeValidationGenerator.SetAsNotSameAs(System.String,System.String,System.String)">
            <summary>
            Set that a field value must _not_ be the same as another field's value.
            </summary>
            <param name="target">The target name (ie, a hint about the controller being validated)</param>
            <param name="comparisonFieldName">The name of the field to compare with.</param>
            <param name="violationMessage">The violation message.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.ValidationStrategy.PrototypeWebValidator.PrototypeValidationGenerator.SetDate(System.String,System.String)">
            <summary>
            Set that a field value must be a valid date.
            </summary>
            <param name="target">The target name (ie, a hint about the controller being validated)</param>
            <param name="violationMessage">The violation message.</param>
        </member>
        <member name="T:Castle.MonoRail.Framework.Helpers.ValidationStrategy.ZebdaWebValidator">
            <summary>
            Provides an interface for the Zebda client side JS validator
            http://labs.cavorite.com/zebda
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.ValidationStrategy.ZebdaWebValidator.CreateConfiguration(System.Collections.IDictionary)">
            <summary>
            Read the configuration
            </summary>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.ValidationStrategy.ZebdaWebValidator.CreateGenerator(Castle.Components.Validator.BrowserValidationConfiguration,Castle.Components.Validator.InputElementType,System.Collections.IDictionary)">
            <summary>
            Pendent
            </summary>
            <returns></returns>
        </member>
        <member name="T:Castle.MonoRail.Framework.Helpers.ValidationStrategy.ZebdaValidationConfiguration">
            <summary>
             Configuration for the Zebda validation
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.ValidationStrategy.ZebdaValidationConfiguration.CreateAfterFormOpened(System.String)">
            <summary>
            Render the validation init script
            </summary>
            <param name="formId"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.ValidationStrategy.ZebdaValidationConfiguration.Configure(System.Collections.IDictionary)">
            <summary>
            read the validator configuration values
            </summary>
            <param name="parameters"></param>
        </member>
        <member name="T:Castle.MonoRail.Framework.Helpers.ValidationStrategy.ZebdaWebValidationGenerator">
            <summary>
            The generator for the Zebda JS validator
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.ValidationStrategy.ZebdaWebValidationGenerator.#ctor(Castle.Components.Validator.InputElementType,System.Collections.IDictionary)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.Helpers.ValidationStrategy.ZebdaWebValidationGenerator"/> class.
            </summary>
            <param name="inputType">Type of the input.</param>
            <param name="attributes">The attributes.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.ValidationStrategy.ZebdaWebValidationGenerator.SetDigitsOnly(System.String,System.String)">
            <summary>
            Set that a field should only accept digits.
            </summary>
            <param name="target">The target name (ie, a hint about the controller being validated)</param>
            <param name="violationMessage">The violation message.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.ValidationStrategy.ZebdaWebValidationGenerator.SetNumberOnly(System.String,System.String)">
            <summary>
            Set that a field should only accept numbers.
            </summary>
            <param name="target">The target name (ie, a hint about the controller being validated)</param>
            <param name="violationMessage">The violation message.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.ValidationStrategy.ZebdaWebValidationGenerator.SetAsRequired(System.String,System.String)">
            <summary>
            Sets that a field is required.
            </summary>
            <param name="target">The target name (ie, a hint about the controller being validated)</param>
            <param name="violationMessage">The violation message.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.ValidationStrategy.ZebdaWebValidationGenerator.SetRegExp(System.String,System.String,System.String)">
            <summary>
            Sets that a field value must match the specified regular expression.
            </summary>
            <param name="target">The target name (ie, a hint about the controller being validated)</param>
            <param name="regExp">The reg exp.</param>
            <param name="violationMessage">The violation message.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.ValidationStrategy.ZebdaWebValidationGenerator.SetEmail(System.String,System.String)">
            <summary>
            Sets that a field value must be a valid email address.
            </summary>
            <param name="target">The target name (ie, a hint about the controller being validated)</param>
            <param name="violationMessage">The violation message.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.ValidationStrategy.ZebdaWebValidationGenerator.SetExactLength(System.String,System.Int32)">
            <summary>
            Sets that field must have an exact lenght.
            </summary>
            <param name="target">The target name (ie, a hint about the controller being validated)</param>
            <param name="length">The length.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.ValidationStrategy.ZebdaWebValidationGenerator.SetExactLength(System.String,System.Int32,System.String)">
            <summary>
            Sets that field must have an exact lenght.
            </summary>
            <param name="target">The target name (ie, a hint about the controller being validated)</param>
            <param name="length">The length.</param>
            <param name="violationMessage">The violation message.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.ValidationStrategy.ZebdaWebValidationGenerator.SetMinLength(System.String,System.Int32)">
            <summary>
            Sets that field must have an minimum lenght.
            </summary>
            <param name="target">The target name (ie, a hint about the controller being validated)</param>
            <param name="minLength">The minimum length.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.ValidationStrategy.ZebdaWebValidationGenerator.SetMinLength(System.String,System.Int32,System.String)">
            <summary>
            Sets that field must have an minimum lenght.
            </summary>
            <param name="target">The target name (ie, a hint about the controller being validated)</param>
            <param name="minLength">The minimum length.</param>
            <param name="violationMessage">The violation message.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.ValidationStrategy.ZebdaWebValidationGenerator.SetMaxLength(System.String,System.Int32)">
            <summary>
            Sets that field must have an maximum lenght.
            </summary>
            <param name="target">The target name (ie, a hint about the controller being validated)</param>
            <param name="maxLength">The maximum length.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.ValidationStrategy.ZebdaWebValidationGenerator.SetMaxLength(System.String,System.Int32,System.String)">
            <summary>
            Sets that field must have an maximum lenght.
            </summary>
            <param name="target">The target name (ie, a hint about the controller being validated)</param>
            <param name="maxLength">The maximum length.</param>
            <param name="violationMessage">The violation message.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.ValidationStrategy.ZebdaWebValidationGenerator.SetLengthRange(System.String,System.Int32,System.Int32)">
            <summary>
            Sets that field must be between a length range.
            </summary>
            <param name="target">The target name (ie, a hint about the controller being validated)</param>
            <param name="minLength">The minimum length.</param>
            <param name="maxLength">The maximum length.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.ValidationStrategy.ZebdaWebValidationGenerator.SetLengthRange(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Sets that field must be between a length range.
            </summary>
            <param name="target">The target name (ie, a hint about the controller being validated)</param>
            <param name="minLength">The minimum length.</param>
            <param name="maxLength">The maximum length.</param>
            <param name="violationMessage">The violation message.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.ValidationStrategy.ZebdaWebValidationGenerator.SetValueRange(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Sets that field must be between a value range.
            </summary>
            <param name="target">The target name (ie, a hint about the controller being validated)</param>
            <param name="minValue">Minimum value.</param>
            <param name="maxValue">Maximum value.</param>
            <param name="violationMessage">The violation message.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.ValidationStrategy.ZebdaWebValidationGenerator.SetValueRange(System.String,System.Decimal,System.Decimal,System.String)">
            <summary>
            Sets that field must be between a value range.
            </summary>
            <param name="target">The target name (ie, a hint about the controller being validated)</param>
            <param name="minValue">Minimum value.</param>
            <param name="maxValue">Maximum value.</param>
            <param name="violationMessage">The violation message.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.ValidationStrategy.ZebdaWebValidationGenerator.SetValueRange(System.String,System.DateTime,System.DateTime,System.String)">
            <summary>
            Sets that field must be between a value range.
            </summary>
            <param name="target">The target name (ie, a hint about the controller being validated)</param>
            <param name="minValue">Minimum value.</param>
            <param name="maxValue">Maximum value.</param>
            <param name="violationMessage">The violation message.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.ValidationStrategy.ZebdaWebValidationGenerator.SetValueRange(System.String,System.String,System.String,System.String)">
            <summary>
            Sets that field must be between a value range.
            </summary>
            <param name="target">The target name (ie, a hint about the controller being validated)</param>
            <param name="minValue">Minimum value.</param>
            <param name="maxValue">Maximum value.</param>
            <param name="violationMessage">The violation message.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.ValidationStrategy.ZebdaWebValidationGenerator.SetAsSameAs(System.String,System.String,System.String)">
            <summary>
            Set that a field value must be the same as another field's value.
            </summary>
            <param name="target">The target name (ie, a hint about the controller being validated)</param>
            <param name="comparisonFieldName">The name of the field to compare with.</param>
            <param name="violationMessage">The violation message.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.ValidationStrategy.ZebdaWebValidationGenerator.SetAsNotSameAs(System.String,System.String,System.String)">
            <summary>
            Set that a field value must _not_ be the same as another field's value.
            </summary>
            <param name="target">The target name (ie, a hint about the controller being validated)</param>
            <param name="comparisonFieldName">The name of the field to compare with.</param>
            <param name="violationMessage">The violation message.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.ValidationStrategy.ZebdaWebValidationGenerator.SetDate(System.String,System.String)">
            <summary>
            Set that a field value must be a valid date.
            </summary>
            <param name="target">The target name (ie, a hint about the controller being validated)</param>
            <param name="violationMessage">The violation message.</param>
        </member>
        <member name="T:Castle.MonoRail.Framework.Helpers.AbstractHelper">
            <summary>
            Optional base class for helpers. 
            Extend from this class only if your helpers needs
            a reference to the controller which is using it or
            if you need to use one of the protected utility methods.
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.IControllerAware">
            <summary>
            Implemented by the view or helpers, if they desire
            to have access to the controller instance.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.IControllerAware.SetController(Castle.MonoRail.Framework.Controller)">
            <summary>
            Sets the controller.
            </summary>
            <param name="controller">The controller.</param>
        </member>
        <member name="F:Castle.MonoRail.Framework.Helpers.AbstractHelper.controller">
            <summary>
            Store's <see cref="P:Castle.MonoRail.Framework.Helpers.AbstractHelper.Controller"/> for the current view.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.AbstractHelper.SetController(Castle.MonoRail.Framework.Controller)">
            <summary>
            Sets the controller.
            </summary>
            <param name="controller">Current view's <see cref="P:Castle.MonoRail.Framework.Helpers.AbstractHelper.Controller"/>.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.AbstractHelper.MergeOptions(System.Collections.IDictionary,System.Collections.IDictionary)">
            <summary>
            Merges <paramref name="userOptions"/> with <paramref name="defaultOptions"/> placing results in
            <paramref name="userOptions"/>.
            </summary>
            <param name="userOptions">The user options.</param>
            <param name="defaultOptions">The default options.</param>
            <remarks>
            All <see cref="P:System.Collections.IDictionary.Values"/> and <see cref="P:System.Collections.IDictionary.Keys"/> in <paramref name="defaultOptions"/>
            are copied to <paramref name="userOptions"/>. Entries with the same <see cref="P:System.Collections.DictionaryEntry.Key"/> in
            <paramref name="defaultOptions"/> and <paramref name="userOptions"/> are skipped.
            </remarks>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.AbstractHelper.RenderScriptBlockToSource(System.String)">
            <summary>
            Renders the a script block with a <c>src</c> attribute
            pointing to the url. The url must not have an extension. 
            <para>
            For example, suppose you invoke it like:
            <code>
            RenderScriptBlockToSource("/my/url/to/my/scripts");
            </code>
            </para>
            <para>
            That will render
            <code><![CDATA[
            <script type="text/javascript" src="/my/url/to/my/scripts.rails?VERSIONID"></script>
            ]]>
            </code>
            As you see the file extension will be inferred
            </para>
            </summary>
            <param name="url">The url for the scripts (should start with a '/')</param>
            <returns>An script block pointing to the given url.</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.AbstractHelper.RenderScriptBlockToSource(System.String,System.String)">
            <summary>
            Renders the a script block with a <c>src</c> attribute
            pointing to the url sending the querystring as parameter. The url must not have an extension. 
            <para>
            For example, suppose you invoke it like:
            <code>
            RenderScriptBlockToSource("/my/url/to/my/scripts", "locale=pt-br");
            </code>
            </para>
            <para>
            That will render
            <code><![CDATA[
            <script type="text/javascript" src="/my/url/to/my/scripts.rails?VERSIONID&locale=pt-br"></script>
            ]]>
            </code>
            As you see the file extension will be inferred
            </para>
            </summary>
            <param name="url">The url for the scripts (should start with a '/')</param>
            <param name="queryString">The query string.</param>
            <returns>An script block pointing to the given url.</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.AbstractHelper.GetAttributes(System.Collections.IDictionary)">
            <summary>
            Generates HTML element attributes string from <paramref name="attributes"/>.
            <code>key1="value1" key2</code>
            </summary>
            <param name="attributes">The attributes for the element.</param>
            <returns><see cref="T:System.String"/> to use inside HTML element's tag.</returns>
            <remarks>
            <see cref="F:System.String.Empty"/> is returned if <paramref name="attributes"/> is <c>null</c> or empty.
            <para>
            If for some <see cref="P:System.Collections.DictionaryEntry.Key"/> <see cref="P:System.Collections.DictionaryEntry.Value"/> is <c>null</c> or
            <see cref="F:System.String.Empty"/> only attribute name is appended to the string.
            </para>
            </remarks>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.AbstractHelper.BuildQueryString(System.Collections.IDictionary)">
            <summary>
            Builds a query string encoded.
            </summary>
            <remarks>
            Supports multi-value query strings, using any
            <see cref="T:System.Collections.IEnumerable"/> as a value.
            <example>
            <code>
            IDictionary dict = new Hashtable();
            dict.Add("id", 5);
            dict.Add("selectedItem", new int[] { 2, 4, 99 });
            string querystring = BuildQueryString(dict);
            // should result in: "id=5&amp;selectedItem=2&amp;selectedItem=4&amp;selectedItem=99&amp;"
            </code>
            </example>
            </remarks>
            <param name="parameters">The parameters</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.AbstractHelper.ConcatQueryString(System.String,System.String)">
            <summary>
            Concat two string in a query string format (<c>key=value&amp;key2=value2</c>) 
            building a third string with the result
            </summary>
            <param name="leftParams">key values</param>
            <param name="rightParams">key values</param>
            <returns>The concatenation result</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.AbstractHelper.HtmlEncode(System.String)">
            <summary>
            HTML encodes a string and returns the encoded string.  
            </summary>
            <param name="content">The text string to HTML encode.</param>
            <returns>The HTML encoded text.</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.AbstractHelper.LineBreaksToHtml(System.String)">
            <summary>
            Escapes a content replacing line breaks with html break lines.
            </summary>
            <param name="content">The text to escape.</param>
            <returns>The URL encoded and JavaScript escaped text.</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.AbstractHelper.UrlEncode(System.String)">
            <summary>
            URL encodes a string and returns the encoded string.  
            </summary>
            <param name="content">The text to URL encode.</param>
            <returns>The URL encoded text.</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.AbstractHelper.UrlPathEncode(System.String)">
            <summary>
            URL encodes the path portion of a URL string and returns the encoded string.  
            </summary>
            <param name="content">The text to URL encode.</param>
            <returns>The URL encoded text.</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.AbstractHelper.JavaScriptEscape(System.String)">
            <summary>
            Escapes JavaScript with Url encoding and returns the encoded string.  
            </summary>
            <remarks>
            Converts quotes, single quotes and CR/LFs to their representation as an escape character.
            </remarks>
            <param name="content">The text to URL encode and escape JavaScript within.</param>
            <returns>The URL encoded and JavaScript escaped text.</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.AbstractHelper.JavascriptOptions(System.Collections.IDictionary)">
            <summary>
            Builds a JS associative array based on the specified dictionary instance.
            <para>
            For example: <c>{name: value, other: 'another'}</c>
            </para>
            </summary>
            <param name="jsOptions">The js options.</param>
            <returns>An associative array in javascript</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.AbstractHelper.ScriptBlock(System.String)">
            <summary>
            Generates script block.
            <code>
            &lt;script type=\"text/javascript\"&gt;
            scriptContents
            &lt;/script&gt;
            </code>
            </summary>
            <param name="scriptContents">The script contents.</param>
            <returns><paramref name="scriptContents"/> placed inside <b>script</b> tags.</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.AbstractHelper.Quote(System.Object)">
            <summary>
            Quotes the specified string with double quotes
            </summary>
            <param name="content">The content.</param>
            <returns>A quoted string</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.AbstractHelper.Quote(System.Object[])">
            <summary>
            Quotes the specified string with singdoublele quotes
            </summary>
            <param name="items">Items to quote</param>
            <returns>A quoted string</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.AbstractHelper.SQuote(System.Object)">
            <summary>
            Quotes the specified string with double quotes
            </summary>
            <param name="content">The content.</param>
            <returns>A quoted string</returns>
        </member>
        <member name="P:Castle.MonoRail.Framework.Helpers.AbstractHelper.Controller">
            <summary>
            Gets the controller.
            </summary>
            <value>The <see cref="P:Castle.MonoRail.Framework.Helpers.AbstractHelper.Controller"/> used with the current view.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Helpers.AbstractHelper.ServerUtility">
            <summary>
            Gets or sets the server utility.
            </summary>
            <value>The server utility.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Helpers.AbstractHelper.UrlHelper">
            <summary>
            Gets the URL helper instance.
            </summary>
            <value>The URL helper.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Helpers.AbstractHelper.CurrentContext">
            <summary>
            Gets the current context.
            </summary>
            <value>The current context.</value>
        </member>
        <member name="T:Castle.MonoRail.Framework.Helpers.CallbackEnum">
            <summary>
            XmlHttpRequest supported events.
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Helpers.CallbackEnum.Uninitialized">
            <summary>
            Not initialized
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Helpers.CallbackEnum.Loading">
            <summary>
            Called when the remote document is being 
            loaded with data by the browser.
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Helpers.CallbackEnum.Loaded">
            <summary>
            Called when the browser has finished loading
            the remote document.
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Helpers.CallbackEnum.Interactive">
            <summary>
            Called when the user can interact with the 
            remote document, even though it has not 
            finished loading.
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Helpers.CallbackEnum.Complete">
            <summary>
            Called when the XMLHttpRequest has completed.
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Helpers.CallbackEnum.OnSuccess">
            <summary>
            Called when the request was successfully (Status code &lt; 500)
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Helpers.CallbackEnum.OnFailure">
            <summary>
            Called when the request was not successfully (Status code &gt;= 500)
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.Helpers.AjaxHelper">
            <summary>
            MonoRail Helper that delivers AJAX capabilities.
            </summary>
            <remarks>
            The following libraries are exposed:
            <list type="table">
            <item><term> Prototype </term>
            <description> Simplify ajax programming, among other goodies 
            </description></item>
            <item><term> Behaviour </term>
            <description> Uses css selectors to bind javascript code to DOM elements 
            </description></item>
            </list>
            </remarks>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.AjaxHelper.Service(System.IServiceProvider)">
            <summary>
            Invoked by the framework in order to give a chance to
            obtain other services
            </summary>
            <param name="provider">The service proviver</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.AjaxHelper.InstallScripts">
            <summary>
            Renders a Javascript library inside a single script tag.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.AjaxHelper.GetJavascriptFunctions">
            <summary>
            Renders a Javascript library inside a single script tag.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.AjaxHelper.GenerateJSProxy(System.String)">
            <summary>
            Generates an AJAX JavaScript proxy for the current controller.
            </summary>
            <param name="proxyName">Name of the javascript proxy object</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.AjaxHelper.GenerateJSProxy(System.String,System.String)">
            <summary>
            Generates an AJAX JavaScript proxy for a given controller.
            </summary>
            <param name="proxyName">Name of the javascript proxy object</param>
            <param name="controller">Controller which will be target of the proxy</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.AjaxHelper.GenerateJSProxy(System.String,System.String,System.String)">
            <summary>
            Generates an AJAX JavaScript proxy for a given controller.
            </summary>
            <param name="proxyName">Name of the javascript proxy object</param>
            <param name="controller">Controller which will be target of the proxy</param>
            <param name="area">area which the controller belongs to</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.AjaxHelper.LinkToFunction(System.String,System.String,System.Collections.IDictionary)">
            <summary>
            Returns a link that will trigger a javascript function using the 
            onclick handler and return false after the fact.
            <code>
            &lt;a href="javascript:void(0);" onclick="functionCodeOrName; return false"&gt;innerContent&lt;/a&gt;
            </code>
            </summary>
            <param name="innerContent">Link content</param>
            <param name="functionCodeOrName">Function definition</param>
            <param name="attributes">Attributes to be applied to the html element</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.AjaxHelper.LinkToFunction(System.String,System.String,System.String,System.Collections.IDictionary)">
            <summary>
            Returns a link that will trigger a javascript function using the 
            onclick handler and return false after the fact.
            <code>
            &lt;a href="javascript:void(0);" onclick="confirm('question') { functionCodeOrName}; return false"&gt;innerContent&lt;/a&gt;
            </code>
            </summary>
            <param name="innerContent">Link content</param>
            <param name="functionCodeOrName">Function definition</param>
            <param name="confirm">Confirm question</param>
            <param name="attributes">Attributes to be applied to the html element</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.AjaxHelper.LinkToFunction(System.String,System.String)">
            <summary>
            Returns a link that will trigger a javascript function using the 
            onclick handler and return false after the fact.
            </summary>
            <param name="innerContent">Link content</param>
            <param name="functionCodeOrName">Function definition</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.AjaxHelper.LinkToFunction(System.String,System.String,System.String)">
            <summary>
            Returns a link that will trigger a javascript function using the 
            onclick handler and return false after the fact.
            </summary>
            <param name="innerContent">Link content</param>
            <param name="functionCodeOrName">Function definition</param>
            <param name="confirm">Confirm question</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.AjaxHelper.ButtonToFunction(System.String,System.String,System.Collections.IDictionary)">
            <summary>
            Returns a button that will trigger a javascript function using the 
            onclick handler and return false after the fact.
            </summary>
            <param name="innerContent">Button legend</param>
            <param name="functionCodeOrName">Function definition or name</param>
            <param name="attributes">Attributes to be applied to the input html element</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.AjaxHelper.ButtonToFunction(System.String,System.String)">
            <summary>
            Returns a button that will trigger a javascript function using the 
            onclick handler and return false after the fact.
            </summary>
            <param name="innerContent">Button legend</param>
            <param name="functionCodeOrName">Function definition or name</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.AjaxHelper.ButtonToRemote(System.String,System.String,System.Collections.IDictionary)">
            <summary>
            Creates a button that if clicked will fire an Ajax invocation. 
            </summary>
            <param name="innerContent">Button legend</param>
            <param name="url">The URL of the Ajax action</param>
            <param name="options">the options for the Ajax invocation</param>
            <returns>The handcrafted input</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.AjaxHelper.ButtonToRemote(System.String,System.String,System.Collections.IDictionary,System.Collections.IDictionary)">
            <summary>
            Creates a button that if clicked will fire an Ajax invocation. 
            </summary>
            <param name="innerContent">Button legend</param>
            <param name="url">the target url</param>
            <param name="options">the options for the Ajax invocation</param>
            <param name="htmloptions">Attributes to be applied to the html element</param>
            <returns>The handcrafted input</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.AjaxHelper.LinkToRemote(System.String,System.String,System.Collections.IDictionary)">
            <summary>
            Returns a link to a remote action defined by <c>options["url"]</c> 
            that is called in the background using 
            XMLHttpRequest. The result of that request can then be inserted into a
            DOM object whose id can be specified with <c>options["update"]</c>. 
            Usually, the result would be a partial prepared by the controller
            </summary>
            <param name="innerContent">Link content</param>
            <param name="url">Target url</param>
            <param name="options">the options for the Ajax invocation</param>
            <returns>The handcrafted element</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.AjaxHelper.LinkToRemote(System.String,System.String,System.String,System.Collections.IDictionary)">
            <summary>
            Returns a link to a remote action defined by <c>options["url"]</c> 
            that is called in the background using 
            XMLHttpRequest. The result of that request can then be inserted into a
            DOM object whose id can be specified with <c>options["update"]</c>. 
            Usually, the result would be a partial prepared by the controller
            </summary>
            <param name="innerContent">Link content</param>
            <param name="confirm">the confirm question</param>
            <param name="url">Target url</param>
            <param name="options">the options for the Ajax invocation</param>
            <returns>The handcrafted element</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.AjaxHelper.LinkToRemote(System.String,System.String,System.Collections.IDictionary,System.Collections.IDictionary)">
            <summary>
            Returns a link to a remote action defined by <c>options["url"]</c> 
            that is called in the background using 
            XMLHttpRequest. The result of that request can then be inserted into a
            DOM object whose id can be specified with <c>options["update"]</c>. 
            Usually, the result would be a partial prepared by the controller
            </summary>
            <param name="innerContent">Link content</param>
            <param name="url">Target url</param>
            <param name="options">the options for the Ajax invocation</param>
            <param name="htmloptions">Attributes to be applied to the html element</param>
            <returns>The handcrafted element</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.AjaxHelper.BuildFormRemoteTag(System.String,System.Collections.IDictionary)">
            <summary>
            Returns a form tag that will submit using XMLHttpRequest 
            in the background instead of the regular 
            reloading POST arrangement. Even though it is
            using Javascript to serialize the form elements, the form submission 
            will work just like a regular submission as viewed by the 
            receiving side (all elements available).
            </summary>
            <param name="url">Target url</param>
            <param name="options">the options for the Ajax invocation</param>
            <returns>The handcrafted element</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.AjaxHelper.BuildFormRemoteTag(System.Collections.IDictionary)">
            <summary>
            Returns a form tag that will submit using XMLHttpRequest 
            in the background instead of the regular 
            reloading POST arrangement. Even though it is
            using Javascript to serialize the form elements, the form submission 
            will work just like a regular submission as viewed by the 
            receiving side (all elements available).
            </summary>
            <param name="options">the options for the Ajax invocation</param>
            <returns>The handcrafted element</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.AjaxHelper.ObserveField(System.String,System.Int32,System.String,System.String,System.String)">
            <summary>
            Observes the field with the DOM ID specified by <c>fieldId</c> and makes
            an Ajax when its contents have changed.
            </summary>
            <param name="fieldId">Form field to be observed</param>
            <param name="frequency">The frequency (in seconds) at which changes to
                                  this field will be detected. (required)</param>
            <param name="url">url for the action to call
                                  when the field has changed (required)</param>
            <param name="idOfElementToBeUpdated"> Specifies the DOM ID of the element whose 
                                  innerHTML should be updated with the
                                  XMLHttpRequest response text.</param>
            <param name="with">A Javascript expression specifying the
                                  parameters for the XMLHttpRequest. This defaults
                                  to 'value', which in the evaluated context 
                                  refers to the new field value.</param>
            <returns>javascript that activates the observer</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.AjaxHelper.ObserveField(System.String,System.Int32,System.String,System.Collections.IDictionary)">
            <summary>
            Observes the field with the DOM ID specified by <c>fieldId</c> and makes
            an Ajax when its contents have changed.
            </summary>
            <param name="fieldId">Form field to be observed</param>
            <param name="frequency">The frequency (in seconds) at which changes to
                                  this field will be detected. (required)</param>
            <param name="url">url for the action to call
                                  when the field has changed (required)</param>
            <param name="options">the options for the Ajax invocation</param>
            <returns>javascript that activates the observer</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.AjaxHelper.ObserveField(System.Collections.IDictionary)">
            <summary>
            Observes the field with the DOM ID specified by <c>field</c> and makes
            an Ajax call when its contents changes.
            <para>
            The following entries must exist in the dictionary:
            </para>
            <list type="bullet">
            <item>
            <term>field</term>
            <description>The DOM field to be observed</description>
            </item>
            <item>
            <term>url</term>
            <description>url to to call when the field has changed</description>
            </item>
            <item>
            <term>frequency</term>
            <description>The frequency (in seconds) at which changes to this field will be detected</description>
            </item>
            </list>
            <para>
            The following are optional entries:
            </para>
            <list type="bullet">
            <item>
            <term>update</term>
            <description>Specifies the DOM ID of the element whose  
            innerHTML should be updated with the 
            XMLHttpRequest response text</description>
            </item>
            <item>
            <term>with</term>
            <description>A Javascript expression specifying the parameters 
            for the XMLHttpRequest. This defaults to 'value', which in the 
            evaluated context  refers to the new field value</description>
            </item>
            </list>
            </summary>
            <param name="options">the options for the Ajax invocation</param>
            <returns>javascript that activates the observer</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.AjaxHelper.ObserveForm(System.String,System.Int32,System.String,System.String,System.Object)">
            <summary>
            Like <see cref="M:Castle.MonoRail.Framework.Helpers.AjaxHelper.ObserveField(System.Collections.IDictionary)"/>, but operates on an entire form identified by the
            DOM ID <c>formId</c>. options are the same as <see cref="M:Castle.MonoRail.Framework.Helpers.AjaxHelper.ObserveField(System.Collections.IDictionary)"/>, except 
            the default value of the <tt>:with</tt> option evaluates to the
            serialized (request String) value of the form.
            Works like the <see cref="M:Castle.MonoRail.Framework.Helpers.AjaxHelper.ObserveField(System.Collections.IDictionary)"/>, but operates on an entire form identified by the
            DOM ID <c>formId</c>. Options are the same as <see cref="M:Castle.MonoRail.Framework.Helpers.AjaxHelper.ObserveField(System.Collections.IDictionary)"/>, except 
            the default value of the <c>with</c> option evaluates to the
            serialized (request String) value of the entire form.
            </summary>
            <param name="formId">Form to be observed</param>
            <param name="frequency">The frequency (in seconds) at which changes to
                                  this field will be detected. (required)</param>
            <param name="url">url for the action to call
                                  when the field has changed (required)</param>
            <param name="idOfElementToBeUpdated"> Specifies the DOM ID of the element whose 
                                  innerHTML should be updated with the
                                  XMLHttpRequest response text.</param>
            <param name="with">A Javascript expression specifying the
                                  parameters for the XMLHttpRequest. This defaults
                                  to 'value', which in the evaluated context 
                                  refers to the new field value.</param>
            <returns>javascript that activates the observer</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.AjaxHelper.ObserveForm(System.String,System.Collections.IDictionary)">
            <summary>
            Like <see cref="M:Castle.MonoRail.Framework.Helpers.AjaxHelper.ObserveField(System.Collections.IDictionary)"/>, but operates on an entire form identified by the
            DOM ID <c>formId</c>. options are the same as <see cref="M:Castle.MonoRail.Framework.Helpers.AjaxHelper.ObserveField(System.Collections.IDictionary)"/>, except 
            the default value of the <c>with</c> option evaluates to the
            serialized (request String) value of the entire form.
            </summary>
            <param name="formId">Form to be observed</param>
            <param name="options">the options for the Ajax invocation</param>
            <returns>javascript that activates the observer</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.AjaxHelper.ObserveForm(System.Collections.IDictionary)">
            <summary>
            Observes all elements within a form with the DOM 
            ID specified by <c>form</c> and makes
            an Ajax call when its contents changes.
            <para>
            The following entries must exist in the dictionary:
            </para>
            <list type="bullet">
            <item>
            <term>form</term>
            <description>The form element id</description>
            </item>
            <item>
            <term>url</term>
            <description>url to to call when the field has changed</description>
            </item>
            <item>
            <term>frequency</term>
            <description>The frequency (in seconds) at which changes to this field will be detected</description>
            </item>
            </list>
            <para>
            The following are optional entries:
            </para>
            <list type="bullet">
            <item>
            <term>update</term>
            <description>Specifies the DOM ID of the element whose  
            innerHTML should be updated with the 
            XMLHttpRequest response text</description>
            </item>
            <item>
            <term>with</term>
            <description>A Javascript expression specifying the parameters 
            for the XMLHttpRequest. This defaults to 'value', which in the 
            evaluated context  refers to the new field value</description>
            </item>
            </list>
            </summary>
            <param name="options">the options for the Ajax invocation</param>
            <returns>javascript that activates the observer</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.AjaxHelper.PeriodicallyCallRemote(System.Collections.IDictionary)">
            <summary>
            Periodically invokes the specified <c>url</c>. You can use the options to 
            override the default <c>frequency</c> (defaults to 10 seconds).
            </summary>
            <param name="options">the options for the Ajax invocation</param>
            <returns>javascript that activates the timer</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.AjaxHelper.PeriodicallyCallRemote(System.String,System.Collections.IDictionary)">
            <summary>
            Periodically invokes the specified <c>url</c>. You can use the options to 
            override the default <c>frequency</c> (defaults to 10 seconds).
            </summary>
            <param name="options">the options for the Ajax invocation</param>
            <param name="url">url to be invoked periodically</param>
            <returns>javascript that activates the timer</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.AjaxHelper.InputTextWithAutoCompletion(System.Collections.IDictionary,System.Collections.IDictionary)">
            <summary>
            Rendes a input field with Google style autocomplete enabled.
            The specified <c>url</c> is used to gather the contents 
            for the auto complete panel, so 
            and your action should return filtered and sorted results.
            <para>
            The following entries must exist in the options:
            </para>
            <list type="bullet">
            <item>
            <term>input</term>
            <description>The text input element id</description>
            </item>
            <item>
            <term>url</term>
            <description>url to to call when the field has changed</description>
            </item>
            </list>
            </summary>
            <remarks>
            it is assumed that the url invoked returns an unordered list.
            </remarks>
            <param name="options">the options for the Ajax invocation</param>
            <param name="tagAttributes">attributes for the input html element</param>
            <returns>javascript that activates the timer</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.AjaxHelper.InputTextWithAutoCompletion(System.String,System.String,System.Collections.IDictionary,System.Collections.IDictionary)">
            <summary>
            Rendes a input field with Google style autocomplete enabled.
            The specified url is used to gather the contents for the auto complete panel, so 
            and your action should return filtered and sorted results.
            <seealso cref="M:Castle.MonoRail.Framework.Helpers.AjaxHelper.AutoCompleteInputText(System.String,System.String,System.Collections.IDictionary)"/>
            </summary>
            <remarks>
            it is assumed that the url invoked returns an unordered list.
            </remarks>
            <param name="inputName">input element id</param>
            <param name="url">url used to gather results</param>
            <param name="tagAttributes">attributes for the input element</param>
            <param name="completionOptions">options for the autocomplete</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.AjaxHelper.AutoCompleteInputText(System.String,System.String,System.Collections.IDictionary)">
            <summary>
            Generates an javascript block enabling 
            auto completion for the specified input text id (<c>elementId</c>). 
            You can specify the element to be updated using the options
            dictionary (key  <c>update</c>), if you don't we assume 
            <c>elementId+autocomplete</c>.
            </summary>
            <remarks>
            it is assumed that the url invoked returns an unordered list.
            </remarks>
            <param name="elementId">The element id (input type=text)</param>
            <param name="url">The url to be invoked returning results</param>
            <param name="options">the options for the Ajax invocation</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.AjaxHelper.BuildRemoteFunction(System.String,System.Collections.IDictionary)">
            <summary>
            Returns a function that makes a remote invocation,
            using the supplied parameters
            </summary>
            <param name="url">Target url</param>
            <param name="options">the options for the Ajax invocation</param>
            <returns>javascript code</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.AjaxHelper.RemoteFunction(System.Collections.IDictionary)">
            <summary>
            Returns a function that makes a remote invocation,
            using the supplied parameters
            </summary>
            <param name="options">the options for the Ajax invocation</param>
            <returns>javascript code</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.AjaxHelper.BuildAjaxOptions(System.Collections.IDictionary,System.Collections.IDictionary)">
            <summary>
            Populates the <paramref name="jsOptions"/> by analyzing the
            options set on the helper <paramref name="options"/>
            </summary>
            
            <remarks>
            The following options are analyzed
            
            <list type="bullet">
            <item>
            	<term>type</term>
            	<description>boolean - sets the <c>asynchronous</c> </description>
            </item>
            <item>
            	<term>method</term>
            	<description>string - sets the <c>method</c>. Possible values are post/get </description>
            </item>
            <item>
            	<term>evalScripts</term>
            	<description>boolean</description>
            </item>
            <item>
            	<term>position</term>
            	<description>string - sets the place where content is inserted (Top, Bottom, After, Before)</description>
            </item>
            <item>
            	<term>form</term>
            	<description>if present, set the parameters request to send the current form serialized</description>
            </item>
            <item>
            	<term>with</term>
            	<description>if present, set its content as the parameters for the ajax request</description>
            </item>
            </list>
            
            </remarks>
            
            <param name="jsOptions">Options that will be used on the js side</param>
            <param name="options">Options passed to the helper method</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.AjaxHelper.BuildCallbackFunction(Castle.MonoRail.Framework.Helpers.CallbackEnum,System.String,System.String@)">
            <summary>
            Builds the callback function.
            </summary>
            <param name="callback">The callback.</param>
            <param name="code">The code.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.AjaxHelper.BuildObserver(System.String,System.String,System.Collections.IDictionary)">
            <summary>
            Builds the observer.
            </summary>
            <param name="clazz">The clazz.</param>
            <param name="name">The name.</param>
            <param name="options">The options.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.AjaxHelper.GetOptions(System.String,System.Collections.IDictionary)">
            <summary>
            Gets the options.
            </summary>
            <param name="url">The URL.</param>
            <param name="options">The options.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.AjaxHelper.GetOptions(System.String,System.String,System.Object,System.String,System.String,System.String,System.String)">
            <summary>
            Gets the options.
            </summary>
            <param name="url">The URL.</param>
            <param name="idOfElementToBeUpdated">The id of element to be updated.</param>
            <param name="with">The with.</param>
            <param name="loading">The loading.</param>
            <param name="loaded">The loaded.</param>
            <param name="complete">The complete.</param>
            <param name="interactive">The interactive.</param>
            <returns></returns>
        </member>
        <member name="T:Castle.MonoRail.Framework.Helpers.BehaviourHelper">
            <summary>
            Exposes the functionality available on the Behaviour js library
            which Uses css selectors to bind javascript code to DOM elements 
            </summary>
            <remarks>
            Before using it, you must install the scripts. See <see cref="M:Castle.MonoRail.Framework.Helpers.BehaviourHelper.InstallScripts"/>
            </remarks>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.BehaviourHelper.InstallScripts">
            <summary>
            Renders a script tag refering the Behaviour library code.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.BehaviourHelper.ReApply">
            <summary>
            Renders a script block invoking <c>Behaviour.apply()</c>
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.BehaviourHelper.AddLoadEvent(System.String)">
            <summary>
            Renders a script block invoking <c>Behaviour.addLoadEvent(loadFunctionName);</c>
            </summary>
            <param name="loadFunctionName">The name of the js function to be invoked when the body is loaded</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.BehaviourHelper.StartBehaviourRegister">
            <summary>
            Renders a script block starting the association of events to selector rules
            <seealso cref="M:Castle.MonoRail.Framework.Helpers.BehaviourHelper.Register(System.String,System.String,System.String)"/>
            <seealso cref="M:Castle.MonoRail.Framework.Helpers.BehaviourHelper.EndBehaviourRegister"/>
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.BehaviourHelper.Register(System.String,System.String,System.String)">
            <summary>
            Adds a entry to a registration array. Invoking it 
            with <c>#form</c>, <c>onsubmit</c> and <c>validate</c> will produce
            <c>'#form' : function(e){ e.onsubmit = validate; },</c>
            <seealso cref="M:Castle.MonoRail.Framework.Helpers.BehaviourHelper.StartBehaviourRegister"/>
            <seealso cref="M:Castle.MonoRail.Framework.Helpers.BehaviourHelper.EndBehaviourRegister"/>
            </summary>
            <param name="selector">The css selector rule</param>
            <param name="eventName">The name of the event on the element</param>
            <param name="jsFunctionName">The function to be invoked in response to the event</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.BehaviourHelper.EndBehaviourRegister">
            <summary>
            Renders the end of a script block that associated events to selector rules
            <seealso cref="M:Castle.MonoRail.Framework.Helpers.BehaviourHelper.StartBehaviourRegister"/>
            <seealso cref="M:Castle.MonoRail.Framework.Helpers.BehaviourHelper.Register(System.String,System.String,System.String)"/>
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.Helpers.DateFormatHelper">
            <summary>
            Simple helper for date formatting
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.DateFormatHelper.AlternativeFriendlyFormatFromNow(System.DateTime)">
            <summary>
            Alternative representation of a difference
            between the specified date and now. If within 24hr
            it returns <c>Today</c>. If within 48hr it returns
            <c>Yesterday</c>. If within 40 days it returns
            <c>x days ago</c> and otherwise it returns
            <c>x months ago</c>
            <para>
            TODO: Think about i18n
            </para>
            </summary>
            <param name="date">The date in the past (should be equal or less than now)</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.DateFormatHelper.FriendlyFormatFromNow(System.DateTime)">
            <summary>
            Returns the difference from the 
            specified <c>date</c> the the current date
            in a friendly string like "1 day ago"
            <para>
            TODO: Think about i18n
            </para>
            </summary>
            <param name="date">The date in the past (should be equal or less than now)</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.DateFormatHelper.ToShortDate(System.Nullable{System.DateTime})">
            <summary>
            Formats to short date
            </summary>
            <param name="date"></param>
            <returns>Short date, or <c>String.Empty</c> if <paramref name="date"/> is <c>null</c>.</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.DateFormatHelper.ToShortDateTime(System.Nullable{System.DateTime})">
            <summary>
            Formats to short date
            </summary>
            <param name="date"></param>
            <returns>Short date and time, or <c>String.Empty</c> if <paramref name="date"/> is <c>null</c>.</returns>
        </member>
        <member name="T:Castle.MonoRail.Framework.Helpers.DictHelper">
            <summary>
            Helper used to create <see cref="T:System.Collections.IDictionary"/> instances
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.DictHelper.CreateDict(System.String[])">
            <summary>
            Creates an <see cref="T:System.Collections.IDictionary"/> with entries
            infered from the arguments. 
            <code>
            CreateDict( "style=display: none;", "selected" )
            </code>
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.DictHelper.Create(System.String[])">
            <summary>
            Creates a dictionary from specified arguments.
            </summary>
            <param name="args">The arguments.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.DictHelper.FromNameValueCollection(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Creates a dictionary fros a name value collection.
            </summary>
            <param name="collection">The collection.</param>
            <returns></returns>
        </member>
        <member name="T:Castle.MonoRail.Framework.Helpers.Effects2Helper">
            <summary>
            Exposes the effect script from Thomas Fuchs 
            (http://script.aculo.us, http://mir.aculo.us)
            </summary>
            <remarks>
            Before using it, you must install the scripts. See <see cref="M:Castle.MonoRail.Framework.Helpers.ScriptaculousHelper.InstallScripts"/>
            </remarks>
        </member>
        <member name="T:Castle.MonoRail.Framework.Helpers.ScriptaculousHelper">
            <summary>
            Exposes the effect script from Thomas Fuchs 
            (http://script.aculo.us, http://mir.aculo.us)
            </summary>
            <remarks>
            Before using it, you must install the scripts. 
            See <see cref="M:Castle.MonoRail.Framework.Helpers.ScriptaculousHelper.InstallScripts"/>
            </remarks>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.ScriptaculousHelper.InstallScripts">
            <summary>
            Renders a Javascript library inside a single script tag.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.ScriptaculousHelper.GetJavascriptFunctions">
            <summary>
            Gets the javascript functions.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.ScriptaculousHelper.VisualEffect(System.String,System.String)">
            <summary>
            Generates a JS snippet invoking the specified effect. 
            <para>Examples:
            <code>
            VisualEffect('ToggleSlide', 'elementid')
            VisualEffect('ToggleBlind', 'elementid')
            VisualEffect('ToggleAppear', 'elementid')
            VisualEffect('Highlight', 'elementid')
            VisualEffect('Fade', 'elementid')
            VisualEffect('Shake', 'elementid')
            VisualEffect('DropOut', 'elementid')
            </code>
            </para>
            </summary>
            <param name="name">The effect name.</param>
            <param name="elementId">The element id to act upon.</param>
            <returns>A JS snippet</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.ScriptaculousHelper.VisualEffect(System.String,System.String,System.Collections.IDictionary)">
            <summary>
            Generates a JS snippet invoking the specified effect. 
            <para>Examples:
            <code>
            VisualEffect('ToggleSlide', 'elementid')
            VisualEffect('ToggleBlind', 'elementid')
            VisualEffect('ToggleAppear', 'elementid')
            VisualEffect('Highlight', 'elementid')
            VisualEffect('Fade', 'elementid')
            VisualEffect('Shake', 'elementid')
            VisualEffect('DropOut', 'elementid')
            </code>
            </para>
            <para>
            Common options includes <c>duration</c>, 
            <c>transition</c>, <c>fps</c>, <c>sync</c>, 
            <c>from</c>, <c>to</c>, <c>delay</c>, <c>queue</c>, 
            <c>startcolor</c>, <c>endcolor</c>.
            </para>
            <para>
            Callbacks:
            <c>beforeStart</c>, <c>beforeUpdate</c>, <c>afterUpdate</c>, <c>afterFinish</c>
            </para>
            </summary>
            <remarks>
            If you want to use the DropOut effect, please refer to <see cref="M:Castle.MonoRail.Framework.Helpers.ScriptaculousHelper.VisualEffectDropOut(System.String,System.Collections.IDictionary)"/>
            </remarks>
            <param name="name">The effect name.</param>
            <param name="elementId">The element id to act upon.</param>
            <param name="options">A dictionary used to specify options to the effect behavior</param>
            <returns>A JS snippet</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.ScriptaculousHelper.VisualEffectDropOut(System.String,System.Collections.IDictionary)">
            <summary>
            Generates a JS snippet invoking the DropOut effect
            <para>Examples:
            <code>
            VisualEffectDropOut('elementid', {position:'end', scope='test', limit=2})
            </code>
            </para>
            </summary>
            <param name="elementId">The element id to act upon.</param>
            <param name="queue">A dictionary used to specify options to the DropOut behavior</param>
            <returns>A JS snippet</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.Effects2Helper.Appear(System.String)">
            <summary>
            Make an element appear. If the element was previously set to display:none;  
            inside the style attribute of the element, the effect will automatically 
            show the element.
            </summary>
            <remarks>
            Microsoft Internet Explorer can only set opacity on elements that have a 
            'layout'. To let an element have a layout, you must set some CSS 
            positional properties, like 'width' or 'height'.
            </remarks>
            <param name="elementId"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.Effects2Helper.Fade(System.String)">
            <summary>
            Makes an element fade away and takes it out of the document flow 
            at the end of the effect by setting the CSS display property to false.
            </summary>
            <remarks>
            Works safely with most HTML block elements (like DIV and LI).
            Microsoft Internet Explorer can only set opacity on elements that 
            have a 'layout'. To let an element have a layout, you must set some 
            CSS positional properties, like 'width' or 'height'.
            </remarks>
            <param name="elementId"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.Effects2Helper.Puff(System.String)">
            <summary>
            Gives the illusion of the element puffing away (like a in a cloud of smoke).
            </summary>
            <remarks>
            Works safely with most HTML block elements (like DIV and LI).
            </remarks>
            <param name="elementId"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.Effects2Helper.DropOut(System.String)">
            <summary>
             Makes the element drop and fade out at the same time.
            </summary>
            <remarks>
            Works safely with most HTML block elements (like DIV and LI).
            </remarks>
            <param name="elementId"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.Effects2Helper.Shake(System.String)">
            <summary>
            Moves the element slightly to the left, then to the right, repeatedly.
            </summary>
            <remarks>
            Works safely with most HTML block elements (like DIV and LI).
            </remarks>
            <param name="elementId"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.Effects2Helper.SwitchOff(System.String)">
            <summary>
            Gives the illusion of a TV-style switch off.
            </summary>
            <remarks>
            Works safely with most HTML block elements (like DIV and LI).
            </remarks>
            <param name="elementId"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.Effects2Helper.BlindUp(System.String)">
            <summary>
            This pair of effects simulates a window blind, where the 
            contents of the affected elements stay in place.
            </summary>
            <remarks>
            Works safely with most HTML block elements (like DIV and LI), 
            except table rows, table bodies and table heads.
            </remarks>
            <param name="elementId"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.Effects2Helper.BlindDown(System.String)">
            <summary>
            This pair of effects simulates a window blind, where the 
            contents of the affected elements stay in place.
            </summary>
            <remarks>
            Works safely with most HTML block elements (like DIV and LI), 
            except table rows, table bodies and table heads.
            </remarks>
            <param name="elementId"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.Effects2Helper.SlideUp(System.String)">
            <summary>
            This pair of effects simulates a window blind, where the contents of 
            the affected elements scroll up and down accordingly.
            </summary>
            <remarks>
             You must include a second DIV element, 
             wrapping the contents of the outer DIV. 
             So, if you call new Effect.SlideDown('x'), your element must look like this:
            <code>
             &lt;div id="x"&gt;&lt;div&gt;contents&lt;/div&gt;&lt;/div&gt;
            </code>
            Because of a bug in Internet Explorer 6 (overflow not correctly hidden), 
            an additional wrapper div is needed if you want to use these effects on 
            absolutely positionend elements (wrapper is the absolutely positioned element, 
            x has position:relative; set; ):
            <code>
            &lt;div id="wrapper"&gt;
             &lt;div id="x"&gt;&lt;div&gt;contents&lt;/div&gt;&lt;/div&gt;
            &lt;/div&gt;
            </code>
            Works only on block elements. 
            </remarks>
            <param name="elementId"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.Effects2Helper.SlideDown(System.String)">
            <summary>
            This pair of effects simulates a window blind, where the contents of 
            the affected elements scroll up and down accordingly.
            </summary>
            <remarks>
             You must include a second DIV element, 
             wrapping the contents of the outer DIV. 
             So, if you call new Effect.SlideDown('x'), your element must look like this:
            <code>
             &lt;div id="x"&gt;&lt;div&gt;contents&lt;/div&gt;&lt;/div&gt;
            </code>
            Because of a bug in Internet Explorer 6 (overflow not correctly hidden), 
            an additional wrapper div is needed if you want to use these effects on 
            absolutely positionend elements (wrapper is the absolutely positioned element, 
            x has position:relative; set; ):
            <code>
            &lt;div id="wrapper"&gt;
             &lt;div id="x"&gt;&lt;div&gt;contents&lt;/div&gt;&lt;/div&gt;
            &lt;/div&gt;
            </code>
            Works only on block elements. 
            </remarks>
            <param name="elementId"></param>
            <returns></returns>
        </member>
        <member name="T:Castle.MonoRail.Framework.Helpers.EffectsFatHelper">
            <summary>
            Just apply the CSS class "fade" to any element and it will fade from yellow
            to its background color or white if none is specified.
            <para>
            Key Features <br/>
            
            * Fade an infinite number of elements. <br/>
            
            * No inline JavaScript. Simply give an element a class of "fade", the script does the rest "automagically". <br/>
            
            * Background color aware. FAT will do better than simply fade to white if the element (or it's parents) have a 
            CSS background color, it will fade to that background color instead. <br/>
            
            * Fade from any color. For example, if you wanted a list of error messages 
            to fade out from red you would simply give the list a class of "fade-FF0000". <br/>
            
            * Super smooth fading. By default, elements will fade at 30 frames per second 
            (the same rate as a television) over 3 seconds. You can adjust this to any 
            framerate and any duration. You could easily fade elements at 60 frames 
            per second over 4, 5, 10 seconds! <br/>
            </para>
            </summary>
            <remarks>
            NOTE: All elements to be faded must have an id tag!
            BASIC USE: <p id="paragraph1" class="fade">Watch me fade</p>
            ADVANCED USE: Change the default fade from color:
            <p id="paragraph1" class="fade-0066FF">Watch me fade from Blue (#0066FF)</p>
            SEE MORE HERE: http://www.axentric.com/posts/default/7
            </remarks>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.EffectsFatHelper.InstallScripts">
            <summary>
            Renders a Javascript library inside a single script tag.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.EffectsFatHelper.GetJavascriptFunctions">
            <summary>
            Renders a Javascript library inside a single script tag.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Castle.MonoRail.Framework.Helpers.RequestContext">
            <summary>
            Represents all scopes that the <see cref="T:Castle.MonoRail.Framework.Helpers.FormHelper"/>
            uses to search for root values
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Helpers.RequestContext.All">
            <summary>
            All scopes should be searched
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Helpers.RequestContext.PropertyBag">
            <summary>
            Only PropertyBag should be searched
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Helpers.RequestContext.Flash">
            <summary>
            Only Flash should be searched
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Helpers.RequestContext.Session">
            <summary>
            Only Session should be searched
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Helpers.RequestContext.Request">
            <summary>
            Only Request should be searched
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Helpers.RequestContext.Params">
            <summary>
            Only Params should be searched
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.Helpers.FormHelper">
            <summary>
            The FormHelper allows you to output html input elements using the 
            conventions necessary to use the DataBinder on the server side. Ultimately it
            allows you do to a bi-directional binding -- if used properly.
            </summary>
            
            <seealso cref="T:Castle.MonoRail.Framework.DataBindAttribute"/>
            <seealso cref="N:Castle.Components.Common"/>
            
            <example>
            Using simple values:
            <para>On the controller:</para>
            
            <code>
            public void MyAction()
            {
            	PropertyBag["name"] = "John Doe";
            }
            </code>
            
            <para>On the view (using NVelocity syntax)</para>
            
            <code lang="none">
            $Form.TextField('name') // Renders an input text with value "John Doe"
            </code>
            
            <para>
            Using complex objects:
            </para>
            
            <code>
            public void MyAction()
            {
            	PropertyBag["user"] = new User("John Doe");
            }
            </code>
            
            <para>On the view (using NVelocity syntax)</para>
            
            <code lang="none">
            $Form.TextField('user.name') // Renders an input text with value "John Doe"
            </code>
            </example>
            
            <remarks>
            <b>Elements generation</b> <br/>
            <para>
            <list type="table">
            <item>
            	<term>Buttons</term>
            	<description>
            	<see cref="M:Castle.MonoRail.Framework.Helpers.FormHelper.Submit(System.String)"/> <br/>
            	<see cref="M:Castle.MonoRail.Framework.Helpers.FormHelper.Button(System.String)"/> <br/>
            	<see cref="M:Castle.MonoRail.Framework.Helpers.FormHelper.ButtonElement(System.String)"/>
            	</description>
            </item>
            
            <item>
            	<term>Select</term>
            	<description>
            	<see cref="M:Castle.MonoRail.Framework.Helpers.FormHelper.Select(System.String,System.Collections.IEnumerable)"/>
            	</description>
            </item>
            
            <item>
            	<term>Text area</term>
            	<description>
            	<see cref="M:Castle.MonoRail.Framework.Helpers.FormHelper.TextArea(System.String)"/>
            	</description>
            </item>
            
            <item>
            	<term>Hidden field</term>
            	<description>
            	<see cref="M:Castle.MonoRail.Framework.Helpers.FormHelper.HiddenField(System.String)"/> 
            	</description>
            </item>
            
            <item>
            	<term>Checkbox field</term>
            	<description>
            	<see cref="M:Castle.MonoRail.Framework.Helpers.FormHelper.CheckboxField(System.String)"/>  <br/>
            	<see cref="M:Castle.MonoRail.Framework.Helpers.FormHelper.CreateCheckboxList(System.String,System.Collections.IEnumerable)"/> 
            	</description>
            </item>
            
            <item>
            	<term>Radio field</term>
            	<description>
            	<see cref="M:Castle.MonoRail.Framework.Helpers.FormHelper.RadioField(System.String,System.Object)"/> 
            	</description>
            </item>
            
            <item>
            	<term>File upload</term>
            	<description>
            	<see cref="M:Castle.MonoRail.Framework.Helpers.FormHelper.FileField(System.String)"/> 
            	</description>
            </item>
            
            <item>
            	<term>Text field</term>
            	<description>
            	<see cref="M:Castle.MonoRail.Framework.Helpers.FormHelper.TextField(System.String)"/> <br/>
            	<see cref="M:Castle.MonoRail.Framework.Helpers.FormHelper.TextFieldValue(System.String,System.Object)"/> <br/>
            	<see cref="M:Castle.MonoRail.Framework.Helpers.FormHelper.NumberField(System.String)"/> <br/>
            	<see cref="M:Castle.MonoRail.Framework.Helpers.FormHelper.NumberFieldValue(System.String,System.Object)"/>
            	</description>
            </item>
            
            <item>
            	<term>Password field</term>
            	<description>
            	<see cref="M:Castle.MonoRail.Framework.Helpers.FormHelper.PasswordField(System.String)"/> <br/>
            	<see cref="M:Castle.MonoRail.Framework.Helpers.FormHelper.PasswordNumberField(System.String)"/>
            	</description>
            </item>
            
            <item>
            	<term>Labels</term>
            	<description>
            	<see cref="M:Castle.MonoRail.Framework.Helpers.FormHelper.LabelFor(System.String,System.String)"/> <br/>
            	<see cref="M:Castle.MonoRail.Framework.Helpers.FormHelper.LabelFor(System.String,System.String,System.Collections.IDictionary)"/>
            	</description>
            </item>
            
            </list>
            </para>
            
            <para>
            <b>FormValidation</b> <br/>
            The following operations are related to the Form Validation support:
            </para>
            <list type="table">
            <item>
            	<term><see cref="M:Castle.MonoRail.Framework.Helpers.FormHelper.FormTag(System.Collections.IDictionary)"/> and <see cref="M:Castle.MonoRail.Framework.Helpers.FormHelper.EndFormTag"/> </term>
            	<description>Opens/close the form tag. They are required to use the form validation</description>
            </item>
            <item>
            	<term><see cref="M:Castle.MonoRail.Framework.Helpers.FormHelper.DisableValidation"/> </term>
            	<description>Disables validation altogether</description>
            </item>
            <item>
            	<term><see cref="M:Castle.MonoRail.Framework.Helpers.FormHelper.UseWebValidatorProvider(Castle.MonoRail.Framework.Helpers.ValidationStrategy.IBrowserValidatorProvider)"/> </term>
            	<description>Sets a custom Browser validator provider</description>
            </item>
            <item>
            	<term><see cref="M:Castle.MonoRail.Framework.Helpers.FormHelper.UsePrototypeValidation"/> </term>
            	<description>Configures the helper to use the prototype easy field validation. Must be invoked before FormTag</description>
            </item>
            <item>
            	<term><see cref="M:Castle.MonoRail.Framework.Helpers.FormHelper.UsefValidate"/> </term>
            	<description>Configures the helper to use the fValidate. Deprecated.</description>
            </item>
            <item>
            	<term><see cref="M:Castle.MonoRail.Framework.Helpers.FormHelper.UseZebdaValidation"/> </term>
            	<description>Configures the helper to use the Zebda. Must be invoked before FormTag</description>
            </item>
            </list>
            
            <para>
            <b>Mask support</b>. <br/>
            For most elements, you can use 
            the entries <c>mask</c> and optionally <c>mask_separator</c> to define a 
            mask for your inputs. Kudos to mordechai Sandhaus - 52action.com
            </para>
            
            <para>
            For example: mask='2,5',mask_separator='/' will mask the content to '12/34/1234'
            </para>
            </remarks>
        </member>
        <member name="F:Castle.MonoRail.Framework.Helpers.FormHelper.PropertyFlags">
            <summary>
            Common property flags for reflection
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Helpers.FormHelper.PropertyFlags2">
            <summary>
            Common property flags for reflection (with declared only)
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Helpers.FormHelper.FieldFlags">
            <summary>
            Common field flags for reflection
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Helpers.FormHelper.logger">
            <summary>
            Logger instance
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.FormHelper.Service(System.IServiceProvider)">
            <summary>
            Invoked by the framework in order to give a chance to
            obtain other services
            </summary>
            <param name="provider">The service proviver</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.FormHelper.InstallScripts">
            <summary>
            Renders a Javascript library inside a single script tag.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.FormHelper.FormTag(System.Collections.IDictionary)">
             <summary>
             Creates a form tag based on the parameters.
             <para>
             Javascript validation can also be bound to 
             the form and|or elements nested as long as the helper is 
             able to reach the <see cref="T:System.Type"/> of the object used on your view code
             </para>
             <para>
             The action attribute generation will use <see cref="T:Castle.MonoRail.Framework.Helpers.UrlHelper"/>
             </para>
             </summary>
             
             <seealso cref="M:Castle.MonoRail.Framework.Services.DefaultUrlBuilder.BuildUrl(Castle.MonoRail.Framework.UrlInfo,System.Collections.IDictionary)"/>
             
             <example>
             
             <code lang="none">
             $Form.FormTag("%{action='Save',id='productform'}")
             </code>
             
             Outputs:
             
             <code lang="xml">
             &lt;form method='post' action='/[appdir]/[controller]/Save.[extension]' id='productform'&gt;
             </code>
            
             </example>
             
             <remarks>
             The parameters are used to build a url and also to form the tag. For notes on the url 
             see <see cref="M:Castle.MonoRail.Framework.Services.DefaultUrlBuilder.BuildUrl(Castle.MonoRail.Framework.UrlInfo,System.Collections.IDictionary)"/>. The other parameters supported 
             follows
             
             <list type="table">
             <term>
            		<term>noaction</term>
            		<description>boolean. Disables the generation of an action</description>
             </term>
             <term>
            		<term>method</term>
            		<description>string. The http method to use. Defaults to <c>post</c></description>
             </term>
             <term>
            		<term>id</term>
            		<description>string. The form id.</description>
             </term>
             </list>
             
             More parameters can be accepted depending on the form validation strategy you are using (if any).
             
             </remarks>
             
             <param name="parameters">The parameters for the tag or for action and form validation generation.</param>
             <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.FormHelper.FormTag(System.String,System.Collections.IDictionary)">
             <summary>
             Creates a form tag based on the parameters.
             <para>
             Javascript validation can also be bound to 
             the form and|or elements nested as long as the helper is 
             able to reach the <see cref="T:System.Type"/> of the object used on your view code
             </para>
             <para>
             The action attribute generation will use <see cref="T:Castle.MonoRail.Framework.Helpers.UrlHelper"/>
             </para>
             </summary>
             
             <example>
             
             <code lang="none">
             $Form.FormTag('mytarget.castle', "%{id='productform'}")
             </code>
             
             Outputs:
             
             <code lang="xml">
             &lt;form method='post' action='mytarget.castle' id='productform'&gt;
             </code>
            
             </example>
             
             <remarks>
             The following parameters are accepted.
             
             <list type="table">
             <term>
            		<term>method</term>
            		<description>string. The http method to use. Defaults to <c>post</c></description>
             </term>
             <term>
            		<term>id</term>
            		<description>string. The form id.</description>
             </term>
             </list>
             
             More parameters can be accepted depending on the form validation strategy you are using (if any).
             
             </remarks>
             
             <param name="url">The hardcoded url.</param>
             <param name="parameters">The parameters for the tag or for action and form validation generation.</param>
             <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.FormHelper.AjaxFormTag(System.Collections.IDictionary)">
            <summary>
            Generate Ajax form tag for ajax based form submission. Experimental.
            </summary>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.FormHelper.EndFormTag">
            <summary>
            Renders an end form element.
            </summary>
            <remarks>
            Should be used if you are using form validation. Some validation approaches
            uses the end form before or after appending a javascript snippet.
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.FormHelper.Push(System.String)">
            <summary>
            Pushes the specified target. Experimental.
            </summary>
            <param name="target">The target.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.FormHelper.Push(System.String,System.Collections.IDictionary)">
            <summary>
            Pushes the specified target. Experimental.
            </summary>
            <param name="target">The target.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.FormHelper.Pop">
            <summary>
            Pops this instance. Experimental.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.FormHelper.Submit(System.String)">
            <summary>
            Generates an input submit element.
            </summary>
            <param name="value">The value/caption for the button.</param>
            <returns>The element tag</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.FormHelper.Submit(System.String,System.Collections.IDictionary)">
            <summary>
            Generates an input submit element.
            </summary>
            <param name="value">The value/caption for the button.</param>
            <param name="attributes">Attributes for the FormHelper method and for the html element it generates</param>
            <returns>The element tag</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.FormHelper.Button(System.String)">
            <summary>
            Generates an input button element.
            </summary>
            <param name="value">The value.</param>
            <returns>The element tag</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.FormHelper.Button(System.String,System.Collections.IDictionary)">
            <summary>
            Generates an input button element.
            </summary>
            <param name="value">The value.</param>
            <param name="attributes">Attributes for the FormHelper method and for the html element it generates</param>
            <returns>The element tag</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.FormHelper.ButtonElement(System.String)">
            <summary>
            Creates a basic button element of type submit.
            </summary>
            <param name="innerText">The inner text of the button element.</param>
            <returns>The generated button element.</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.FormHelper.ButtonElement(System.String,System.String)">
            <summary>
            Creates a basic button element of the specified type.
            </summary>
            <param name="innerText">The inner text of the button element.</param>
            <param name="type">The type of the button.</param>
            <returns>The generated button element.</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.FormHelper.ButtonElement(System.String,System.String,System.Collections.IDictionary)">
            <summary>
            Creates a basic button element of the specified type and with specified attributes.
            </summary>
            <param name="innerText">The inner text of the button element.</param>
            <param name="type">The type of the button.</param>
            <param name="attributes">Attributes for the FormHelper method and for the html element it generates</param>
            <returns>The generated button element.</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.FormHelper.TextFieldValue(System.String,System.Object)">
            <summary>
            Generates an input text form element
            with the supplied value
            </summary>
            <param name="target">The string to be used to create the element name.</param>
            <param name="value">Value to supply to the element (instead of querying the target)</param>
            <returns>The generated form element</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.FormHelper.TextFieldValue(System.String,System.Object,System.Collections.IDictionary)">
            <summary>
            Generates an input text form element
            with the supplied value
            </summary>
            <param name="target">The string to be used to create the element name.</param>
            <param name="value">Value to supply to the element (instead of querying the target)</param>
            <param name="attributes">Attributes for the FormHelper method and for the html element it generates</param>
            <returns>The generated form element</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.FormHelper.TextField(System.String)">
            <summary>
            Generates an input text element.
            <para>
            The value is extracted from the target (if available)
            </para>
            </summary>
            
            <example>
            The following example assumes that an entry <c>username</c> exists on the
            <see cref="P:Castle.MonoRail.Framework.Controller.PropertyBag"/> or <see cref="P:Castle.MonoRail.Framework.Controller.Flash"/> or <see cref="P:Castle.MonoRail.Framework.Controller.Session"/>
            
            <code lang="none">
            $Form.TextField('username')
            </code>
            Outputs:
            <code lang="xml">
            &lt;input type='text' name='username' id='username' value='John Doe' /&gt;
            </code>
            
            <para>
            The following example assumes that an entry <c>user</c> exists on the
            <see cref="P:Castle.MonoRail.Framework.Controller.PropertyBag"/> or <see cref="P:Castle.MonoRail.Framework.Controller.Flash"/> or <see cref="P:Castle.MonoRail.Framework.Controller.Session"/>
            </para>
            
            <code lang="none">
            $Form.TextField('user.name')
            </code>
            Outputs:
            <code lang="xml">
            &lt;input type='text' name='user.name' id='user_name' value='John Doe' /&gt;
            </code>
            </example>
            
            <param name="target">The object to get the value from and to be based on to create the element name.</param>
            <returns>The generated form element</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.FormHelper.TextField(System.String,System.Collections.IDictionary)">
            <summary>
            Generates an input text element.
            <para>
            The value is extracted from the target (if available)
            </para>
            </summary>
            
            <seealso cref="M:Castle.MonoRail.Framework.Helpers.FormHelper.TextField(System.String)"/>
            
            <param name="target">The object to get the value from and to be based on to create the element name.</param>
            <param name="attributes">Attributes for the FormHelper method and for the html element it generates</param>
            <returns>The generated form element</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.FormHelper.FilteredTextField(System.String,System.Collections.IDictionary)">
            <summary>
            Generates an input text element with a javascript that prevents the 
            chars listed in the forbid attribute from being entered.
            </summary>
            <para>
            You must pass an <c>forbid</c> value through the dictionary.
            It must be a comma separated list of chars that cannot be accepted on the field. 
            For example:
            </para>
            <code>
            FormHelper.FilteredTextField("product.price", {forbid='46'})
            </code>
            In this case the key code 46 (period) will not be accepted on the field.
            <para>
            The value is extracted from the target (if available).
            </para>
            <param name="target">The object to get the value from and to be based on to create the element name.</param>
            <param name="attributes">Attributes for the FormHelper method and for the html element it generates</param>
            <returns>The generated form element.</returns>
            <remarks>
            You must invoke <see cref="M:Castle.MonoRail.Framework.Helpers.FormHelper.InstallScripts"/> before using it.
            </remarks>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.FormHelper.NumberField(System.String)">
            <summary>
            Generates an input text element with a javascript that prevents
            chars other than numbers from being entered.
            <para>
            The value is extracted from the target (if available)
            </para>
            </summary>
            
            <seealso cref="M:Castle.MonoRail.Framework.Helpers.FormHelper.InstallScripts"/>
            <seealso cref="M:Castle.MonoRail.Framework.Helpers.FormHelper.NumberField(System.String,System.Collections.IDictionary)"/>
            
            <remarks>
            You must include the formhelper javascript functions to use the NumberField. 
            See <see cref="M:Castle.MonoRail.Framework.Helpers.FormHelper.InstallScripts"/>
            </remarks>
            
            <param name="target">The object to get the value from and to be based on to create the element name.</param>
            <returns>The generated form element</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.FormHelper.NumberField(System.String,System.Collections.IDictionary)">
            <summary>
            Generates an input text element with a javascript that prevents
            chars other than numbers from being entered.
            <para>
            The value is extracted from the target (if available)
            </para>
            </summary>
            
            <param name="target">The object to get the value from and to be based on to create the element name.</param>
            <param name="attributes">Attributes for the FormHelper method and for the html element it generates</param>
            <returns>The generated form element</returns>
            
            <remarks>
            You must include the formhelper javascript functions to use the NumberField. 
            See <see cref="M:Castle.MonoRail.Framework.Helpers.FormHelper.InstallScripts"/>
            <para>
            You can optionally pass an <c>exceptions</c> value through the dictionary.
            It must be a comma separated list of chars that can be accepted on the field. 
            For example:
            </para>
            <code>
            FormHelper.NumberField("product.price", {exceptions='13,10,11'})
            </code>
            In this case the key codes 13, 10 and 11 will be accepted on the field.
            <para>
            You can aslo optionally pass an <c>forbid</c> value through the dictionary.
            It must be a comma separated list of chars that cannot be accepted on the field. 
            For example:
            </para>
            <code>
            FormHelper.NumberField("product.price", {forbid='46'})
            </code>
            In this case the key code 46 (period) will not be accepted on the field.
            </remarks>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.FormHelper.NumberFieldValue(System.String,System.Object)">
            <summary>
            Generates an input text element with a javascript that prevents
            chars other than numbers from being entered. The value is not gathered 
            from the context, instead you specify it on the second argument
            </summary>
            
            <seealso cref="M:Castle.MonoRail.Framework.Helpers.FormHelper.InstallScripts"/>
            <seealso cref="M:Castle.MonoRail.Framework.Helpers.FormHelper.NumberField(System.String,System.Collections.IDictionary)"/>
            
            <param name="target">The object to get the value from and to be based on to create the element name.</param>
            <param name="value">The current value to output.</param>
            <returns>The generated form element</returns>
            
            <remarks>
            You must include the formhelper javascript functions to use the NumberField. 
            See <see cref="M:Castle.MonoRail.Framework.Helpers.FormHelper.InstallScripts"/>
            </remarks>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.FormHelper.NumberFieldValue(System.String,System.Object,System.Collections.IDictionary)">
            <summary>
            Generates an input text element with a javascript that prevents
            chars other than numbers from being entered. The value is not gathered 
            from the context, instead you specify it on the second argument
            </summary>
            
            <seealso cref="M:Castle.MonoRail.Framework.Helpers.FormHelper.InstallScripts"/>
            <seealso cref="M:Castle.MonoRail.Framework.Helpers.FormHelper.NumberField(System.String,System.Collections.IDictionary)"/>
            
            <param name="target">The object to get the value from and to be based on to create the element name.</param>
            <param name="value">The current value to output.</param>
            <param name="attributes">Attributes for the FormHelper method and for the html element it generates</param>
            <returns>The generated form element</returns>
            
            <remarks>
            You must include the formhelper javascript functions to use the NumberField. 
            See <see cref="M:Castle.MonoRail.Framework.Helpers.FormHelper.InstallScripts"/>
            </remarks>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.FormHelper.TextArea(System.String)">
            <summary>
            Generates a textarea element.
            <para>
            The value is extracted from the target (if available)
            </para>
            </summary>
            <param name="target">The object to get the value from and to be based on to create the element name.</param>
            <returns>The generated form element</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.FormHelper.TextArea(System.String,System.Collections.IDictionary)">
            <summary>
            Generates a textarea element.
            <para>
            The value is extracted from the target (if available)
            </para>
            </summary>
            <param name="target">The object to get the value from and to be based on to create the element name.</param>
            <param name="attributes">Attributes for the FormHelper method and for the html element it generates</param>
            <returns>The generated form element</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.FormHelper.TextAreaValue(System.String,System.Object,System.Collections.IDictionary)">
            <summary>
            Generates a textarea element with a specified value.
            </summary>
            <param name="target">The target to base the element name on.</param>
            <param name="value">The value to apply to the field.</param>
            <param name="attributes">Attributes for the FormHelper method and for the html element it generates</param>
            <returns>The generated form element</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.FormHelper.PasswordField(System.String)">
            <summary>
            Generates a password input field.
            </summary>
            <param name="target">The object to get the value from and to be based on to create the element name.</param>
            <returns>The generated form element</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.FormHelper.PasswordField(System.String,System.Collections.IDictionary)">
            <summary>
            Generates a password input field.
            </summary>
            <param name="target">The object to get the value from and to be based on to create the element name.</param>
            <param name="attributes">Attributes for the FormHelper method and for the html element it generates</param>
            <returns>The generated form element</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.FormHelper.PasswordNumberField(System.String)">
            <summary>
            Generates an input password element with a javascript that prevents
            chars other than numbers from being entered.
            <para>
            The value is extracted from the target (if available)
            </para>
            </summary>
            <remarks>
            You must invoke <see cref="M:Castle.MonoRail.Framework.Helpers.FormHelper.InstallScripts"/> before using it
            </remarks>
            <param name="target">The object to get the value from and to be based on to create the element name.</param>
            <returns>The generated form element</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.FormHelper.PasswordNumberField(System.String,System.Collections.IDictionary)">
            <summary>
            Generates an input password element with a javascript that prevents
            chars other than numbers from being entered.
            <para>
            The value is extracted from the target (if available)
            </para>
            <para>
            You can optionally pass an <c>exceptions</c> value through the dictionary.
            It must be a comma separated list of chars that can be accepted on the field. 
            For example:
            </para>
            <code>
            FormHelper.NumberField("product.price", {exceptions='13,10,11'})
            </code>
            In this case the key codes 13, 10 and 11 will be accepted on the field.
            <para>
            You can aslo optionally pass an <c>forbid</c> value through the dictionary.
            It must be a comma separated list of chars that cannot be accepted on the field. 
            For example:
            </para>
            <code>
            FormHelper.NumberField("product.price", {forbid='46'})
            </code>
            In this case the key code 46 (period) will not be accepted on the field.
            </summary>
            <remarks>
            You must invoke <see cref="M:Castle.MonoRail.Framework.Helpers.FormHelper.InstallScripts"/> before using it
            </remarks>
            <param name="target">The object to get the value from and to be based on to create the element name.</param>
            <param name="attributes">Attributes for the FormHelper method and for the html element it generates</param>
            <returns>The generated form element</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.FormHelper.LabelFor(System.String,System.String)">
            <summary>
            Generates a label element.
            </summary>
            <param name="target">The object to get the value from and to be based on to create the element name.</param>
            <param name="label">Legend</param>
            <returns>The generated form element</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.FormHelper.LabelFor(System.String,System.String,System.Collections.IDictionary)">
            <summary>
            Generates a label element.
            </summary>
            <param name="target">The object to get the value from and to be based on to create the element name.</param>
            <param name="label">Legend</param>
            <param name="attributes">Attributes for the FormHelper method and for the html element it generates</param>
            <returns>The generated form element</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.FormHelper.HiddenField(System.String)">
            <summary>
            Generates a hidden form element.
            <para>
            The value is extracted from the target (if available)
            </para>
            </summary>
            <param name="target">The object to get the value from and to be based on to create the element name.</param>
            <returns>The generated form element</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.FormHelper.HiddenField(System.String,System.Object)">
            <summary>
            Generates a hidden form element with the specified value
            </summary>
            <param name="target">The object to get the value from and to be based on to create the element name.</param>
            <param name="value">The value for the hidden field</param>
            <returns>The generated form element</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.FormHelper.HiddenField(System.String,System.Collections.IDictionary)">
            <summary>
            Generates a hidden form element.
            <para>
            The value is extracted from the target (if available)
            </para>
            </summary>
            <param name="target">The object to get the value from and to be based on to create the element name.</param>
            <param name="attributes">Attributes for the FormHelper method and for the html element it generates</param>
            <returns>The generated form element</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.FormHelper.HiddenField(System.String,System.Object,System.Collections.IDictionary)">
            <summary>
            Generates a hidden form element with the specified value
            </summary>
            <param name="target">The object to get the value from and to be based on to create the element name.</param>
            <param name="value">The value for the hidden field</param>
            <param name="attributes">Attributes for the FormHelper method and for the html element it generates</param>
            <returns>The generated form element</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.FormHelper.CreateCheckboxList(System.String,System.Collections.IEnumerable)">
            <summary>
            Creates a <see cref="T:Castle.MonoRail.Framework.Helpers.FormHelper.CheckboxList"/> instance
            which is enumerable. For each interaction you can invoke
            <see cref="M:Castle.MonoRail.Framework.Helpers.FormHelper.CheckboxList.Item"/> which will correctly render
            a checkbox input element for the current element on the supplied set (<c>dataSource</c>).
            <para>
            The enumerable item will be an element of the <c>dataSource</c>.
            </para>
            If the <c>dataSource</c>
            elements are complex objects (ie not string or primitives), 
            supply the parameters <c>value</c> and <c>text</c> to the dictionary to make
            the helper use the specified properties to extract the <c>option</c> value and content respectively.
            <para>
            Usually both the <c>target</c> and obviously the <c>dataSource</c> are sets
            with multiple items. The element types tend to be the same. If 
            they are not, you might have to specify the <c>suffix</c> parameters on 
            the <c>attributes</c> as it would not be inferred.
            </para>
            </summary>
            
            <example>
            Consider the following action code:
            <code>
            public void Index()
            {
                // data source
                PropertyBag["primenumbers"] = new int[] { 2, 3, 5, 7, 11, 13, 17, 19, 23 };
                
                // initial selection
                PropertyBag["selectedPrimes"] = new int[] { 11, 19 };
            }
            </code>
            
            And the respective view code
            
            <code lang="none">
            #set($items = $FormHelper.CreateCheckboxList("selectedPrimes", $primenumbers))
            
            #foreach($elem in $items)
              $items.Item()  $elem 
            #end
            </code>
            
            That will generates the following html:
            
            <code lang="none">
              &lt;input type="checkbox" id="selectedPrimes_0_" name="selectedPrimes[0]" value="2" /&gt;  2   
              &lt;input type="checkbox" id="selectedPrimes_1_" name="selectedPrimes[1]" value="3" /&gt;  3   
              &lt;input type="checkbox" id="selectedPrimes_2_" name="selectedPrimes[2]" value="5" /&gt;  5   
              &lt;input type="checkbox" id="selectedPrimes_3_" name="selectedPrimes[3]" value="7" /&gt;  7   
              &lt;input type="checkbox" id="selectedPrimes_4_" name="selectedPrimes[4]" value="11" checked="checked" /&gt;  11  
              &lt;input type="checkbox" id="selectedPrimes_5_" name="selectedPrimes[5]" value="13" /&gt;  13   
              &lt;input type="checkbox" id="selectedPrimes_6_" name="selectedPrimes[6]" value="17" /&gt;  17   
              &lt;input type="checkbox" id="selectedPrimes_7_" name="selectedPrimes[7]" value="19" checked="checked" /&gt;  19  
              &lt;input type="checkbox" id="selectedPrimes_8_" name="selectedPrimes[8]" value="23" /&gt;  23   
            </code>
            
            <para>
            To customize the id, you can call the <see cref="M:Castle.MonoRail.Framework.Helpers.FormHelper.CheckboxList.Item(System.String)"/> overload:
            </para>
            
            <code lang="none">
            #set($items = $FormHelper.CreateCheckboxList("selectedPrimes", $primenumbers))
            
            #foreach($elem in $items)
              $items.Item("myId${velocityCount}") $Form.LabelFor("myId${velocityCount}", $elem.ToString()) <br/>
            #end
            </code>
            </example>
            
            <param name="target">The object to get the value from and to be based on to create the element name.</param>
            <param name="dataSource">The set of available elements</param>
            <returns>The generated form element</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.FormHelper.CreateCheckboxList(System.String,System.Collections.IEnumerable,System.Collections.IDictionary)">
             <summary>
             Creates a <see cref="T:Castle.MonoRail.Framework.Helpers.FormHelper.CheckboxList"/> instance
             which is enumerable. For each interaction you can invoke
             <see cref="M:Castle.MonoRail.Framework.Helpers.FormHelper.CheckboxList.Item"/> which will correctly render
             a checkbox input element for the current element on the supplied set (<c>dataSource</c>).
             <para>
             The enumerable item will be an element of the <c>dataSource</c>.
             </para>
             If the <c>dataSource</c>
             elements are complex objects (ie not string or primitives), 
             supply the parameters <c>value</c> and <c>text</c> to the dictionary to make
             the helper use the specified properties to extract the <c>option</c> value and content respectively.
             <para>
             Usually both the <c>target</c> and obviously the <c>dataSource</c> are sets
             with multiple items. The element types tend to be the same. If 
             they are not, you might have to specify the <c>suffix</c> parameters on 
             the <c>attributes</c> as it would not be inferred.
             </para>
             </summary>
             
             <seealso cref="M:Castle.MonoRail.Framework.Helpers.FormHelper.CreateCheckboxList(System.String,System.Collections.IEnumerable)"/>
            
             <example>
             Consider the following action code:
             <code>
             public void Index()
             {
            		Category[] categories = new Category[] { new Category(1, "Music"), new Category(2, "Humor"), new Category(3, "Politics")  };
            		PropertyBag["categories"] = categories; // datasource
             
                 Blog blog = new Blog();
                 blog.Categories = new Category[] { new Category(2, "Humor") }; // initial selection
            		PropertyBag["blog"] = blog;
             }
             </code>
             
             And the respective view code
             
             <code lang="none">
             #set($items = $Form.CreateCheckboxList("blog.categories", $categories, "%{value='Id'}"))
             
             #foreach($elem in $items)
               $items.Item()  $elem  
             #end
             </code>
             
             That will generates the following html:
             
             <code lang="none">
               &lt;input type="checkbox" id="blog_categories_0_" name="blog.categories[0].Id" value="1" /&gt;  Music   
               &lt;input type="checkbox" id="blog_categories_1_" name="blog.categories[1].Id" value="2" checked="checked" /&gt;  Humor  
               &lt;input type="checkbox" id="blog_categories_2_" name="blog.categories[2].Id" value="3" /&gt;  Politics  
             </code>
             
             </example>
             
             <param name="target">The object to get the value from and to be based on to create the element name.</param>
             <param name="dataSource">The set of available elements</param>
             <param name="attributes">Attributes for the FormHelper method and for the html element it generates</param>
             <returns>The generated form element</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.FormHelper.CheckboxItem(System.Int32,System.String,System.String,Castle.MonoRail.Framework.Helpers.SetItem,System.Collections.IDictionary)">
            <summary>
            Outputs a checkbox element (for internal use)
            </summary>
            <param name="index"></param>
            <param name="target">The object to get the value from and to be based on to create the element name.</param>
            <param name="suffix"></param>
            <param name="item"></param>
            <param name="attributes">Attributes for the FormHelper method and for the html element it generates</param>
            <returns>The generated form element</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.FormHelper.CheckboxField(System.String)">
            <summary>
            Generates a checkbox field. In fact it generates two as a
            way to send a value if the primary checkbox is not checked.
            This allow the process the be aware of the unchecked value
            and act accordingly.
            </summary>
            
            <example>
            Consider the following view code:
            
            <code lang="none">
            $Form.CheckboxField('user.disabled')
            </code>
            
            That is going to output:
            
            <code lang="none">
             &lt;input type=&quot;checkbox&quot; id=&quot;user_disabled&quot; name=&quot;user.disabled&quot; value=&quot;true&quot; /&gt;
             &lt;input type=&quot;hidden&quot; id=&quot;user_disabledH&quot; name=&quot;user.disabled&quot; value=&quot;false&quot; /&gt; 
            </code>
            
            </example>
            
            <param name="target">The object to get the value from and to be based on to create the element name.</param>
            <returns>The generated form element</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.FormHelper.CheckboxField(System.String,System.Collections.IDictionary)">
            <summary>
            Generates a checkbox field. In fact it generates two as a
            way to send a value if the primary checkbox is not checked.
            This allow the process the be aware of the unchecked value
            and act accordingly.
            
            <para>
            The checked and unchecked values sent to the server defaults
            to true and false. You can override them using the 
            parameters <c>trueValue</c> and <c>falseValue</c>, but the DataBinder is prepared only
            to treat boolean arrays. 
            </para>
            
            </summary>
            
            <seealso cref="M:Castle.MonoRail.Framework.Helpers.FormHelper.CheckboxField(System.String)"/>
            
            <param name="target">The object to get the value from and to be based on to create the element name.</param>
            <param name="attributes">Attributes for the FormHelper method and for the html element it generates</param>
            <returns>The generated form element</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.FormHelper.RadioField(System.String,System.Object)">
            <summary>
            Generates a radio input type with the specified 
            value to send to the served in case the element in checked.
            It will automatically check the radio if the target 
            evaluated value is equal to the specified <c>valueToSend</c>.
            </summary>
            
            <example>
            Consider the following action code:
            
            <code>
            public void Index()
            {
            	PropertyBag["mode"] = FileMode.Truncate;
            }
            </code>
            
            And the following view code:
            
            <code lang="none">
              $Form.RadioField("mode", "Append") FileMode.Append 
              $Form.RadioField("mode", "Create") FileMode.Create 
              $Form.RadioField("mode", "CreateNew") FileMode.CreateNew 
              $Form.RadioField("mode", "Open") FileMode.Open 
              $Form.RadioField("mode", "OpenOrCreate", "%{id='customhtmlid'}") FileMode.OpenOrCreate 
              $Form.RadioField("mode", "Truncate") FileMode.Truncate 
            </code>
            
            That is going to output:
            
            <code lang="none">
             &lt;input type=&quot;radio&quot; id=&quot;mode&quot; name=&quot;mode&quot; value=&quot;Append&quot; /&gt; FileMode.Append 
             &lt;input type=&quot;radio&quot; id=&quot;mode&quot; name=&quot;mode&quot; value=&quot;Create&quot; /&gt; FileMode.Create 
             &lt;input type=&quot;radio&quot; id=&quot;mode&quot; name=&quot;mode&quot; value=&quot;CreateNew&quot; /&gt; FileMode.CreateNew  
             &lt;input type=&quot;radio&quot; id=&quot;mode&quot; name=&quot;mode&quot; value=&quot;Open&quot; /&gt; FileMode.Open 
             &lt;input type=&quot;radio&quot; id=&quot;customhtmlid&quot; name=&quot;mode&quot; value=&quot;OpenOrCreate&quot; /&gt; FileMode.OpenOrCreate  
             &lt;input type=&quot;radio&quot; id=&quot;mode&quot; name=&quot;mode&quot; value=&quot;Truncate&quot; checked=&quot;checked&quot; /&gt; FileMode.Truncate 
            </code>
            
            </example>
            
            <param name="target">The object to get the value from and to be based on to create the element name.</param>
            <param name="valueToSend"></param>
            <returns>The generated form element</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.FormHelper.RadioField(System.String,System.Object,System.Collections.IDictionary)">
            <summary>
            Generates a radio input type with the specified 
            value to send to the served in case the element in checked.
            It will automatically check the radio if the target 
            evaluated value is equal to the specified <c>valueToSend</c>.
            </summary>
            
            <seealso cref="M:Castle.MonoRail.Framework.Helpers.FormHelper.RadioField(System.String,System.Object)"/>
            
            <param name="target">The object to get the value from and to be based on to create the element name.</param>
            <param name="valueToSend"></param>
            <param name="attributes">Attributes for the FormHelper method and for the html element it generates</param>
            <returns>The generated form element</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.FormHelper.FileField(System.String)">
            <summary>
            Generates an input file element.
            <para>
            Dirrently than other operations exposed by this helper, 
            no value is extracted for this operation
            </para>
            </summary>
            <param name="target">The object to be based on when creating the element name.</param>
            <returns>The generated form element</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.FormHelper.FileField(System.String,System.Collections.IDictionary)">
            <summary>
            Generates an input file element.
            <para>
            Dirrently than other operations exposed by this helper, 
            no value is extracted for this operation
            </para>
            </summary>
            <param name="target">The object to be based on when creating the element name.</param>
            <param name="attributes">Attributes for the FormHelper method and for the html element it generates</param>
            <returns>The generated form element</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.FormHelper.Select(System.String,System.Collections.IEnumerable)">
            <summary>
            Creates a <c>select</c> element and its <c>option</c>s based on the <c>dataSource</c>.
            If the <c>dataSource</c>
            elements are complex objects (ie not string or primitives), 
            supply the parameters <c>value</c> and <c>text</c> to the dictionary to make
            the helper use the specified properties to extract the <c>option</c> value and content respectively.
            <para>
            You can also specify the attribute <c>firstoption</c> to force the first option be
            something like 'please select'. You can set the value of <c>firstoption</c> by specifying the attribute
            <c>firstoptionvalue</c>. The default value is '0'.
            </para>
            <para>
            Usually the <c>target</c> is a single value and the <c>dataSource</c> is obviously 
            a set with multiple items. The element types tend to be the same. If 
            they are not, you might have to specify the <c>suffix</c> parameters on 
            the <c>attributes</c> as it would not be inferred.
            </para>
            <para>
            The target can also be a set. In this case the intersection will be 
            the initially selected elements.
            </para>
            </summary>
            <param name="target">The object to get the value from and to be based on to create the element name.</param>
            <param name="dataSource">The set of available elements</param>
            <returns>The generated form element</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.FormHelper.Select(System.String,System.Collections.IEnumerable,System.Collections.IDictionary)">
            <summary>
            Creates a <c>select</c> element and its <c>option</c>s based on the <c>dataSource</c>.
            If the <c>dataSource</c>
            elements are complex objects (ie not string or primitives), 
            supply the parameters <c>value</c> and <c>text</c> to the dictionary to make
            the helper use the specified properties to extract the <c>option</c> value and content respectively.
            <para>
            You can also specify the attribute <c>firstoption</c> to force the first option be
            something like 'please select'. You can set the value of <c>firstoption</c> by specifying the attribute
            <c>firstoptionvalue</c>. The default value is '0'.
            </para>
            <para>
            Usually the <c>target</c> is a single value and the <c>dataSource</c> is obviously 
            a set with multiple items. The element types tend to be the same. If 
            they are not, you might have to specify the <c>suffix</c> parameters on 
            the <c>attributes</c> as it would not be inferred.
            </para>
            <para>
            The target can also be a set. In this case the intersection will be 
            the initially selected elements.
            </para>
            </summary>
            <param name="target">The object to get the value from and to be based on to create the element name.</param>
            <param name="dataSource">The set of available elements</param>
            <param name="attributes">Attributes for the FormHelper method and for the html element it generates</param>
            <returns>The generated form element</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.FormHelper.Select(System.String,System.Object,System.Collections.IEnumerable,System.Collections.IDictionary)">
            <summary>
            Creates a <c>select</c> element and its <c>option</c>s based on the <c>dataSource</c>.
            If the <c>dataSource</c>
            elements are complex objects (ie not string or primitives), 
            supply the parameters <c>value</c> and <c>text</c> to the dictionary to make
            the helper use the specified properties to extract the <c>option</c> value and content respectively.
            <para>
            You can also specify the attribute <c>firstoption</c> to force the first option be
            something like 'please select'. You can set the value of <c>firstoption</c> by specifying the attribute
            <c>firstoptionvalue</c>. The default value is '0'.
            </para>
            <para>
            Usually the <c>target</c> is a single value and the <c>dataSource</c> is obviously 
            a set with multiple items. The element types tend to be the same. If 
            they are not, you might have to specify the <c>suffix</c> parameters on 
            the <c>attributes</c> as it would not be inferred.
            </para>
            <para>
            The target can also be a set. In this case the intersection will be 
            the initially selected elements.
            </para>
            </summary>
            <param name="target">The object to get the value from and to be based on to create the element name.</param>
            <param name="selectedValue"></param>
            <param name="dataSource">The set of available elements</param>
            <param name="attributes">Attributes for the FormHelper method and for the html element it generates</param>
            <returns>The generated form element</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.FormHelper.GenerateSelect(System.String,System.Object,System.Collections.IEnumerable,System.Collections.IDictionary)">
            <summary>
            Generates the select.
            </summary>
            <param name="target">The target.</param>
            <param name="selectedValue">The selected value.</param>
            <param name="dataSource">The data source.</param>
            <param name="attributes">The attributes.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.FormHelper.EnumToPairs(System.Type)">
            <summary>
            Creates a list of pairs for the enum type. 
            </summary>
            <param name="enumType">enum type.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.FormHelper.UseWebValidatorProvider(Castle.MonoRail.Framework.Helpers.ValidationStrategy.IBrowserValidatorProvider)">
            <summary>
            Configures this FormHelper instance to use the supplied
            web validator to generate field validation.
            </summary>
            <param name="provider">The validation provider.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.FormHelper.UsePrototypeValidation">
            <summary>
            Configures this FormHelper instance to use Prototype for form fields validation
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.FormHelper.UsefValidate">
            <summary>
            Configures this FormHelper instance to use fValidate for form fields validation
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.FormHelper.UseZebdaValidation">
            <summary>
            Configures this FormHelper instance to use Zebda for form fields validation
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.FormHelper.DisableValidation">
            <summary>
            Disables the validation.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.FormHelper.ApplyValidation(Castle.Components.Validator.InputElementType,System.String,System.Collections.IDictionary@)">
            <summary>
            Applies the validation.
            </summary>
            <param name="inputType">Type of the input.</param>
            <param name="target">The target.</param>
            <param name="attributes">The attributes.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.FormHelper.RewriteTargetIfWithinObjectScope(System.String)">
            <summary>
            Rewrites the target if within object scope.
            </summary>
            <param name="target">The target.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.FormHelper.CreateInputElement(System.String,System.String,System.Object,System.Collections.IDictionary)">
            <summary>
            Creates the specified input element 
            using the specified parameters to supply the name, value, id and others 
            html attributes.
            </summary>
            <param name="type"></param>
            <param name="target">The object to get the value from and to be based on to create the element name.</param>
            <param name="value"></param>
            <param name="attributes">Attributes for the FormHelper method and for the html element it generates</param>
            <returns>The generated form element</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.FormHelper.CreateInputElement(System.String,System.String,System.String,System.String,System.Collections.IDictionary)">
            <summary>
            Creates the specified input element 
            using the specified parameters to supply the name, value, id and others 
            html attributes.
            </summary>
            <param name="type"></param>
            <param name="id"></param>
            <param name="target">The object to get the value from and to be based on to create the element name.</param>
            <param name="value"></param>
            <param name="attributes">Attributes for the FormHelper method and for the html element it generates</param>
            <returns>The generated form element</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.FormHelper.CreateInputElement(System.String,System.String,System.Collections.IDictionary)">
            <summary>
            Creates the input element.
            </summary>
            <param name="type">The type.</param>
            <param name="value">The value.</param>
            <param name="attributes">The attributes.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.FormHelper.FormatIfNecessary(System.Object,System.Collections.IDictionary)">
            <summary>
            Formats if necessary.
            </summary>
            <param name="value">The value.</param>
            <param name="attributes">The attributes.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.FormHelper.ObtainTargetProperty(Castle.MonoRail.Framework.Helpers.RequestContext,System.String,System.Action{System.Reflection.PropertyInfo})">
            <summary>
            Obtains the target property.
            </summary>
            <param name="context">The context.</param>
            <param name="target">The target.</param>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.FormHelper.ObtainValue(System.String)">
            <summary>
            Queries the context for the target value
            </summary>
            <param name="target">The object to get the value from and to be based on to create the element name.</param>
            <returns>The generated form element</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.FormHelper.ObtainValue(Castle.MonoRail.Framework.Helpers.RequestContext,System.String)">
            <summary>
            Queries the context for the target value
            </summary>
            <param name="context"></param>
            <param name="target">The object to get the value from and to be based on to create the element name.</param>
            <returns>The generated form element</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.FormHelper.ObtainRootInstance(Castle.MonoRail.Framework.Helpers.RequestContext,System.String)">
            <summary>
            Obtains the root instance.
            </summary>
            <param name="context">The context.</param>
            <param name="target">The object to get the value from and to be based on to create the element name.</param>
            <returns>The generated form element</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.FormHelper.ObtainRootInstance(Castle.MonoRail.Framework.Helpers.RequestContext,System.String,System.String[]@)">
            <summary>
            Obtains the root instance.
            </summary>
            <param name="context">The context.</param>
            <param name="target">The target.</param>
            <param name="pieces">The pieces.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.FormHelper.ObtainRootType(Castle.MonoRail.Framework.Helpers.RequestContext,System.String,System.String[]@)">
            <summary>
            Obtains the type of the root.
            </summary>
            <param name="context">The context.</param>
            <param name="target">The target.</param>
            <param name="pieces">The pieces.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.FormHelper.QueryPropertyRecursive(System.Object,System.String[],System.Int32)">
            <summary>
            
            </summary>
            <param name="rootInstance"></param>
            <param name="propertyPath"></param>
            <param name="piece"></param>
            <returns>The generated form element</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.FormHelper.CreateHtmlId(System.Collections.IDictionary,System.String)">
            <summary>
            Creates the HTML id.
            </summary>
            <param name="attributes">The attributes.</param>
            <param name="target">The target.</param>
            <returns>The generated form element</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.FormHelper.CreateHtmlId(System.Collections.IDictionary,System.String,System.Boolean)">
            <summary>
            Creates the HTML id.
            </summary>
            <param name="attributes">The attributes.</param>
            <param name="target">The target.</param>
            <param name="removeEntry">if set to <c>true</c> [remove entry].</param>
            <returns>The generated form element</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.FormHelper.IsPresent(System.Object,System.Object,Castle.MonoRail.Framework.Helpers.FormHelper.ValueGetter,System.Boolean)">
            <summary>
            Determines whether the present value matches the value on 
            the initialSetValue (which can be a single value or a set)
            </summary>
            <param name="value">Value from the datasource</param>
            <param name="initialSetValue">Value from the initial selection set</param>
            <param name="propertyOnInitialSet">Optional. Property to obtain the value from</param>
            <param name="isMultiple"><c>true</c> if the initial selection is a set</param>
            <returns><c>true</c> if it's selected</returns>
        </member>
        <member name="T:Castle.MonoRail.Framework.Helpers.FormHelper.CheckboxList">
            <summary>
            This class is an enumerable list of checkboxes. 
            It uses the <see cref="T:Castle.MonoRail.Framework.Helpers.OperationState"/> to manage the sets
            and to control the check/uncheck state.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.FormHelper.CheckboxList.#ctor(Castle.MonoRail.Framework.Helpers.FormHelper,System.String,System.Object,System.Collections.IEnumerable,System.Collections.IDictionary)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.Helpers.FormHelper.CheckboxList"/> class.
            </summary>
            <param name="helper">The helper.</param>
            <param name="target">The object to get the value from and to be based on to create the element name.</param>
            <param name="initialSelectionSet">The initial selection set.</param>
            <param name="dataSource">The set of available elements</param>
            <param name="attributes">Attributes for the FormHelper method and for the html element it generates</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.FormHelper.CheckboxList.Item">
            <summary>
            Outputs the Checkbox in the correct state (checked/unchecked) based
            on the Set. 
            <seealso cref="M:Castle.MonoRail.Framework.Helpers.FormHelper.CreateCheckboxList(System.String,System.Collections.IEnumerable,System.Collections.IDictionary)"/>
            </summary>
            <returns>The generated input element</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.FormHelper.CheckboxList.Item(System.String)">
            <summary>
            Outputs the Checkbox in the correct state (checked/unchecked) based
            on the Set. 
            <seealso cref="M:Castle.MonoRail.Framework.Helpers.FormHelper.CreateCheckboxList(System.String,System.Collections.IEnumerable,System.Collections.IDictionary)"/>
            </summary>
            <param name="id">The element id</param>
            <returns>The generated input element</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.FormHelper.CheckboxList.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.FormHelper.CheckboxList.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.FormHelper.CheckboxList.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
        </member>
        <member name="P:Castle.MonoRail.Framework.Helpers.FormHelper.CheckboxList.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
            <value></value>
            <returns>The current element in the collection.</returns>
            <exception cref="T:System.InvalidOperationException">The enumerator is positioned before the first element of the collection or after the last element. </exception>
        </member>
        <member name="P:Castle.MonoRail.Framework.Helpers.FormHelper.CheckboxList.CurrentSetItem">
            <summary>
            Gets the current set item.
            </summary>
            <value>The current set item.</value>
        </member>
        <member name="T:Castle.MonoRail.Framework.Helpers.FormHelper.ValueGetter">
            <summary>
            Abstracts the approach to access values on objects. 
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.FormHelper.ValueGetter.GetValue(System.Object)">
            <summary>
            Gets the value.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="P:Castle.MonoRail.Framework.Helpers.FormHelper.ValueGetter.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:Castle.MonoRail.Framework.Helpers.FormHelper.ReflectionValueGetter">
            <summary>
            Implementation of <see cref="T:Castle.MonoRail.Framework.Helpers.FormHelper.ValueGetter"/>
            that uses reflection to access values
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.FormHelper.ReflectionValueGetter.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.Helpers.FormHelper.ReflectionValueGetter"/> class.
            </summary>
            <param name="propInfo">The prop info.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.FormHelper.ReflectionValueGetter.GetValue(System.Object)">
            <summary>
            Gets the value.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="P:Castle.MonoRail.Framework.Helpers.FormHelper.ReflectionValueGetter.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:Castle.MonoRail.Framework.Helpers.FormHelper.DataRowValueGetter">
            <summary>
            Implementation of <see cref="T:Castle.MonoRail.Framework.Helpers.FormHelper.ValueGetter"/>
            to access DataRow's value
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.FormHelper.DataRowValueGetter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.Helpers.FormHelper.DataRowValueGetter"/> class.
            </summary>
            <param name="columnName">Name of the column.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.FormHelper.DataRowValueGetter.GetValue(System.Object)">
            <summary>
            Gets the value.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="P:Castle.MonoRail.Framework.Helpers.FormHelper.DataRowValueGetter.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:Castle.MonoRail.Framework.Helpers.FormHelper.DataRowViewValueGetter">
            <summary>
            Implementation of <see cref="T:Castle.MonoRail.Framework.Helpers.FormHelper.ValueGetter"/>
            to access DataRowView's value
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.FormHelper.DataRowViewValueGetter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.Helpers.FormHelper.DataRowViewValueGetter"/> class.
            </summary>
            <param name="columnName">Name of the column.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.FormHelper.DataRowViewValueGetter.GetValue(System.Object)">
            <summary>
            Gets the value.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="P:Castle.MonoRail.Framework.Helpers.FormHelper.DataRowViewValueGetter.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:Castle.MonoRail.Framework.Helpers.FormHelper.NoActionGetter">
            <summary>
            Empty implementation of a <see cref="T:Castle.MonoRail.Framework.Helpers.FormHelper.ValueGetter"/>
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.FormHelper.NoActionGetter.GetValue(System.Object)">
            <summary>
            Gets the value.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="P:Castle.MonoRail.Framework.Helpers.FormHelper.NoActionGetter.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:Castle.MonoRail.Framework.Helpers.FormHelper.EnumValueGetter">
            <summary>
            Implementation of <see cref="T:Castle.MonoRail.Framework.Helpers.FormHelper.ValueGetter"/>
            to access enum fields
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.FormHelper.EnumValueGetter.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.Helpers.FormHelper.EnumValueGetter"/> class.
            </summary>
            <param name="enumType">Type of the enum.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.FormHelper.EnumValueGetter.GetValue(System.Object)">
            <summary>
            Gets the value.
            </summary>
            <param name="instance">The instance.</param>
            <returns></returns>
        </member>
        <member name="P:Castle.MonoRail.Framework.Helpers.FormHelper.EnumValueGetter.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="T:Castle.MonoRail.Framework.Helpers.FormHelper.ValueGetterAbstractFactory">
            <summary>
            Abstract factory for <see cref="T:Castle.MonoRail.Framework.Helpers.FormHelper.ValueGetter"/> implementations
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.FormHelper.ValueGetterAbstractFactory.Create(System.Type,System.String)">
            <summary>
            Creates the specified target type.
            </summary>
            <param name="targetType">Type of the target.</param>
            <param name="keyName">Name of the key.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.FormHelper.FormScopeInfo.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.Helpers.FormHelper.FormScopeInfo"/> class.
            </summary>
            <param name="target">The target.</param>
            <param name="isValidationEnabled">if set to <c>true</c> [is validation enabled].</param>
        </member>
        <member name="P:Castle.MonoRail.Framework.Helpers.FormHelper.FormScopeInfo.RootTarget">
            <summary>
            Gets the root target.
            </summary>
            <value>The root target.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Helpers.FormHelper.FormScopeInfo.IsValidationEnabled">
            <summary>
            Gets a value indicating whether this instance is validation enabled.
            </summary>
            <value>
            	<c>true</c> if this instance is validation enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Castle.MonoRail.Framework.Helpers.HtmlHelper">
            <summary>
            Provides usefull common methods to generate HTML tags.
            </summary>
            <remarks>This helper provides the means to generate commonly used HTML tags. 
            All of it's methods return <see cref="T:System.String"/> that holds resulting HTML.
            </remarks>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.FieldSet(System.String)">
            <summary>
            Creates a <b>fieldset</b> tag with a legend.
            <code>
            &lt;fieldset&gt;&lt;legend&gt;legendArg&lt;/legend&gt;
            </code>
            <seealso cref="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.EndFieldSet"/>
            </summary>
            <param name="legend">Legend to use within the fieldset.</param>
            <returns>HTML string opening a fieldset tag, followed by a legend tag.</returns>
            <remarks>Calling <c>FieldSet( "legendArg" )</c> results in:
            <code>&lt;fieldset&gt;&lt;legend&gt;legendArg&lt;/legend&gt;</code>
            </remarks>
            <example>This example shows how to use <see cref="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.FieldSet(System.String)"/> together with <see cref="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.EndFieldSet"/>:
            <code>
            $HtmlHelper.FieldSet( "legendArg" )
            ...
            $HtmlHelper.EndFieldSet()
            </code>
            </example>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.EndFieldSet">
            <summary>
            Creates a closing <b>fieldset</b> tag.
            <code>
            &lt;/fieldset&gt;
            </code>
            <seealso cref="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.FieldSet(System.String)"/>
            </summary>
            <returns>HTML string closing the fieldset.</returns>
            <remarks>This method should be invoked after <see cref="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.FieldSet(System.String)"/> to close the fieldset.
            Calling <c>EndFieldSet()</c> results in:
            <code>&lt;/fieldset&gt;</code>
            </remarks>
            <example>This example shows how to use <see cref="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.FieldSet(System.String)"/> together with <see cref="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.EndFieldSet"/>:
            <code>
            $HtmlHelper.FieldSet( "legendArg" )
            ...
            $HtmlHelper.EndFieldSet()
            </code>
            </example>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.Form(System.String)">
            <overloads>This method has three overloads.</overloads>
             <summary>
             Creates a <b>form</b> tag with "<b>post</b>" method and specified <paramref name="action"/>.
             <code>
             &lt;form method="post" action="actionArg"&gt;
             </code>
             <seealso cref="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.EndForm"/>
             </summary>
             <param name="action">Target action for the form.</param>
             <returns>HTML string with form opening tag.</returns>
             <remarks>Calling <c>Form( "actionArg" )</c> results in:
             <code>&lt;form method="post" action="actionArg"&gt;</code>
             </remarks>
             <example>This example shows how to use <see cref="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.Form(System.String)"/> together with <see cref="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.EndForm"/>:
             <code>
             $HtmlHelper.Form( "actionArg" )
             ...
             $HtmlHelper.EndForm()
             </code>
             </example>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.Form(System.String,System.String,System.String)">
            <summary>
            Creates a <b>form</b> tag with the specified <paramref name="method"/>, <paramref name="action"/> and
            <paramref name="id"/> attributes.
            <code>
            &lt;form method="methodArg" action="actionArg" id="idArg"&gt;
            </code>
            <seealso cref="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.EndForm"/>
            </summary>
            <param name="action">Target action for the form.</param>
            <param name="id">Form HTML ID.</param>
            <param name="method">Form method (get, post, etc).</param>
            <returns>HTML string with form opening tag.</returns>
            <remarks>Calling <c>Form( "actionArg", "idArg", "methodArg" )</c> results in:
            <code>&lt;form method="methodArg" action="actionArg" id="idArg"&gt;</code>
            </remarks>
            <example>This example shows how to use <b>Form</b> together with <see cref="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.EndForm"/>:
            <code>
            $HtmlHelper.Form( "actionArg", "idArg", "methodArg" )
            ...
            $HtmlHelper.EndForm()
            </code>
            </example>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.Form(System.String,System.String,System.String,System.String)">
            <summary>
            Creates a <b>form</b> tag with the specified <paramref name="method"/> and <paramref name="action"/> attributes,
            <paramref name="id"/> and <paramref name="onSubmit"/> event handler. 
            <code>
            &lt;form method="methodArg" action="actionArg" id="idArg" onsubmit="onSubmitArg"&gt;
            </code>
            <seealso cref="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.EndForm"/>
            </summary>
            <param name="action">Target action for the form.</param>
            <param name="id">Form HTML ID.</param>
            <param name="method">Form method (get, post, etc).</param>
            <param name="onSubmit">JavaScript inline code to be invoked upon form submission.</param>
            <returns>HTML string with form opening tag.</returns>
            <remarks>Calling <c>Form( "actionArg", "idArg", "methodArg", "onSubmitArg" )</c> results in:
            <code>&lt;form method="methodArg" action="actionArg" id="idArg" onsubmit="onSubmitArg"&gt;</code>
            </remarks>
            <example>This example shows how to use <b>Form</b> together with <see cref="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.EndForm"/>:
            <code>
            $HtmlHelper.Form( "actionArg", "idArg", "methodArg", "submitHandler()" )
            ...
            $HtmlHelper.EndForm()
            </code>
            </example>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.Form(System.String,System.Collections.IDictionary)">
            <summary>
            Creates a <b>form</b> tag with the specified <paramref name="action"/> attribute.
            <code>
            &lt;form action="actionArg"&gt;
            </code>
            <seealso cref="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.EndForm"/>
            </summary>
            <param name="action">Target action for the form.</param>
            <param name="attributes">Html Attributes for the form tag</param>
            <returns>HTML string with form opening tag.</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.FormTo(System.String)">
            <summary>
            Creates a <b>form</b> tag targeting a URL in the style of the <see cref="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.LinkTo(System.String,System.String)"/> methods.
            </summary>
            <param name="action">An action on the current controller.</param>
            <returns>HTML string with form opening tag.</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.FormTo(System.String,System.String)">
            <summary>
            Creates a <b>form</b> tag targeting a URL in the style of the <see cref="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.LinkTo(System.String,System.String)"/> methods.
            </summary>
            <param name="controller">A controller name.</param>
            <param name="action">An action on <paramref name="controller"/>.</param>
            <returns>HTML string with form opening tag.</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.FormTo(System.String,System.String,System.Object)">
            <summary>
            Creates a <b>form</b> tag targeting a URL in the style of the <see cref="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.LinkTo(System.String,System.String)"/> methods.
            </summary>
            <param name="controller">A controller name.</param>
            <param name="action">An action on <paramref name="controller"/>.</param>
            <param name="id">Object to use for the action ID argument.</param>
            <returns>HTML string with form opening tag.</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.FormToAttributed(System.String,System.String,System.Collections.IDictionary)">
            <summary>
            Creates a <b>form</b> tag targeting a URL in the style of the <see cref="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.LinkToAttributed(System.String,System.String,System.String,System.Collections.IDictionary)"/> methods.
            </summary>
            <param name="controller">A controller name.</param>
            <param name="action">An action on <paramref name="controller"/>.</param>
            <param name="attributes">Additional attributes for the <b>form</b> tag.</param>
            <returns>HTML string with form opening tag.</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.FormToAttributed(System.String,System.String,System.Object,System.Collections.IDictionary)">
            <summary>
            Creates a <b>form</b> tag targeting a URL in the style of the <see cref="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.LinkToAttributed(System.String,System.String,System.String,System.Collections.IDictionary)"/> methods.
            </summary>
            <param name="controller">A controller name.</param>
            <param name="action">An action on <paramref name="controller"/>.</param>
            <param name="id">Object to use for the action ID argument.</param>
            <param name="attributes">Additional attributes for the <b>form</b> tag.</param>
            <returns>HTML string with form opening tag.</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.FormToAttributed(System.String,System.String,System.Object,System.String,System.Collections.IDictionary)">
            <summary>
            Creates a <b>form</b> tag targeting a URL in the style of the <see cref="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.LinkToAttributed(System.String,System.String,System.String,System.Collections.IDictionary)"/> methods.
            </summary>
            <param name="controller">A controller name.</param>
            <param name="action">An action on <paramref name="controller"/>.</param>
            <param name="id">Object to use for the action ID argument.</param>
            <param name="method">Form method (get, post, etc).</param>
            <param name="attributes">Additional attributes for the <b>form</b> tag.</param>
            <returns>HTML string with form opening tag.</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.EndForm">
            <summary>
            Creates a closing <b>form</b> tag.
            <code>
            &lt;/form&gt;
            </code>
            <seealso cref="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.Form(System.String)"/>
            </summary>
            <returns>HTML string with form closing tag.</returns>
            <remarks>
            Calling <c>EndForm()</c> results in:
            <code>&lt;/form&gt;</code>
            </remarks>
            <example>This example shows how to use <see cref="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.Form(System.String,System.String,System.String,System.String)"/> together with <see cref="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.EndForm"/>:
            <code>
            $HtmlHelper.Form( "actionArg", "idArg", "methodArg", "submitHandler()" )
            ...
            $HtmlHelper.EndForm()
            </code>
            </example>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.Link(System.String,System.String)">
            <overloads>This method has two overloads.</overloads>
             <summary>
             Creates an anchor (link) to the <paramref name="target"/> 
             <code>
             &lt;a href=&quot;/sometarget.html&quot;&gt;linkText&lt;/a&gt;
             </code>
             </summary>
             <param name="target">link's target.</param>
             <param name="linkText">Text of the link.</param>
             <returns>HTML string with anchor to the specified <paramref name="target"/>.</returns>
             <remarks>Calling <c>Link( "something.html", "to something" )</c> results in:
             <code>&lt;a href=&quot;something.html&quot;&gt;something&lt;/a&gt;</code>
             </remarks>
             <example>This example shows how to use <b>Link</b>:
             <code>
             $HtmlHelper.Link( "mypage.html", "This is a link to my page" )
             </code>
             </example>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.Link(System.String,System.String,System.Collections.IDictionary)">
            <summary>
            Creates an anchor (link) to the <paramref name="target"/> 
            <code>
            &lt;a href=&quot;/sometarget.html&quot;&gt;linkText&lt;/a&gt;
            </code>
            </summary>
            <param name="target">link's target.</param>
            <param name="linkText">Text of the link.</param>
            <param name="attributes">Additional attributes for the <b>a</b> tag.</param>
            <returns>HTML string with anchor to the specified <paramref name="target"/>.</returns>
            <remarks>Calling <c>Link( "something.html", "to something", $DictHelper.CreateDict("class=mylinkclass") )</c> results in:
            <code>&lt;a href=&quot;something.html&quot; class=&quot;mylinkclass&quot;&gt;something&lt;/a&gt;</code>
            </remarks>
            <example>This example shows how to use <b>Link</b>:
            <code>
            $HtmlHelper.Link( "mypage.html", "This is a link to my page", $DictHelper.CreateDict("class=mylinkclass") )
            </code>
            </example>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.LinkTo(System.String,System.String)">
            <overloads>This method has three overloads.</overloads>
             <summary>
             Creates an anchor (link) to the <paramref name="action"/> on the current controller.
             <code>
             &lt;a href=&quot;/website/currentController/actionArg.rails&quot;&gt;nameArg&lt;/a&gt;
             </code>
             </summary>
             <param name="name">Name for the link.</param>
             <param name="action">Action to link to.</param>
             <returns>HTML string with anchor to the specified <paramref name="action"/>.</returns>
             <remarks>Calling <c>LinkTo( "nameArg", "actionArg" )</c> results in:
             <code>&lt;a href=&quot;/websiter/currentController/actionArg.rails&quot;&gt;nameArg&lt;/a&gt;</code>
             </remarks>
             <example>This example shows how to use <b>LinkTo</b>:
             <code>
             $HtmlHelper.LinkTo( "linkName", "requiredAction" )
             </code>
             </example>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.LinkTo(System.String,System.Collections.IDictionary)">
            <overloads>This method has three overloads.</overloads>
             <summary>
             Creates an anchor (link) to the <paramref name="action"/> on the current controller.
             <code>
             &lt;a href=&quot;/website/currentController/actionArg.rails&quot;&gt;nameArg&lt;/a&gt;
             </code>
             </summary>
             <param name="name">Name for the link.</param>
             <param name="options">link options</param>
             <returns>HTML string with anchor to the specified <paramref name="options"/>.</returns>
             <remarks>Calling <c>LinkTo( "nameArg", DictHelper.CreateDict("controller=home","action=index") )</c> results in:
             <code>&lt;a href=&quot;/websiter/home/index.rails&quot;&gt;nameArg&lt;/a&gt;</code>
             </remarks>
             <example>This example shows how to use <b>LinkTo</b>:
             <code>
             $HtmlHelper.LinkTo( "linkName", DictHelper.CreateDict("controller=home","action=index") )
             </code>
             </example>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.LinkTo(System.String,System.String,System.String)">
            <summary>
            Creates an anchor (link) to the <paramref name="action"/> on the specified <paramref name="controller"/>.
            <code>
            &lt;a href=&quot;/website/controllerArg/actionArg.rails&quot;&gt;nameArg&lt;/a&gt;
            </code>
            </summary>
            <param name="name">Name for the link.</param>
            <param name="controller">Controller to link to.</param>
            <param name="action">Action to link to.</param>
            <returns>HTML string with anchor to the specified <paramref name="controller"/>
            and <paramref name="action"/>.</returns>
            <remarks>Calling <c>LinkTo( "nameArg", options )</c> results in:
            <code>&lt;a href=&quot;/website/controllerArg/actionArg.rails&quot;&gt;nameArg&lt;/a&gt;</code>
            </remarks>
            <example>This example shows how to use <b>LinkTo</b>:
            <code>
            $HtmlHelper.LinkTo( "linkName", {@action:} )
            </code>
            </example>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.LinkTo(System.String,System.String,System.String,System.Object)">
            <summary>
            Creates an anchor (link) to the <paramref name="action"/> on the specified <paramref name="controller"/>
            passing provided <paramref name="id"/>.
            <code>
            &lt;a href="/website/controllerArg/actionArg.rails?id=objectId"&gt;nameArg&lt;/a&gt;
            </code>
            </summary>
            <param name="name">Name for the link.</param>
            <param name="controller">Controller to link to.</param>
            <param name="action">Action to link to.</param>
            <param name="id">Object to use for the action ID argument.</param>
            <returns>HTML string with anchor to the specified <paramref name="controller"/>, 
            <paramref name="action"/> and <paramref name="id"/>.</returns>
            <remarks>Calling <c>LinkTo( "nameArg", "controllerArg", "actionArg", object )</c> results in:
            <code>&lt;a href="/website/controllerArg/actionArg.rails?id=object"&gt;nameArg&lt;/a&gt;</code>
            <para>
            <see cref="M:System.String.Format(System.String,System.Object)"/> is used to convert <paramref name="id"/> to the actual <see cref="T:System.String"/>.</para>
            </remarks>
            <example>This example shows how to use <b>LinkTo</b>:
            <code>
            $HtmlHelper.LinkTo( "linkName", "someController", "requiredAction", objectToRefByID )
            </code>
            </example>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.LinkToAttributed(System.String,System.String,System.String,System.Collections.IDictionary)">
            <summary>
            Creates an anchor (link) to the <paramref name="action"/> on the specified <paramref name="controller"/>
            <code>
            &lt;a href=&quot;/website/controllerArg/actionArg.rails&quot;&gt;nameArg&lt;/a&gt;
            </code>
            </summary>
            <param name="name">Name for the link.</param>
            <param name="controller">Controller to link to.</param>
            <param name="action">Action to link to.</param>
            <param name="attributes">Additional attributes for the <b>a</b> tag.</param>
            <returns>HTML string with anchor to the specified <paramref name="controller"/></returns>
            <remarks>Calling <c>LinkToAttributed( "nameArg", "controllerArg", "actionArg", IDictionary )</c> results in:
            <code>&lt;a href=&quot;/website/controllerArg/actionArg.rails&quot;&gt;nameArg&lt;/a&gt;</code>
            </remarks>
            <example>This example shows how to use <b>LinkToAttributed</b>:
            <code>
            $HtmlHelper.LinkToAttributed( "linkName", "someController", "requiredAction", $DictHelper.CreateDict("class=something") )
            </code>
            </example>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.LinkToAttributed(System.String,System.String,System.String,System.Object,System.Collections.IDictionary)">
            <summary>
            Creates an anchor (link) to the <paramref name="action"/> on the specified <paramref name="controller"/>
            <code>
            &lt;a href=&quot;/website/controllerArg/actionArg.rails?id=x&quot;&gt;nameArg&lt;/a&gt;
            </code>
            </summary>
            <param name="name">Name for the link.</param>
            <param name="controller">Controller to link to.</param>
            <param name="action">Action to link to.</param>
            <param name="id">The ID to be passed as a parameter for the action</param>
            <param name="attributes">Additional attributes for the <b>a</b> tag.</param>
            <returns>HTML string with anchor to the specified <paramref name="controller"/></returns>
            <remarks>Calling <c>LinkToAttributed( "nameArg", "controllerArg", "actionArg", IDictionary )</c> results in:
            <code>&lt;a href=&quot;/website/controllerArg/actionArg.rails&quot;&gt;nameArg&lt;/a&gt;</code>
            </remarks>
            <example>This example shows how to use <b>LinkToAttributed</b>:
            <code>
            $HtmlHelper.LinkToAttributed( "linkName", "someController", "requiredAction", $DictHelper.CreateDict("class=something") )
            </code>
            </example>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.LinkToWithPost(System.String,System.String)">
            <summary>
            Creates an anchor (link) to the <paramref name="action"/> on the current controller that posts
            using a hidden form element.
            </summary>
            <param name="name">Name for the link.</param>
            <param name="action">Action to link to on the current controller.</param>
            <returns>HTML string with anchor that posts to the current controller</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.LinkToWithPost(System.String,System.String,System.Object)">
            <summary>
            Creates an anchor (link) to the <paramref name="action"/> on the current controller that posts
            using a hidden form element.
            </summary>
            <param name="name">Name for the link.</param>
            <param name="action">Action to link to on the current controller.</param>
            <param name="id">The ID to be passed as a parameter for the action.</param>
            <returns>HTML string with anchor that posts to the current controller</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.LinkToWithPost(System.String,System.String,System.String)">
            <summary>
            Creates an anchor (link) to the <paramref name="action"/> on the current controller that posts
            using a hidden form element.
            </summary>
            <param name="name">Name for the link.</param>
            <param name="action">Action to link to on the current controller.</param>
            <param name="confirm">Guards the form submission with a javascript confirm popup.</param>
            <returns>HTML string with anchor that posts to the current controller</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.LinkToWithPost(System.String,System.String,System.Object,System.String)">
            <summary>
            Creates an anchor (link) to the <paramref name="action"/> on the current controller that posts
            using a hidden form element.
            </summary>
            <param name="name">Name for the link.</param>
            <param name="action">Action to link to on the current controller.</param>
            <param name="id">The ID to be passed as a parameter for the action.</param>
            <param name="confirm">Guards the form submission with a javascript confirm popup.</param>
            <returns>HTML string with anchor that posts to the current controller</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.LinkToWithPost(System.String,System.String,System.String,System.Object)">
            <summary>
            Creates an anchor (link) to the <paramref name="action"/> on the specified <paramref name="controller"/> that posts
            using a hidden form element.
            </summary>
            <param name="name">Name for the link.</param>
            <param name="controller">Controller to link to.</param>
            <param name="action">Action to link to.</param>
            <param name="id">The ID to be passed as a parameter for the action.</param>
            <returns>HTML string with anchor that posts to the specified <paramref name="controller"/></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.LinkToWithPost(System.String,System.String,System.String,System.String)">
            <summary>
            Creates an anchor (link) to the <paramref name="action"/> on the specified <paramref name="controller"/> that posts
            using a hidden form element.
            </summary>
            <param name="name">Name for the link.</param>
            <param name="controller">Controller to link to.</param>
            <param name="action">Action to link to.</param>
            <param name="confirm">Guards the form submission with a javascript confirm popup.</param>
            <returns>HTML string with anchor that posts to the specified <paramref name="controller"/></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.LinkToWithPost(System.String,System.String,System.String,System.Object,System.String)">
            <summary>
            Creates an anchor (link) to the <paramref name="action"/> on the specified <paramref name="controller"/> that posts
            using a hidden form element.
            </summary>
            <param name="name">Name for the link.</param>
            <param name="controller">Controller to link to.</param>
            <param name="action">Action to link to.</param>
            <param name="id">The ID to be passed as a parameter for the action.</param>
            <param name="confirm">Guards the form submission with a javascript confirm popup.</param>
            <returns>HTML string with anchor that posts to the specified <paramref name="controller"/></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.LinkToWithPostAttributed(System.String,System.String,System.String,System.String,System.Collections.IDictionary)">
            <summary>
            Creates an anchor (link) to the <paramref name="action"/> on the specified <paramref name="controller"/> that posts
            using a hidden form element.
            </summary>
            <param name="name">Name for the link.</param>
            <param name="controller">Controller to link to.</param>
            <param name="action">Action to link to.</param>
            <param name="confirm">Guards the form submission with a javascript confirm popup.</param>
            <param name="attributes">Additional attributes for the <b>a</b> tag.</param>
            <returns>HTML string with anchor that posts to the specified <paramref name="controller"/></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.LinkToWithPostAttributed(System.String,System.String,System.String,System.Object,System.String,System.Collections.IDictionary)">
            <summary>
            Creates an anchor (link) to the <paramref name="action"/> 
            on the specified <paramref name="controller"/> that posts
            using a hidden form element.
            </summary>
            <param name="name">Name for the link.</param>
            <param name="controller">Controller to link to.</param>
            <param name="action">Action to link to.</param>
            <param name="id">The ID to be passed as a parameter for the action.</param>
            <param name="confirm">Guards the form submission with a javascript confirm popup.</param>
            <param name="attributes">Additional attributes for the <b>a</b> tag.</param>
            <returns>HTML string with anchor that posts to the specified <paramref name="controller"/></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.MapToVirtual(System.String)">
            <summary>
            Maps <paramref name="target"/> to website virtual path.
            <code>/website/targetArg</code>
            </summary>
            <param name="target">Target path to map.</param>
            <returns>URL string pointing to the <paramref name="target"/> in the context of the website.</returns>
            <remarks>Calling <c>MapToVirtual( "targetArg" )</c> results in:
            <code>/website/targetArg</code>
            </remarks>
            <example>This example shows how to use <see cref="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.MapToVirtual(System.String)"/>:
            <code>
            $HtmlHelper.MapToVirtual( "targetFolder/targetFile.html" )
            </code>
            </example>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.LabelFor(System.String,System.String)">
            <overloads>This method has two overloads.</overloads>
             <summary>
             Creates a label for the element indicated with
             <paramref name="forId"/>.
             <code>
             &lt;label  for="forIdArg"&gt;labelArg&lt;/label&gt;
             </code>
             </summary>
             <param name="forId">ID of the element for which to create the lable.</param>
             <param name="label">Label name.</param>
             <returns>HTML string with generated label.</returns>
             <remarks>Calling <c>LabelFor( "forIdArg", "labelArg" )</c> results in:
             <code>&lt;label  for="forIdArg"&gt;labelArg&lt;/label&gt;</code>
             </remarks>
             <example>This example shows how to use <see cref="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.LabelFor(System.String,System.String)"/>:
             <code>
             $HtmlHelper.LabelFor( "forIdArg", "labelArg" )
             </code>
             </example>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.LabelFor(System.String,System.String,System.Collections.IDictionary)">
            <summary>
            Creates a label for the element indicated with
            <paramref name="forId"/>.
            <code>
            &lt;label key1="value1" key2="value2"  for="forIdArg"&gt;labelArg&lt;/label&gt;
            </code>
            </summary>
            <param name="forId">ID of the element for which to create the label.</param>
            <param name="label">Label name.</param>
            <param name="attributes">Additional attributes to add to the label.</param>
            <returns>HTML string with generated label.</returns>
            <remarks>Calling <c>LabelFor( "forIdArg", "labelArg", IDictionary )</c> results in:
            <code>&lt;label key5="value5" key4="value4" key1="value1" key3="value3" key2="value2"  for="forIdArg"&gt;labelArg&lt;/label&gt;</code>
            </remarks>
            <para>
            <paramref name="attributes"/> is used to generate additional attributes for the <b>label</b> tag.
            <see cref="P:System.Collections.IDictionary.Keys"/> are used to name attributes.
            <see cref="P:System.Collections.IDictionary.Values"/> are used to assign those attributes values.
            </para>
            <example>This example shows how to use <see cref="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.LabelFor(System.String,System.String,System.Collections.IDictionary)"/>:
            <code>
            $HtmlHelper.LabelFor( "forIdArg", "labelArg", IDictionary )
            </code>
            </example>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.DateTime(System.String,System.DateTime)">
            <overloads>This method has two overloads.</overloads>
             <summary>
             Creates three <b>select</b> tags to input day, month and year.
             <code>
             &lt;select name="nameArgday" id="nameArgday" &gt; ... &lt;/select&gt;
             &lt;select name="nameArgmonth" id="nameArgmonth" &gt; ... &lt;/select&gt;
             &lt;select name="nameArgyear" id="nameArgyear" &gt; ... &lt;/select&gt;
             </code>
             </summary>
             <param name="name">Name to use with <b>name</b> and <b>id</b> arguments of the <b>select</b> tag.</param>
             <param name="value"><see cref="T:System.DateTime"/> to use for default selected date.</param>
             <returns>A long HTML string with three <b>select</b> tag input date.</returns>
             <remarks>Calling <c>DateTime( "nameArg", new DateTime( 2005, 07, 15 ) )</c> results in:
             <code>
             &lt;select name="nameArgday" id="nameArgday" &gt;	&lt;option&gt;1&lt;/option&gt;
             	&lt;option&gt;2&lt;/option&gt;
             	...
             	&lt;option&gt;14&lt;/option&gt;
            		&lt;option selected&gt;15&lt;/option&gt;
            		&lt;option&gt;16&lt;/option&gt;
            		...
            		&lt;option&gt;30&lt;/option&gt;
            		&lt;option&gt;31&lt;/option&gt;
            	 &lt;/select&gt; &lt;select name="nameArgmonth" id="nameArgmonth" &gt;	&lt;option&gt;1&lt;/option&gt;
            		&lt;option&gt;2&lt;/option&gt;
            		...
            		&lt;option&gt;6&lt;/option&gt;
            		&lt;option selected&gt;7&lt;/option&gt;
            		&lt;option&gt;8&lt;/option&gt;
            		...
            		&lt;option&gt;11&lt;/option&gt;
            		&lt;option&gt;12&lt;/option&gt;
            	 &lt;/select&gt; &lt;select name="nameArgyear" id="nameArgyear" &gt;	&lt;option&gt;1930&lt;/option&gt;
            		&lt;option&gt;1931&lt;/option&gt;
            		...
            		&lt;option&gt;2004&lt;/option&gt;
            		&lt;option selected&gt;2005&lt;/option&gt;
            		&lt;option&gt;2006&lt;/option&gt;
            		...
            		&lt;option&gt;2029&lt;/option&gt;
             &lt;/select&gt;</code>
             As above example shows the year range is hardcoded between 1930 and 2029.
             <para>
             <paramref name="name"/> is used to generate <b>name</b> and <b>id</b> for each <b>select</b> tag.
             Supplied <see cref="T:System.String"/> is concatenated with "day", "month", or "year" to create
             <see cref="T:System.String"/> for the tag attributes.
             </para>
             </remarks>
             <example>This example shows how to use <b>DateTime</b>:
             <code>
             $HtmlHelper.DateTime( "nameArg", new DateTime( 2005, 07, 15 ) )
             </code>
             </example>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.DateTime(System.String,System.DateTime,System.Collections.IDictionary)">
            <summary>
            Creates three <b>select</b> tags to input day, month and year.
            <code>
            &lt;select name="nameArgday" id="nameArgday" key1="value1" key3="value3" key2="value2" &gt; ... &lt;/select&gt;
            &lt;select name="nameArgmonth" id="nameArgmonth" key1="value1" key3="value3" key2="value2" &gt; ... &lt;/select&gt;
            &lt;select name="nameArgyear" id="nameArgyear" key1="value1" key3="value3" key2="value2" &gt; ... &lt;/select&gt;
            </code>
            </summary>
            <param name="name">Name to use with <b>name</b> and <b>id</b> arguments of the <b>select</b> tag.</param>
            <param name="value"><see cref="T:System.DateTime"/> to use for default selected date.</param>
            <param name="attributes">Additional attributes for <b>select</b> tags.</param>
            <returns>A long HTML string with three <b>select</b> tag input date.</returns>
            <remarks>Calling <c>DateTime( "nameArg", new DateTime( 2005, 07, 15 ), IDictionary )</c> results in:
            <code>
            &lt;select name="nameArgday" id="nameArgday" key1="value1" key2="value2" &gt;	&lt;option&gt;1&lt;/option&gt;
            	&lt;option&gt;2&lt;/option&gt;
            	...
            	&lt;option&gt;14&lt;/option&gt;
            	&lt;option selected&gt;15&lt;/option&gt;
            	&lt;option&gt;16&lt;/option&gt;
            	...
            	&lt;option&gt;30&lt;/option&gt;
            	&lt;option&gt;31&lt;/option&gt;
             &lt;/select&gt; &lt;select name="nameArgmonth" id="nameArgmonth" key1="value1" key2="value2" &gt;	&lt;option&gt;1&lt;/option&gt;
            	&lt;option&gt;2&lt;/option&gt;
            	...
            	&lt;option&gt;6&lt;/option&gt;
            	&lt;option selected&gt;7&lt;/option&gt;
            	&lt;option&gt;8&lt;/option&gt;
            	...
            	&lt;option&gt;11&lt;/option&gt;
            	&lt;option&gt;12&lt;/option&gt;
             &lt;/select&gt; &lt;select name="nameArgyear" id="nameArgyear" key1="value1" key2="value2" &gt;	&lt;option&gt;1930&lt;/option&gt;
            	&lt;option&gt;1931&lt;/option&gt;
            	...
            	&lt;option&gt;2004&lt;/option&gt;
            	&lt;option selected&gt;2005&lt;/option&gt;
            	&lt;option&gt;2006&lt;/option&gt;
            	...
            	&lt;option&gt;2029&lt;/option&gt;
            &lt;/select&gt;</code>
            As above example shows the year range is hardcoded between 1930 and 2029.
            <para>
            <paramref name="name"/> is used to generate <b>name</b> and <b>id</b> for each <b>select</b> tag.
            Supplied <see cref="T:System.String"/> is concatenated with "day", "month", or "year" to create
            <see cref="T:System.String"/> for the tag attributes.
            </para>
            <para>
            <paramref name="attributes"/> is used to generate additional attributes for each of the <b>select</b> tags.
            <see cref="P:System.Collections.IDictionary.Keys"/> are used to name attributes.
            <see cref="P:System.Collections.IDictionary.Values"/> are used to assign those attributes values.
            </para>
            </remarks>
            <example>This example shows how to use <b>DateTime</b>:
            <code>
            $HtmlHelper.DateTime( "nameArg", new DateTime( 2005, 07, 15 ), IDictionary )
            </code>
            </example>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.TextArea(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Creates a text area element.
            <code>&lt;textarea id="nameArg" name="nameArg" cols="10" rows="10"&gt;valueArg&lt;/textarea&gt;</code>
            </summary>
            <param name="name">Value for <b>name</b> and <b>id</b> attributes.</param>
            <param name="cols"><b>cols</b> attribute value.</param>
            <param name="rows"><b>rows</b> attribute value.</param>
            <param name="value">Text to place inside of the text area.</param>
            <returns>HTML string with closed <b>textarea</b> tag.</returns>
            <remarks>Calling <c>TextArea( "nameArg", 10, 10, "valueArg" )</c> results in:
            <code>&lt;textarea id="nameArg" name="nameArg" cols="10" rows="10"&gt;valueArg&lt;/textarea&gt;</code>
            </remarks>
            <example>This example shows how to use <see cref="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.TextArea(System.String,System.Int32,System.Int32,System.String)"/>:
            <code>
            $HtmlHelper.TextArea( "nameArg", 10, 20, "Text inside text area." )
            </code>
            </example>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.InputButton(System.String)">
            <overloads>This method has three overloads.</overloads>
            <summary>
            Creates an input element of the button type.
            <code>&lt;input type="button" value="valueArg" /&gt;</code>
            </summary>
            <param name="value"><see cref="T:System.String"/> for <b>value</b> attribute.</param>
            <returns>HTML string with button type <b>input</b> tag.</returns>
            <remarks>Calling <c>InputButton( "valueArg" )</c> results in:
            <code>&lt;input type="button" name="valueArg" value="valueArg" /&gt;</code>
            </remarks>
            <example>This example shows how to use <b>InputButton</b>:
            <code>
            $HtmlHelper.InputButton( "valueArg" )
            </code>
            </example>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.InputButton(System.String,System.String)">
            <summary>
            Creates an input element of the button type.
            <code>&lt;input type="button" name="nameArg" id="nameArg" value="valueArg" /&gt;</code>
            </summary>
            <param name="name">Value for <b>name</b> and <b>id</b> attributes.</param>
            <param name="value"><see cref="T:System.String"/> for <b>value</b> attribute.</param>
            <returns>HTML string with button type <b>input</b> tag.</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.InputButton(System.String,System.String,System.Collections.IDictionary)">
            <summary>
            Creates an input element of the button type.
            <code>&lt;input type="button" name="nameArg" id="nameArg" value="valueArg" /&gt;</code>
            </summary>
            <param name="name">Value for <b>name</b> and <b>id</b> attributes.</param>
            <param name="value"><see cref="T:System.String"/> for <b>value</b> attribute.</param>
            <param name="attributes">Additional attributes for the <b>input</b> tag.</param>
            <returns>HTML string with button type <b>input</b> tag.</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.InputCheckbox(System.String,System.Object)">
            <overloads>This method has three overloads.</overloads>
            <summary>
            Creates an input element of the checkbox type.
            <code>&lt;input type="checkbox" name="nameArg" id="nameArg" value="valueArg" /&gt;</code>
            </summary>
            <param name="name">Value for <c>name</c> and <c>id</c> attributes.</param>
            <param name="value"><see cref="T:System.String"/> for <c>value</c> attribute.</param>
            <returns>HTML string with checkbox type <c>input</c> tag.</returns>
            <remarks>Calling <c>InputCheckbox( "name", "1" )</c> results in:
            <code>&lt;input type="checkbox" name="name" id="name" value="1" /&gt;</code>
            </remarks>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.InputCheckbox(System.String,System.Object,System.Boolean)">
            <summary>
            Creates an input element of the checkbox type.
            <code>&lt;input type="checkbox" name="nameArg" id="nameArg" value="valueArg" /&gt;</code>
            </summary>
            <param name="name">Value for <b>name</b> and <b>id</b> attributes.</param>
            <param name="value"><see cref="T:System.String"/> for <b>value</b> attribute.</param>
            <param name="isChecked">If true, adds the <c>checked</c> attributed to the tag</param>
            <returns>HTML string with checkbox type <b>input</b> tag.</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.InputCheckbox(System.String,System.Object,System.Collections.IDictionary)">
            <summary>
            Creates an input element of the checkbox type.
            <code>&lt;input type="checkbox" name="nameArg" id="nameArg" value="valueArg" /&gt;</code>
            </summary>
            <param name="name">Value for <b>name</b> and <b>id</b> attributes.</param>
            <param name="value"><see cref="T:System.String"/> for <b>value</b> attribute.</param>
            <param name="attributes">Additional attributes for the <b>input</b> tag.</param>
            <returns>HTML string with checkbox type <b>input</b> tag.</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.InputRadio(System.String,System.Object)">
            <overloads>This method has two overloads.</overloads>
            <summary>
            Creates an input element of the radio type.
            <code>&lt;input type="radio" name="nameArg" value="valueArg" /&gt;</code>
            </summary>
            <param name="name">Value for <b>name</b> attribute.</param>
            <param name="value"><see cref="T:System.String"/> for <b>value</b> attribute.</param>
            <returns>HTML string with radio type <b>input</b> tag.</returns>
            <remarks>Calling <c>InputRadio( "name", "1" )</c> results in:
            <code>&lt;input type="radio" name="name" value="1" /&gt;</code>
            </remarks>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.InputRadio(System.String,System.Object,System.Collections.IDictionary)">
            <summary>
            Creates an input element of the radio type.
            <code>&lt;input type="radio" name="nameArg" value="valueArg" /&gt;</code>
            </summary>
            <param name="name">Value for <b>name</b> attribute.</param>
            <param name="value"><see cref="T:System.String"/> for <b>value</b> attribute.</param>
            <param name="attributes">Additional attributes for the <b>input</b> tag.</param>
            <returns>HTML string with radio type <b>input</b> tag.</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.InputFile(System.String)">
            <overloads>This method has two overloads.</overloads>
            <summary>
            Creates an input element of the file type.
            <code>&lt;input type=&quot;file&quot; name=&quot;nameArg&quot; /&gt;</code>
            </summary>
            <param name="name">Value for <b>name</b> attribute.</param>
            <returns>HTML string with file type <b>input</b> tag.</returns>
            <remarks>Calling <c>InputFile( "name" )</c> results in:
            <code>&lt;input type=&quot;file&quot; name=&quot;name&quot; /&gt;</code>
            </remarks>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.InputFile(System.String,System.Collections.IDictionary)">
            <summary>
            Creates an input element of the file type.
            <code>&lt;input type=&quot;file&quot; name=&quot;nameArg&quot; /&gt;</code>
            </summary>
            <param name="name">Value for <b>name</b> attribute.</param>
            <param name="attributes">Additional attributes for the <b>input</b> tag.</param>
            <returns>HTML string with file type <b>input</b> tag.</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.InputText(System.String,System.String)">
            <overloads>This method has four overloads.</overloads>
            <summary>
            Creates an input element of the text type.
            <code>&lt;input type="text" name="nameArg" id="nameArg" value="valueArg" /&gt;</code>
            </summary>
            <param name="name">Value for <b>name</b> and <b>id</b> attributes.</param>
            <param name="value"><see cref="T:System.String"/> for <b>value</b> attribute.</param>
            <returns>HTML string with text type <b>input</b> tag.</returns>
            <remarks>Calling <c>InputText( "nameArg", "valueArg" )</c> results in:
            <code>&lt;input type="text" name="nameArg" id="nameArg" value="valueArg" /&gt;</code>
            </remarks>
            <example>This example shows how to use <b>InputText</b>:
            <code>
            $HtmlHelper.InputText( "nameArg", "valueArg" )
            </code>
            </example>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.InputText(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Creates an input element of the text type of specified
            <paramref name="size"/> and <paramref name="maxlength"/>.
            <code>&lt;input type="text" name="nameArg" id="nameArg" value="valueArg" size="10" maxlength="10" /&gt;</code>
            </summary>
            <param name="name">Value for <b>name</b> and <b>id</b> attributes.</param>
            <param name="value"><see cref="T:System.String"/> for <b>value</b> attribute.</param>
            <param name="size"><b>size</b> attribute value.</param>
            <param name="maxlength"><b>maxlength</b> attribute value.</param>
            <returns>HTML string with text type <b>input</b> tag.</returns>
            <remarks>Calling <c>InputText( "nameArg", "valueArg", 10, 10 )</c> results in:
            <code>&lt;input type="text" name="nameArg" id="nameArg" value="valueArg" size="10" maxlength="10" /&gt;</code>
            </remarks>
            <example>This example shows how to use <b>InputText</b>:
            <code>
            $HtmlHelper.InputText( "nameArg", "valueArg", 10, 10 )
            </code>
            </example>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.InputText(System.String,System.String,System.Int32,System.Int32,System.Collections.IDictionary)">
            <summary>
            Creates an input element of the text type with specified
            <paramref name="size"/>, <paramref name="maxlength"/> and <paramref name="attributes"/>.
            <code>&lt;input type="text" name="nameArg" id="nameArg" value="valueArg" size="10" maxlength="10" /&gt;</code>
            </summary>
            <param name="name">Value for <b>name</b> and <b>id</b> attributes.</param>
            <param name="value"><see cref="T:System.String"/> for <b>value</b> attribute.</param>
            <param name="size"><b>size</b> attribute value.</param>
            <param name="maxlength"><b>maxlength</b> attribute value.</param>
            <param name="attributes">Additional attributes for the <b>input</b> tag.</param>
            <returns>HTML string with text type <b>input</b> tag.</returns>
            <remarks>Calling <c>InputText( "nameArg", "valueArg", 10, 10, IDictionary )</c> results in:
            <code>&lt;input type="text" name="nameArg" id="nameArg" value="valueArg" size="10" maxlength="10" key1="value1" key2="value2" /&gt;</code>
            <para>
            <paramref name="attributes"/> is used to generate additional attributes for the <b>label</b> tag.
            <see cref="P:System.Collections.IDictionary.Keys"/> are used to name attributes.
            <see cref="P:System.Collections.IDictionary.Values"/> are used to assign those attributes values.
            </para>
            </remarks>
            <example>This example shows how to use <b>InputText</b>:
            <code>
            $HtmlHelper.InputText( "nameArg", "valueArg", 10, 10, IDictionary )
            </code>
            </example>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.InputText(System.String,System.String,System.String)">
            <summary>
            Creates an input element of the text type with custom <paramref name="name"/> and <paramref name="id"/>.
            <code>&lt;input type="text" name="nameArg" id="idArg" value="valueArg" /&gt;</code>
            </summary>
            <param name="name"><b>name</b> attribute value.</param>
            <param name="value"><see cref="T:System.String"/> for <b>value</b> attribute.</param>
            <param name="id"><b>id</b> attribute value.</param>
            <returns>HTML string with text type <b>input</b> tag.</returns>
            <remarks>Calling <c>InputText( "nameArg", "valueArg", "idArg" )</c> results in:
            <code>&lt;input type="text" name="nameArg" id="idArg" value="valueArg" /&gt;</code>
            </remarks>
            <example>This example shows how to use <b>InputText</b>:
            <code>
            $HtmlHelper.InputText( "nameArg", "valueArg", "idArg" )
            </code>
            </example>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.InputText(System.String,System.String,System.Collections.IDictionary)">
            <overloads>This method has two overloads.</overloads>
            <summary>
            Creates a hidden type input element.
            <code>&lt;input type=&quot;hidden&quot; name=&quot;nameArg&quot; id=&quot;nameArg&quot; value=&quot;valueArg&quot; /&gt;</code>
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.InputPassword(System.String)">
            <summary>
            Creates an input element of password type
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.InputPassword(System.String,System.String)">
            <summary>
            Creates an input element of password type
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.InputPassword(System.String,System.String,System.Collections.IDictionary)">
            <summary>
            Creates an input element of password type
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.InputHidden(System.String,System.String)">
            <summary>
            Creates an input hidden element
            </summary>
            <param name="name">Value for <b>name</b> and <b>id</b> attributes.</param>
            <param name="value"><see cref="T:System.String"/> for <b>value</b> attribute.</param>
            <returns>HTML string with hidden type <b>input</b> tag.</returns>
            <remarks>Calling <c>InputHidden( "nameArg", "valueArg" )</c> results in:
            <code>&lt;input type="hidden" name="nameArg" id="nameArg" value="valueArg" /&gt;</code>
            </remarks>
            <example>This example shows how to use <b>InputHidden</b>:
            <code>
            $HtmlHelper.InputHidden( "nameArg", "valueArg" )
            </code>
            </example>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.InputHidden(System.String,System.Object)">
            <summary>
            Creates a hidden type input element.
            <code>&lt;input type="hidden" name="nameArg" id="nameArg" value="object" /&gt;</code>
            </summary>
            <param name="name">Value for <b>name</b> and <b>id</b> attributes.</param>
            <param name="value"><see cref="T:System.Object"/> to supply <see cref="T:System.String"/> for <b>value</b> attribute.</param>
            <returns>HTML string with hidden type <b>input</b> tag.</returns>
            <remarks>Calling <c>InputHidden( "nameArg", object )</c> results in:
            <code>&lt;input type="hidden" name="nameArg" id="nameArg" value="object" /&gt;</code>
            <para>
            <see cref="T:System.String"/> for <b>value</b> attribute is retrieved from <paramref name="value"/>
            via <see cref="M:System.Object.ToString"/>.
            </para>
            <para>If <paramref name="value"/> is <c>null</c> <see cref="F:System.String.Empty"/> is used as the <b>value</b>
            <see cref="T:System.String"/>.</para>
            </remarks>
            <example>This example shows how to use <b>InputHidden</b>:
            <code>
            $HtmlHelper.InputHidden( "nameArg", object  )
            </code>
            </example>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.SubmitButton(System.String)">
            <overloads>This method has two overloads.</overloads>
             <summary>
             Creates a submit button.
             <code>&lt;input type="submit" value="valueArg"  /&gt;</code>
             </summary>
             <param name="value"><see cref="T:System.String"/> for <b>value</b> attribute.</param>
             <returns>HTML string with submit type <b>input</b> tag.</returns>
             <remarks>Calling <c>SubmitButton( "valueArg" )</c> results in:
             <code>&lt;input type="submit" value="valueArg"  /&gt;</code>
             </remarks>
             <example>This example shows how to use <b>SubmitButton</b>:
             <code>
             $HtmlHelper.SubmitButton( "valueArg" )
             </code>
             </example>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.SubmitButton(System.String,System.Collections.IDictionary)">
            <summary>
            Creates a submit button.
            <code>&lt;input type="submit" value="valueArg" key1="value1" key2="value2"  /&gt;</code>
            </summary>
            <param name="value"><see cref="T:System.String"/> for <b>value</b> attribute.</param>
            <param name="attributes">Additional attributes for the <b>input</b> tag.</param>
            <remarks>Calling <c>SubmitButton( "valueArg", IDictionary )</c> results in:
            <code>&lt;input type="submit" value="valueArg" key1="value1" key2="value2"  /&gt;</code>
            <para>
            <paramref name="attributes"/> is used to generate additional attributes for the <b>label</b> tag.
            <see cref="P:System.Collections.IDictionary.Keys"/> are used to name attributes.
            <see cref="P:System.Collections.IDictionary.Values"/> are used to assign those attributes values.
            </para>
            </remarks>
            <example>This example shows how to use <b>SubmitButton</b>:
            <code>
            $HtmlHelper.SubmitButton( "valueArg", IDictionary )
            </code>
            </example>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.Select(System.String)">
            <overloads>This method has two overloads.</overloads>
             <summary>
             Creates opening <b>select</b> tag.
             <code>&lt;select name="nameArg" id="nameArg"&gt;</code>
             </summary>
             <param name="name">Value for <b>name</b> and <b>id</b> attributes.</param>
             <returns>HTML string with opening <b>select</b> tag.</returns>
             <remarks>Calling <c>Select( "nameArg" )</c> results in:
             <code>&lt;select name="nameArg" id="nameArg"&gt;</code>
             </remarks>
             <example>This example shows how to use <b>Select</b> together with <see cref="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.EndSelect"/>:
             <code>
             $HtmlHelper.Select( "nameArg" )
             ...
             $HtmlHelper.EndSelect()
             </code>
             </example>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.Select(System.String,System.Collections.IDictionary)">
            <summary>
            Creates opening <b>select</b> tag.
            <code>&lt;select name="nameArg" id="nameArg" key1="value1" key2="value2" &gt;</code>
            </summary>
            <param name="name">Value for <b>name</b> and <b>id</b> attributes.</param>
            <param name="attributes">Additional attributes for the <b>select</b> tag.</param>
            <remarks>Calling <c>Select( "nameArg", IDictionary )</c> results in:
            <code>&lt;select name="nameArg" id="nameArg" key1="value1" key2="value2" &gt;</code>
            <para>
            <paramref name="attributes"/> is used to generate additional attributes for the <b>label</b> tag.
            <see cref="P:System.Collections.IDictionary.Keys"/> are used to name attributes.
            <see cref="P:System.Collections.IDictionary.Values"/> are used to assign those attributes values.
            </para>
            </remarks>
            <example>This example shows how to use <b>Select</b> together with <see cref="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.EndSelect"/>:
            <code>
            $HtmlHelper.Select( "nameArg", IDictionary )
            ...
            $HtmlHelper.EndSelect()
            </code>
            </example>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.EndSelect">
            <summary>
            Creates a closing <b>select</b> tag.
            </summary>
            <remarks>Calling <c>EndSelect()</c> results in:
            <code>&lt;/select&gt;</code>
            </remarks>
            <example>This example shows how to use <see cref="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.Select(System.String)"/> together with <b>EndSelect</b>:
            <code>
            $HtmlHelper.Select( "nameArg" )
            ...
            $HtmlHelper.EndSelect()
            </code>
            </example>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.OptionGroup(System.String)">
            <summary>
            Creates an opening <b>optgroup</b> element.
            </summary>
            <param name="label">The label attribute.</param>
            <returns>An opening <b>optgroup</b> element.</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.EndOptionGroup">
            <summary>
            Creates a closing <b>optgroup</b> element.
            </summary>
            <returns>A closing <b>optgroup</b> element.</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.CreateOption(System.String,System.Object)">
            <summary>
            TODO: Document this!
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.CreateOption(System.String,System.Object,System.Collections.IDictionary)">
            <summary>
            TODO: Document this!
            </summary>
            <remarks>
            Valid html attributes include: selected and disabled
            </remarks>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.CreateOptionsFromPrimitiveArray(System.Array,System.String)">
            <summary>
            Creates <b>option</b> elements from <see cref="T:System.Array"/>. Marks the
            option that matches the <paramref name="selected"/> argument (if provided).
            <code>
            &lt;option&gt;0&lt;/option&gt;
            &lt;option&gt;1&lt;/option&gt;
            ...
            &lt;option&gt;5&lt;/option&gt;
            &lt;option selected&gt;selectedArg&lt;/option&gt;
            &lt;option&gt;object&lt;/option&gt;
            </code>
            </summary>
            <param name="elems">Array of values for each <b>option</b> tag.</param>
            <param name="selected">Name of the <b>option</b> tag to mark selected.</param>
            <returns>HTML string with array of <b>option</b> tags.</returns>
            <remarks>Calling <c>CreateOptionsFromPrimitiveArray( Array, "selectedArg" )</c> results in:
            <code>
            &lt;option&gt;0&lt;/option&gt;
            &lt;option&gt;1&lt;/option&gt;
            &lt;option&gt;2&lt;/option&gt;
            &lt;option&gt;3&lt;/option&gt;
            &lt;option&gt;4&lt;/option&gt;
            &lt;option&gt;5&lt;/option&gt;
            &lt;option selected&gt;selectedArg&lt;/option&gt;
            &lt;option&gt;object&lt;/option&gt;
            </code>
            <para>
            Elements in the array are converted to <see cref="T:System.String"/> using <see cref="M:System.Text.StringBuilder.AppendFormat(System.String,System.Object)"/>.
            </para>
            </remarks>
            <example>This example shows how to use <b>CreateOptionsFromPrimitiveArray</b>:
            <code>
            $HtmlHelper.CreateOptionsFromPrimitiveArray( Array, "selectedArg" )
            </code>
            </example>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.CreateOptionsFromArray(System.Array,System.String,System.String)">
            <overloads>This method has two overloads.</overloads>
             <summary>
             Creates options elements from an <see cref="T:System.Array"/>.
             <code>
             &lt;option value="valueProp"&gt;textProp&lt;/option&gt;
             &lt;option value="0"&gt;textProp2&lt;/option&gt;
             &lt;option value="5"&gt;textProp3&lt;/option&gt;
             </code>
             <seealso cref="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.CreateOptions(System.Collections.ICollection,System.String,System.String)"/>
             </summary>
             <param name="elems">Collection of objects each of which describes an <b>option</b> tag.</param>
             <param name="textProperty">Name of the <paramref name="elems"/>
             objects property with the value for each <b>option</b> tag's
             text.</param>
             <param name="valueProperty">Name of the <paramref name="elems"/> objects property with the value for each
             <b>option</b> tag's <b>value</b> attribute value.</param>
             <returns>HTML string with array of <b>option</b> tags.</returns>
             
             <remarks>Calling <c>CreateOptionsFromArray( Array, "textPropertyArg",
             "valuePropertyArg", object )</c> with specific type objects results in:
             <code>
             &lt;option value="valueProp"&gt;textProp&lt;/option&gt;
             &lt;option value="0"&gt;textProp2&lt;/option&gt;
             &lt;option value="5"&gt;textProp3&lt;/option&gt;
             </code>
             <para>Calling <c>CreateOptionsFromArray( Array, "textPropertyArg",
             "valuePropertyArg", object )</c> with random type objects results in:
             <code>
             &lt;option&gt;0&lt;/option&gt;
             &lt;option&gt;1&lt;/option&gt;
             &lt;option&gt;2&lt;/option&gt;
             &lt;option&gt;3&lt;/option&gt;
             &lt;option&gt;4&lt;/option&gt;
             &lt;option&gt;5&lt;/option&gt;
             &lt;option&gt;object&lt;/option&gt;
             &lt;option&gt;MR.Logic.Controllers.HtmlHelperController+SampleClass&lt;/option&gt;
             </code>
             Notice that the last <b>option</b> was generated from an object of the type
             with the properties specified by <paramref name="textProperty"/> and <pararef name="valueProperty"/>, but the method
             is already in the mode of working with random type objects.
             <note>Explanation bellow describes two different modes of working with the method.</note>
             </para>
             <para>There are two possible usages of the method depending on
             the types of <see cref="T:System.Object"/>s which can be present in
             <paramref name="elems"/>:
             <list type="definition">
             <item>
            		<term>Random type objects</term>
            		<description>Array is full of
             random type objects. Properties specified by <paramref name="textProperty"/> and <pararef name="valueProperty"/> aren't
             used. Instead <b>value</b> argument is ommited and <see cref="M:System.Object.ToString"/> is invoked on each item in <paramref name="elems"/> to retrieve text for an <b>option</b> tag.
            		</description>
            	</item>
             <item>
            		<term>Single type objects</term>
            		<description>Array is objects
             of one time. In this case <paramref name="textProperty"/> and
             <paramref name="valueProperty"/> can specify the names of the
             properties of that type to use for <b>option</b> tags
             generation.
            		</description>
            	</item>
             </list>
             <note>You cannot mix <i>random type objects</i> and <i>specific type objects</i>.
             <b>CreateOptionsFromArray</b>
             is looking at the first item in the <paramref name="elems"/>
             collection to get <see cref="T:System.Reflection.MethodInfo"/> to access specified
             properties. If usage is mixed either an unexpected exception will be
             thrown or options will have unexpected strings.
             </note>
             </para>
             <para><b>CreateOptionsFromArray</b> relies on <see cref="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.CreateOptions(System.Collections.ICollection,System.String,System.String)"/> to generate
             all <b>option</b> tags.</para>
             </remarks>
             <example>This example shows how to use <b>CreateOptions</b>:
             <code>
             $HtmlHelper.CreateOptionsFromArray( ICollection, "textPropertyArg", "valuePropertyArg" )
             </code>
             </example>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.CreateOptionsFromArray(System.Array,System.String,System.String,System.Object)">
            <summary>
            Creates options elements from an <see cref="T:System.Array"/>.
            <code>
            &lt;option value="valueProp" selected&gt;textProp&lt;/option&gt;
            &lt;option value="0"&gt;textProp2&lt;/option&gt;
            &lt;option value="5"&gt;textProp3&lt;/option&gt;
            </code>
            <seealso cref="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.CreateOptions(System.Collections.ICollection,System.String,System.String,System.Object)"/>
            </summary>
            <param name="elems">Collection of objects each of which describes an <b>option</b> tag.</param>
            <param name="textProperty">Name of the <paramref name="elems"/>
            objects property with the value for each <b>option</b> tag's
            text.</param>
            <param name="valueProperty">Name of the <paramref name="elems"/> objects property with the value for each
            <b>option</b> tag's <b>value</b> attribute value.</param>
            <param name="selectedValue"><see cref="T:System.Object"/> indicating which
            <b>option</b> tag is to be marked with <b>selected</b>
            attribute.</param>
            <returns>HTML string with array of <b>option</b> tags.</returns>
            
            <remarks>Calling <c>CreateOptionsFromArray( Array, "textPropertyArg",
            "valuePropertyArg", object )</c> with specific type objects results in:
            <code>
            &lt;option value="valueProp" selected&gt;textProp&lt;/option&gt;
            &lt;option value="0"&gt;textProp2&lt;/option&gt;
            &lt;option value="5"&gt;textProp3&lt;/option&gt;
            </code>
            <para>Calling <c>CreateOptionsFromArray( Array, "textPropertyArg",
            "valuePropertyArg", object )</c> with random type objects results in:
            <code>
            &lt;option&gt;0&lt;/option&gt;
            &lt;option&gt;1&lt;/option&gt;
            &lt;option&gt;2&lt;/option&gt;
            &lt;option&gt;3&lt;/option&gt;
            &lt;option&gt;4&lt;/option&gt;
            &lt;option&gt;5&lt;/option&gt;
            &lt;option selected&gt;object&lt;/option&gt;
            &lt;option&gt;MR.Logic.Controllers.HtmlHelperController+SampleClass&lt;/option&gt;
            </code>
            Notice that the last <b>option</b> was generated from an object of the type
            with the properties specified by <paramref name="textProperty"/> and <pararef name="valueProperty"/>, but the method
            is already in the mode of working with random type objects.
            <note>Explanation bellow describes two different modes of working with the method.</note>
            </para>
            <para>There are two possible usages of the method depending on
            the types of <see cref="T:System.Object"/>s which can be present in
            <paramref name="elems"/>:
            <list type="definition">
            <item>
            	<term>Random type objects</term>
            	<description>Array is full of
            random type objects. Properties specified by <paramref name="textProperty"/> and <pararef name="valueProperty"/> aren't
            used. Instead <b>value</b> argument is ommited and <see cref="M:System.Object.ToString"/> is invoked on each item in <paramref name="elems"/> to retrieve text for an <b>option</b> tag.
            	</description>
            </item>
            <item>
            	<term>Single type objects</term>
            	<description>Array is objects
            of one time. In this case <paramref name="textProperty"/> and
            <paramref name="valueProperty"/> can specify the names of the
            properties of that type to use for <b>option</b> tags
            generation.
            	</description>
            </item>
            </list>
            <note>You cannot mix <i>random type objects</i> and <i>specific type objects</i>.
            <b>CreateOptionsFromArray</b>
            is looking at the first item in the <paramref name="elems"/>
            collection to get <see cref="T:System.Reflection.MethodInfo"/> to access specified
            properties. If usage is mixed either an unexpected exception will be
            thrown or options will have unexpected strings.
            </note>
            </para>
            <para><b>CreateOptionsFromArray</b> relies on <see cref="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.CreateOptions(System.Collections.ICollection,System.String,System.String,System.Object)"/> to generate
            all <b>option</b> tags.</para>
            </remarks>
            <example>This example shows how to use <b>CreateOptions</b>:
            <code>
            $HtmlHelper.CreateOptionsFromArray( ICollection, "textPropertyArg", "valuePropertyArg", object )
            </code>
            </example>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.CreateOptions(System.Collections.ICollection,System.String,System.String)">
            <overloads>This method has two overloads.</overloads>
             <summary>
             Creates options elements from an <see cref="T:System.Collections.ICollection"/>.
             <code>
             &lt;option value="valueProp"&gt;textProp&lt;/option&gt;
             &lt;option value="0"&gt;textProp2&lt;/option&gt;
             &lt;option value="5"&gt;textProp3&lt;/option&gt;
             </code>
             </summary>
             <param name="elems">Collection of objects each of which describes an <b>option</b> tag.</param>
             <param name="textProperty">Name of the <paramref name="elems"/>
             objects property with the value for each <b>option</b> tag's
             text.</param>
             <param name="valueProperty">Name of the <paramref name="elems"/> objects property with the value for each
             <b>option</b> tag's <b>value</b> attribute value.</param>
             <returns>HTML string with array of <b>option</b> tags.</returns>
             
             <remarks>Calling <c>CreateOptions( ICollection, "textPropertyArg",
             "valuePropertyArg", object )</c> with specific type objects results in:
             <code>
             &lt;option value="valueProp"&gt;textProp&lt;/option&gt;
             &lt;option value="0"&gt;textProp2&lt;/option&gt;
             &lt;option value="5"&gt;textProp3&lt;/option&gt;
             </code>
             <para>Calling <c>CreateOptions( ICollection, "textPropertyArg",
             "valuePropertyArg", object )</c> with random type objects results in:
             <code>
             &lt;option&gt;0&lt;/option&gt;
             &lt;option&gt;1&lt;/option&gt;
             &lt;option&gt;2&lt;/option&gt;
             &lt;option&gt;3&lt;/option&gt;
             &lt;option&gt;4&lt;/option&gt;
             &lt;option&gt;5&lt;/option&gt;
             &lt;option&gt;object&lt;/option&gt;
             &lt;option&gt;MR.Logic.Controllers.HtmlHelperController+SampleClass&lt;/option&gt;
             </code>
             Notice that the last <b>option</b> was generated from an object of the type
             with the properties specified by <paramref name="textProperty"/> and <pararef name="valueProperty"/>, but the method
             is already in the mode of working with random type objects.
             <note>Explanation bellow describes two different modes of working with the method.</note>
             </para>
             <para>There are two possible usages of the method depending on
             the types of <see cref="T:System.Object"/>s which can be present in
             <paramref name="elems"/>:
             <list type="definition">
             <item>
            		<term>Random type objects</term>
            		<description>Array is full of
             random type objects. Properties specified by <paramref name="textProperty"/> and <pararef name="valueProperty"/> aren't
             used. Instead <b>value</b> argument is ommited and <see cref="M:System.Object.ToString"/> is invoked on each item in <paramref name="elems"/> to retrieve text for an <b>option</b> tag.
            		</description>
            	</item>
             <item>
            		<term>Single type objects</term>
            		<description>Array is objects
             of one time. In this case <paramref name="textProperty"/> and
             <paramref name="valueProperty"/> can specify the names of the
             properties of that type to use for <b>option</b> tags
             generation.
            		</description>
            	</item>
             </list>
             <note>You cannot mix <i>random type objects</i> and <i>specific type objects</i>. <b>CreateOptions</b>
             is looking at the first item in the <paramref name="elems"/>
             collection to get <see cref="T:System.Reflection.MethodInfo"/> to access specified
             properties. If usage is mixed either an unexpected exception will be
             thrown or options will have unexpected strings.
             </note>
             </para>
             </remarks>
             <example>This example shows how to use <b>CreateOptions</b>:
             <code>
             $HtmlHelper.CreateOptions( ICollection, "textPropertyArg", "valuePropertyArg" )
             </code>
             </example>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.CreateOptions(System.Collections.ICollection,System.String,System.String,System.Object)">
            <summary>
            Creates options elements from an <see cref="T:System.Collections.ICollection"/>.
            <code>
            &lt;option value="valueProp" selected&gt;textProp&lt;/option&gt;
            &lt;option value="0"&gt;textProp2&lt;/option&gt;
            &lt;option value="5"&gt;textProp3&lt;/option&gt;
            </code>
            </summary>
            <param name="elems">Collection of objects each of which describes an <b>option</b> tag.</param>
            <param name="textProperty">Name of the <paramref name="elems"/>
            objects property with the value for each <b>option</b> tag's
            text.</param>
            <param name="valueProperty">Name of the <paramref name="elems"/> objects property with the value for each
            <b>option</b> tag's <b>value</b> attribute value.</param>
            <param name="selectedValue"><see cref="T:System.Object"/> indicating which
            <b>option</b> tag is to be marked with <b>selected</b>
            attribute.</param>
            <returns>HTML string with array of <b>option</b> tags.</returns>
            
            <remarks>Calling <c>CreateOptions( ICollection, "textPropertyArg",
            "valuePropertyArg", object )</c> with specific type objects results in:
            <code>
            &lt;option value="valueProp" selected&gt;textProp&lt;/option&gt;
            &lt;option value="0"&gt;textProp2&lt;/option&gt;
            &lt;option value="5"&gt;textProp3&lt;/option&gt;
            </code>
            <para>Calling <c>CreateOptions( ICollection, "textPropertyArg",
            "valuePropertyArg", object )</c> with random type objects results in:
            <code>
            &lt;option&gt;0&lt;/option&gt;
            &lt;option&gt;1&lt;/option&gt;
            &lt;option&gt;2&lt;/option&gt;
            &lt;option&gt;3&lt;/option&gt;
            &lt;option&gt;4&lt;/option&gt;
            &lt;option&gt;5&lt;/option&gt;
            &lt;option selected&gt;object&lt;/option&gt;
            &lt;option&gt;MR.Logic.Controllers.HtmlHelperController+SampleClass&lt;/option&gt;
            </code>
            Notice that the last <b>option</b> was generated from an object of the type
            with the properties specified by <paramref name="textProperty"/> and <pararef name="valueProperty"/>, but the method
            is already in the mode of working with random type objects.
            <note>Explanation bellow describes two different modes of working with the method.</note>
            </para>
            <para>There are two possible usages of the method depending on
            the types of <see cref="T:System.Object"/>s which can be present in
            <paramref name="elems"/>:
            <list type="definition">
            <item>
            	<term>Random type objects</term>
            	<description>Array is full of
            random type objects. Properties specified by <paramref name="textProperty"/> and <pararef name="valueProperty"/> aren't
            used. Instead <b>value</b> argument is ommited and <see cref="M:System.Object.ToString"/> is invoked on each item in <paramref name="elems"/> to retrieve text for an <b>option</b> tag.
            	</description>
            </item>
            <item>
            	<term>Single type objects</term>
            	<description>Array is objects
            of one time. In this case <paramref name="textProperty"/> and
            <paramref name="valueProperty"/> can specify the names of the
            properties of that type to use for <b>option</b> tags
            generation.
            	</description>
            </item>
            </list>
            <note>You cannot mix <i>random type objects</i> and <i>specific type objects</i>.
            <b>CreateOptions</b>
            is looking at the first item in the <paramref name="elems"/>
            collection to get <see cref="T:System.Reflection.MethodInfo"/> to access specified
            properties. If usage is mixed either an unexpected exception will be
            thrown or options will have unexpected strings.
            </note>
            </para>
            </remarks>
            <example>This example shows how to use <b>CreateOptions</b>:
            <code>
            $HtmlHelper.CreateOptions( ICollection, "textPropertyArg", "valuePropertyArg", object )
            </code>
            </example>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.IsSelected(System.Object,System.Object,System.Boolean)">
            <summary>
            Determines whether the specified value is selected.
            </summary>
            <param name="value">Value to be tested.</param>
            <param name="selectedValue">Selected value.</param>
            <param name="isMultiple"><see langword="true"/> if <paramref name="selectedValue"/> is
            <see cref="P:System.Type.IsArray"/>; otherwise, <see langword="false"/>.</param>
            <returns>
            	<see langword="true"/> if the specified <paramref name="value"/> is selected; otherwise, <see langword="false"/>.
            </returns>
            <remarks>Specified <paramref name="value"/> is selected if it <see cref="M:System.Object.Equals(System.Object)"/>
            to the <paramref name="selectedValue"/>. Or if <paramref name="selectedValue"/> is an
            array <paramref name="value"/> is selected if <see cref="M:System.Array.IndexOf(System.Array,System.Object)"/> can find it
            in <paramref name="selectedValue"/>.</remarks>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.GetMethod(System.Object,System.String)">
            <summary>
            Gets the property get method.
            </summary>
            <param name="elem">Object specifying the type for which to get the method.</param>
            <param name="property">Property name.</param>
            <returns><see cref="T:System.Reflection.MethodInfo"/> to be used to retrieve the property value.
            If <paramref name="property"/> is <c>null</c> <c>null</c> is returned.</returns>
            <remarks>This method is used to get the <see cref="T:System.Reflection.MethodInfo"/> to retrieve
            specified property from the specified type.</remarks>
            <exception cref="T:System.ArgumentNullException">Thrown is <paramref name="elem"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.BuildUnorderedList(System.Collections.ICollection)">
            <overloads>This method has two overloads.</overloads>
             <summary>
             Builds an unordered <b>ul</b> list from supplied <see cref="T:System.Collections.ICollection"/>.
             <code>
             &lt;ul&gt;
             &lt;li&gt;0&lt;/li&gt;
             ...
             &lt;li&gt;object&lt;/li&gt;
             &lt;/ul&gt;
             </code>
             </summary>
             <param name="elements">Collection with items to use for the list generation.</param>
             <returns>HTML string with <b>ul</b> tag list.</returns>
             <remarks>Calling <c>BuildUnorderedList( ICollection )</c> results in:
             <code>
             &lt;ul&gt;
             &lt;li&gt;0&lt;/li&gt;
             &lt;li&gt;1&lt;/li&gt;
             &lt;li&gt;2&lt;/li&gt;
             &lt;li&gt;3&lt;/li&gt;
             &lt;li&gt;4&lt;/li&gt;
             &lt;li&gt;5&lt;/li&gt;
             &lt;li&gt;object&lt;/li&gt;
             &lt;/ul&gt;
             </code>
             <para>Items in <paramref name="elements"/> are converted to string through
             <see cref="M:System.Object.ToString"/>.</para>
             </remarks>
             <example>This example shows how to use <b>BuildUnorderedList</b>:
             <code>
             $HtmlHelper.BuildUnorderedList( ICollection )
             </code>
             </example>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.BuildUnorderedList(System.Collections.ICollection,System.String,System.String)">
            <summary>
            Builds an unordered <b>ul</b> list from supplied <see cref="T:System.Collections.ICollection"/> with
            <b>ul</b> and <b>li</b> tags CSS class set to supplied attributes.
            <code>
            &lt;ol class="styleClassArg"&gt;
            &lt;li class="itemClassArg"&gt;0&lt;/li&gt;
            ...
            &lt;li class="itemClassArg"&gt;object&lt;/li&gt;
            &lt;/ol&gt;
            </code>
            </summary>
            <param name="elements">Collection with items to use for the list generation.</param>
            <param name="styleClass">CSS class name of the list <b>ul</b> tag.</param>
            <param name="itemClass">CSS class name of the list item <b>li</b> tag.</param>
            <returns>HTML string with <b>ul</b> tag list.</returns>
            <remarks>Calling <c>BuildUnorderedList( ICollection, "styleClassArg", "itemClassArg" )</c> results in:
            <code>
            &lt;ol class="styleClassArg"&gt;
            &lt;li class="itemClassArg"&gt;0&lt;/li&gt;
            &lt;li class="itemClassArg"&gt;1&lt;/li&gt;
            &lt;li class="itemClassArg"&gt;2&lt;/li&gt;
            &lt;li class="itemClassArg"&gt;3&lt;/li&gt;
            &lt;li class="itemClassArg"&gt;4&lt;/li&gt;
            &lt;li class="itemClassArg"&gt;5&lt;/li&gt;
            &lt;li class="itemClassArg"&gt;object&lt;/li&gt;
            &lt;/ol&gt;
            </code>
            <para>Items in <paramref name="elements"/> are converted to string through
            <see cref="M:System.Object.ToString"/>.</para>
            </remarks>
            <example>This example shows how to use <b>BuildOrderedList</b>:
            <code>
            $HtmlHelper.BuildUnorderedList( ICollection, "styleClassArg", "itemClassArg" )
            </code>
            </example>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.BuildOrderedList(System.Collections.ICollection)">
            <overloads>This method has two overloads.</overloads>
             <summary>
             Builds an ordered <b>ol</b> list from supplied <see cref="T:System.Collections.ICollection"/>.
             <code>
             &lt;ol&gt;
             &lt;li&gt;0&lt;/li&gt;
             ...
             &lt;li&gt;object&lt;/li&gt;
             &lt;/ol&gt;
             </code>
             </summary>
             <param name="elements">Collection with items to use for the list generation.</param>
             <returns>HTML string with <b>ol</b> tag list.</returns>
             <remarks>Calling <c>BuildOrderedList( ICollection )</c> results in:
             <code>
             &lt;ol&gt;
             &lt;li&gt;0&lt;/li&gt;
             &lt;li&gt;1&lt;/li&gt;
             &lt;li&gt;2&lt;/li&gt;
             &lt;li&gt;3&lt;/li&gt;
             &lt;li&gt;4&lt;/li&gt;
             &lt;li&gt;5&lt;/li&gt;
             &lt;li&gt;object&lt;/li&gt;
             &lt;/ol&gt;
             </code>
             <para>Items in <paramref name="elements"/> are converted to string through
             <see cref="M:System.Object.ToString"/>.</para>
             </remarks>
             <example>This example shows how to use <b>BuildOrderedList</b>:
             <code>
             $HtmlHelper.BuildOrderedList( ICollection )
             </code>
             </example>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.BuildOrderedList(System.Collections.ICollection,System.String,System.String)">
            <summary>
            Builds an ordered <b>ol</b> list from supplied <see cref="T:System.Collections.ICollection"/> with
            <b>ol</b> and <b>li</b> tags CSS class set to supplied attributes.
            <code>
            &lt;ol class="styleClassArg"&gt;
            &lt;li class="itemClassArg"&gt;0&lt;/li&gt;
            ...
            &lt;li class="itemClassArg"&gt;object&lt;/li&gt;
            &lt;/ol&gt;
            </code>
            </summary>
            <param name="elements">Collection with items to use for the list generation.</param>
            <param name="styleClass">CSS class name of the list <b>ol</b> tag.</param>
            <param name="itemClass">CSS class name of the list item <b>li</b> tag.</param>
            <returns>HTML string with <b>ol</b> tag list.</returns>
            <remarks>Calling <c>BuildOrderedList( ICollection, "styleClassArg", "itemClassArg" )</c> results in:
            <code>
            &lt;ol class="styleClassArg"&gt;
            &lt;li class="itemClassArg"&gt;0&lt;/li&gt;
            &lt;li class="itemClassArg"&gt;1&lt;/li&gt;
            &lt;li class="itemClassArg"&gt;2&lt;/li&gt;
            &lt;li class="itemClassArg"&gt;3&lt;/li&gt;
            &lt;li class="itemClassArg"&gt;4&lt;/li&gt;
            &lt;li class="itemClassArg"&gt;5&lt;/li&gt;
            &lt;li class="itemClassArg"&gt;object&lt;/li&gt;
            &lt;/ol&gt;
            </code>
            <para>Items in <paramref name="elements"/> are converted to string through
            <see cref="M:System.Object.ToString"/>.</para>
            </remarks>
            <example>This example shows how to use <b>BuildOrderedList</b>:
            <code>
            $HtmlHelper.BuildOrderedList( ICollection, "styleClassArg", "itemClassArg" )
            </code>
            </example>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.BuildList(System.String,System.Collections.ICollection,System.String,System.String)">
            <summary>
            Builds a list with list tag specified by <paramref name="tag"/>
            from supplied <see cref="T:System.Collections.ICollection"/> with
            list tag and <b>li</b> tags CSS class set to supplied attributes.
            <code>
            &lt;listTag class="styleClassArg"&gt;
            &lt;li class="itemClassArg"&gt;0&lt;/li&gt;
            ...
            &lt;li class="itemClassArg"&gt;object&lt;/li&gt;
            &lt;/listTag&gt;
            </code>
            </summary>
            <param name="tag">List tag name.</param>
            <param name="elements">Collection with items to use for the list generation.</param>
            <param name="styleClass">CSS class name of the list <b>ol</b> tag.</param>
            <param name="itemClass">CSS class name of the list item <b>li</b> tag.</param>
            <returns>HTML string with list of the requested type.</returns>
            <remarks>This method is can be used to generate custom type HTML list.
            Currently HTML support only two types of lists ordered (<b>ol</b> tag) and unodered
            (<b>ul</b>tag). In general this method should be used by other methods responsible
            for constructing some specific list.
            <para>
            Calling <c>BuildList( "listTag", ICollection, "styleClassArg", "itemClassArg" )</c> results in:
            <code>
            &lt;listTag class="styleClassArg"&gt;
            &lt;li class="itemClassArg"&gt;0&lt;/li&gt;
            &lt;li class="itemClassArg"&gt;1&lt;/li&gt;
            &lt;li class="itemClassArg"&gt;2&lt;/li&gt;
            &lt;li class="itemClassArg"&gt;3&lt;/li&gt;
            &lt;li class="itemClassArg"&gt;4&lt;/li&gt;
            &lt;li class="itemClassArg"&gt;5&lt;/li&gt;
            &lt;li class="itemClassArg"&gt;object&lt;/li&gt;
            &lt;/listTag&gt;
            </code>
            </para>
            <para>Items in <paramref name="elements"/> are converted to string through
            <see cref="M:System.Object.ToString"/>.</para>
            </remarks>
            <example>This example shows how to use <b>BuildList</b>:
            <code>
            BuildList("ol", elements, styleClass, itemClass);
            </code>
            </example>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.HtmlHelper.BuildListItem(System.String,System.String)">
            <summary>
            Generates a list item <b>li</b> tag.
            <code>
            &lt;li class=&quot;itemClassArg&quot;&gt;object&lt;/li&gt;
            </code>
            </summary>
            <param name="item">Item text.</param>
            <param name="itemClass">Item CSS class name.</param>
            <returns>HTML string with a single <b>li</b> tag.</returns>
            <remarks>This method should be used to assist list generation.
            <para>
            Calling <c>BuildListItem( "object", "itemClassArg" )</c> results in:
            <code>
            &lt;li class=&quot;itemClassArg&quot;&gt;object&lt;/li&gt;
            </code>
            </para>
            </remarks>
            <example>This example shows how to use <b>BuildListItem</b>:
            <code>
            BuildListItem(item.ToString(), itemClass);
            </code>
            </example>
        </member>
        <member name="T:Castle.MonoRail.Framework.Helpers.IJSCollectionGenerator">
            <summary>
            Operations to act on a collection/array of DOM elements. 
            </summary>
            <remarks>
            Not really implemented
            </remarks>
        </member>
        <member name="P:Castle.MonoRail.Framework.Helpers.IJSCollectionGenerator.ParentGenerator">
            <summary>
            Gets the parent generator.
            </summary>
            <value>The parent generator.</value>
        </member>
        <member name="T:Castle.MonoRail.Framework.Helpers.IJSElementGenerator">
            <summary>
            Depicts the operations supported by the element Js generator.
            </summary>
            
            <remarks>
            In practice you can access this generator by using the element accessor. 
            For example (using nvelocity syntax):
            
            <code>
              $page.el('element id') -> IJSElementGenerator instance
            </code>
            
            </remarks>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.IJSElementGenerator.ReplaceHtml(System.Object)">
            <summary>
            Replaces the content of the element.
            </summary>
            
            <example>
            The following example uses nvelocity syntax:
            
            <code>
              $page.el('elementid').ReplaceHtml("%{partial='shared/newmessage.vm'}")
            </code>
            </example>
            
            <param name="renderOptions">Defines what to render</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.IJSElementGenerator.Replace(System.Object)">
            <summary>
            Replaces the entire element's content -- and not only its innerHTML --
            by the content evaluated.
            </summary>
            
            <example>
            The following example uses nvelocity syntax:
            
            <code>
              $page.el('messagediv').Replace("%{partial='shared/newmessage.vm'}")
            </code>
            </example>
            
            <param name="renderOptions">Defines what to render</param>
        </member>
        <member name="P:Castle.MonoRail.Framework.Helpers.IJSElementGenerator.ParentGenerator">
            <summary>
            Gets the parent generator.
            </summary>
            <value>The parent generator.</value>
        </member>
        <member name="T:Castle.MonoRail.Framework.Helpers.IJSGenerator">
            <summary>
            Depicts the contract for javascript generators.
            </summary>
            
            <remarks>
            <para>
            Urls can be specified as string or a dictionary. If the latter, the <see cref="T:Castle.MonoRail.Framework.Helpers.UrlHelper"/>
            is used. See <see cref="M:Castle.MonoRail.Framework.Services.DefaultUrlBuilder.BuildUrl(Castle.MonoRail.Framework.UrlInfo,System.Collections.IDictionary)"/>
            </para>
            
            <para>
            The <c>renderOptions</c> is also a common parameter. If you pass a string, 
            the string will be rendered. If it is a dictionary, it instructs the infrastructure to
            render a partial content. The dictionary must contain an entry named <c>partial</c>
            with the absolute path to the view to render.
            </para>
            
            </remarks>
            
            <example>
            The following is an example of using it with a nvelocity 
            syntax and renders static content:
            
            <code>
              $page.InsertHtml('Bottom', 'messagestable', "Message sent")
            </code>
            
            <para>
            The following uses a partial view:
            </para>
            
            <code>
              $page.InsertHtml('Bottom', 'messagestable', "%{partial='shared/newmessage.vm'}")
            </code>
            
            <para>
            The following redirects to a static page
            </para>
            
            <code>
              $page.RedirectTo('about.aspx')
            </code>
            
            <para>
            The following redirects using the <see cref="T:Castle.MonoRail.Framework.Helpers.UrlHelper"/>
            </para>
            
            <code>
              $page.RedirectTo("%{controller='Home',action='index'}")
            </code>
            
            </example>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.IJSGenerator.InsertHtml(System.String,System.String,System.Object)">
            <summary>
            Inserts a content snippet relative to the element specified by the <paramref name="id"/>
            
            <para>
            The supported positions are
            Top, After, Before, Bottom
            </para>
            </summary>
            
            <example>
            The following example uses nvelocity syntax:
            
            <code>
              $page.InsertHtml('Bottom', 'messagestable', "%{partial='shared/newmessage.vm'}")
            </code>
            </example>
            
            <param name="position">The position to insert the content relative to the element id</param>
            <param name="id">The target element id</param>
            <param name="renderOptions">Defines what to render</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.IJSGenerator.ReplaceHtml(System.String,System.Object)">
            <summary>
            Replaces the content of the specified target element.
            </summary>
            
            <example>
            The following example uses nvelocity syntax:
            
            <code>
              $page.ReplaceHtml('messagediv', "%{partial='shared/newmessage.vm'}")
            </code>
            </example>
            
            <param name="id">The target element id</param>
            <param name="renderOptions">Defines what to render</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.IJSGenerator.Replace(System.String,System.Object)">
            <summary>
            Replaces the entire target element -- and not only its innerHTML --
             by the content evaluated.
            </summary>
            
            <example>
            The following example uses nvelocity syntax:
            
            <code>
              $page.Replace('messagediv', "%{partial='shared/newmessage.vm'}")
            </code>
            </example>
            
            <param name="id">The target element id</param>
            <param name="renderOptions">Defines what to render</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.IJSGenerator.Show(System.String[])">
            <summary>
            Shows the specified elements.
            </summary>
            
            <remarks>
            The elements must exist.
            </remarks>
            
            <example>
            The following example uses nvelocity syntax:
            
            <code>
              $page.Show('div1', 'div2')
            </code>
            </example>
            
            <param name="ids">The elements ids.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.IJSGenerator.Hide(System.String[])">
            <summary>
            Hides the specified elements.
            </summary>
            
            <remarks>
            The elements must exist.
            </remarks>
            
            <example>
            The following example uses nvelocity syntax:
            
            <code>
              $page.Hide('div1', 'div2')
            </code>
            </example>
            
            <param name="ids">The elements ids.</param>		
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.IJSGenerator.Toggle(System.String[])">
            <summary>
            Toggles the display status of the specified elements.
            </summary>
            
            <remarks>
            The elements must exist.
            </remarks>
            
            <example>
            The following example uses nvelocity syntax:
            
            <code>
              $page.Toggle('div1', 'div2')
            </code>
            </example>
            
            <param name="ids">The elements ids.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.IJSGenerator.Remove(System.String[])">
            <summary>
            Remove the specified elements from the DOM.
            </summary>
            
            <remarks>
            The elements must exist.
            </remarks>
            
            <example>
            The following example uses nvelocity syntax:
            
            <code>
              $page.Remove('div1', 'div2')
            </code>
            </example>
            
            <param name="ids">The elements ids.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.IJSGenerator.Alert(System.Object)">
            <summary>
            Shows a JS alert
            </summary>
            
            <example>
            The following example uses nvelocity syntax:
            
            <code>
              $page.Alert('You won a Mercedez')
            </code>
            </example>
            
            <param name="message">The message to display.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.IJSGenerator.RedirectTo(System.Object)">
            <summary>
            Redirects to an url using the <c>location.href</c>.
            This is required as most ajax libs don't care for the redirect status
            in the http reply.
            </summary>
            
            <example>
            The following redirects to a static page
            
            <code>
              $page.RedirectTo('about.aspx')
            </code>
            
            <para>
            The following redirects using the <see cref="T:Castle.MonoRail.Framework.Helpers.UrlHelper"/>
            </para>
            
            <code>
              $page.RedirectTo("%{controller='Home',action='index'}")
            </code>
            </example>
            
            <param name="url">The URL.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.IJSGenerator.ReApply">
            <summary>
            Re-apply Behaviour css' rules.
            </summary>
            <remarks>
            Only makes sense if you are using the Behaviour javascript library.
            </remarks>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.IJSGenerator.VisualEffect(System.String,System.String,System.Collections.IDictionary)">
            <summary>
            Generates a call to a scriptaculous' visual effect. 
            </summary>
            
            <seealso cref="T:Castle.MonoRail.Framework.Helpers.ScriptaculousHelper"/>
            
            <example>
            The following example uses nvelocity syntax:
            
            <code>
              $page.VisualEffect('ToggleSlide', 'myelement')
            </code>
            
            <para>
            This is especially useful to show which elements 
            where updated in an ajax call.
            </para>
            
            <code>
              $page.ReplaceHtml('mydiv', "Hey, I've changed")
              $page.VisualEffect('Highlight', 'mydiv')
            </code>
            
            </example>
            
            <param name="name">The effect name.</param>
            <param name="element">The target element.</param>
            <param name="options">The optional options.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.IJSGenerator.VisualEffectDropOut(System.String,System.Collections.IDictionary)">
            <summary>
            Generates a call to a scriptaculous' drop out visual effect. 
            </summary>
            
            <seealso cref="T:Castle.MonoRail.Framework.Helpers.ScriptaculousHelper"/>
            
            <param name="element">The target element.</param>
            <param name="options">The optional options.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.IJSGenerator.Assign(System.String,System.String)">
            <summary>
            Assigns a javascript variable with the expression.
            </summary>
            
            <example>
            The following example uses nvelocity syntax:
            
            <code>
              $page.Assign('myvariable', '10')
            </code>
            
            <para>
            Which outputs:
            </para>
            
            <code>
              myvariable = 10;
            </code>
            
            <para>
            With strings you can escape strings:
            </para>
            
            <code>
              $page.Assign('myvariable', '\'Hello world\'')
            </code>
            
            <para>
            Which outputs:
            </para>
            
            <code>
              myvariable = 'Hello world';
            </code>
            
            </example>
            
            <param name="variable">The target variable</param>
            <param name="expression">The right side expression</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.IJSGenerator.Declare(System.String)">
            <summary>
            Declares the specified variable as null.
            </summary>
            
            <seealso cref="M:Castle.MonoRail.Framework.Helpers.IJSGenerator.Assign(System.String,System.String)"/>
            
            <param name="variable">The variable name.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.IJSGenerator.Call(System.Object,System.Object[])">
            <summary>
            Calls the specified function with the optional arguments.
            </summary>
            
            <example>
            The following example uses nvelocity syntax:
            
            <code>
              $page.call('myJsFunctionAlreadyDeclared', '10', "'message'", $somethingfrompropertybag, $anothermessage.to_squote)
            </code>
            
            <para>
            Which outputs:
            </para>
            
            <code>
              myJsFunctionAlreadyDeclared(10, 'message', 1001, 'who let the dogs out?')
            </code>
            
            </example>
            
            <param name="function">The function name.</param>
            <param name="args">The arguments.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.IJSGenerator.Render(System.Object)">
            <summary>
            Outputs the content using the renderOptions approach.
            
            <para>
            If the renderOptions is a string, the content is escaped and quoted.
            </para>
            
            <para>
            If the renderOptions is a dictionary, we extract the key <c>partial</c>
            and evaluate the template it points to. The content is escaped and quoted.
            </para>
            
            </summary>
            
            <example>
            The following example uses nvelocity syntax:
            
            <code>
              $page.Call('myJsFunction', $page.render("%{partial='shared/newmessage.vm'}") )
            </code>
            
            <para>
            Which outputs:
            </para>
            
            <code>
              myJsFunction('the content from the newmessage partial view template')
            </code>
            
            </example>
            
            <param name="renderOptions">The render options.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.IJSGenerator.Write(System.String)">
            <summary>
            Writes the content specified to the generator instance
            </summary>
            
            <remarks>
            This is for advanced scenarios and for the infrastructure. Usually not useful.
            </remarks>
            
            <param name="content">The content.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.IJSGenerator.AppendLine(System.String)">
            <summary>
            Writes the content specified to the generator instance
            </summary>
            
            <remarks>
            This is for advanced scenarios and for the infrastructure. Usually not useful.
            </remarks>
            <param name="content">The content.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.IJSGenerator.ToString">
            <summary>
            Dump the operations recorded so far as javascript code. 
            </summary>
            
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.IJSGenerator.CreateCollectionGenerator(System.String)">
            <summary>
            Creates a generator for a collection.
            </summary>
            <param name="root">The root expression.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.IJSGenerator.CreateElementGenerator(System.String)">
            <summary>
            Creates a generator for an element.
            </summary>
            <param name="root">The root expression.</param>
            <returns></returns>
        </member>
        <member name="P:Castle.MonoRail.Framework.Helpers.IJSGenerator.Lines">
            <summary>
            Gets the js lines.
            </summary>
            <value>The js lines.</value>
        </member>
        <member name="T:Castle.MonoRail.Framework.Helpers.IPaginatedPage">
            <summary>
            Represents a page of a bigger set
            </summary>
            <remarks>
            Indexes are zero based.
            </remarks>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.IPaginatedPage.HasPage(System.Int32)">
            <summary>
            Checks whether the specified page exists.
            Useful for Google-like pagination.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.Helpers.IPaginatedPage.CurrentIndex">
            <summary>
            The index this page represents
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.Helpers.IPaginatedPage.LastIndex">
            <summary>
            The last index available on the set
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.Helpers.IPaginatedPage.NextIndex">
            <summary>
            The next index (from this page)
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.Helpers.IPaginatedPage.PreviousIndex">
            <summary>
            The previous index (from this page)
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.Helpers.IPaginatedPage.FirstIndex">
            <summary>
            The first index
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.Helpers.IPaginatedPage.FirstItem">
            <summary>
            The first element (index + 1)
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.Helpers.IPaginatedPage.LastItem">
            <summary>
            The last element in the page (count)
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.Helpers.IPaginatedPage.TotalItems">
            <summary>
            The count of all elements on the set
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.Helpers.IPaginatedPage.PageSize">
            <summary>
            Gets the size of the page.
            </summary>
            <value>The size of the page.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Helpers.IPaginatedPage.HasPrevious">
            <summary>
            Returns true if a previous page 
            is accessible from this page
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.Helpers.IPaginatedPage.HasNext">
            <summary>
            Returns true if a next page is
            accessible from this page
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.Helpers.IPaginatedPage.HasFirst">
            <summary>
            Returns true if a first page 
            exists
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.Helpers.IPaginatedPage.HasLast">
            <summary>
            Returns true if a last page 
            exists
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.Helpers.DataObtentionDelegate">
            <summary>
            Used as callback handler to obtain the items 
            to be displayed. 
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.Helpers.PaginationHelper">
            <summary>
            This helper allows you to easily paginate through a data source 
            -- anything that implements <see cref="T:System.Collections.IList"/>.
            </summary>
            
            <remarks>
            With the pagination you expose a <see cref="T:Castle.MonoRail.Framework.Helpers.Page"/> instance to your view, 
            that can be used to created a very detailed page navigator.
            
            <para>
            You can use up to three approaches to pagination:
            </para>
            
            <list type="bullet">
            <item>
            	<term>CreatePagination</term>
            	<description>Uses a whole data set and creates a <see cref="T:Castle.MonoRail.Framework.Helpers.Page"/> with a slice of it. </description>
            </item>
            <item>
            	<term>CreateCachedPagination</term>
            	<description>Caches the dataset and creates a <see cref="T:Castle.MonoRail.Framework.Helpers.Page"/> with a slice. 
            	As the cache is shared, you must be very careful on creating a cache key that uniquely represents the 
            	cached dataset.
            </description>
            </item>
            <item>
            	<term>CreateCustomPage</term>
            	<description>
            	In this case, you are handling the slicing. The <see cref="T:Castle.MonoRail.Framework.Helpers.Page"/> is created with your 
            	actual dataset and information about total. It calculates the other information based on that.
            	</description>
            </item>
            </list>
            
            <para>
            Performance wise, the best choice is the <see cref="M:Castle.MonoRail.Framework.Helpers.PaginationHelper.CreateCustomPage(System.Collections.IList,System.Int32,System.Int32,System.Int32)"/>
            </para>
            </remarks>
        </member>
        <member name="F:Castle.MonoRail.Framework.Helpers.PaginationHelper.PageParameterName">
            <summary>
            The parameter key that the helper looks for on the request
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.PaginationHelper.CreatePageLink(System.Int32,System.String)">
            <summary>
            Creates a link to navigate to a specific page
            </summary>
            <param name="page">Page index</param>
            <param name="text">Link text</param>
            <returns>An anchor tag</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.PaginationHelper.CreatePageLink(System.Int32,System.String,System.Collections.IDictionary)">
            <summary>
            Creates a link to navigate to a specific page
            </summary>
            <param name="page">Page index</param>
            <param name="text">Link text</param>
            <param name="htmlAttributes">Attributes for the anchor tag</param>
            <returns>An anchor tag</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.PaginationHelper.CreatePageLink(System.Int32,System.String,System.Collections.IDictionary,System.Collections.IDictionary)">
            <summary>
            Creates a link to navigate to a specific page
            </summary>
            <param name="page">Page index</param>
            <param name="text">Link text</param>
            <param name="htmlAttributes">Attributes for the anchor tag</param>
            <param name="queryStringParams">Query string entries for the link</param>
            <returns>An anchor tag</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.PaginationHelper.CreatePageLinkWithCurrentQueryString(System.Int32,System.String,System.Collections.IDictionary)">
            <summary>
            Creates a link to navigate to a specific page
            </summary>
            <param name="page">Page index</param>
            <param name="text">Link text</param>
            <param name="htmlAttributes">Attributes for the anchor tag</param>
            <returns>An anchor tag</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.PaginationHelper.CreatePagination(Castle.MonoRail.Framework.Controller,System.Collections.IList,System.Int32)">
            <summary>
            Creates a <see cref="T:Castle.MonoRail.Framework.Helpers.Page"/> which is a sliced view of
            the data source
            </summary>
            <param name="controller">the current controller</param>
            <param name="datasource">Data source to be used as target of the pagination</param>
            <param name="pageSize">Page size</param>
            <returns>A <see cref="T:Castle.MonoRail.Framework.Helpers.Page"/> instance</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.PaginationHelper.CreatePagination(System.Collections.IList,System.Int32,System.Int32)">
            <summary>
            Creates a <see cref="T:Castle.MonoRail.Framework.Helpers.Page"/> which is a sliced view of
            the data source
            </summary>
            <param name="datasource">Data source to be used as target of the pagination</param>
            <param name="pageSize">Page size</param>
            <param name="currentPage">current page index (1 based)</param>
            <returns>A <see cref="T:Castle.MonoRail.Framework.Helpers.Page"/> instance</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.PaginationHelper.CreatePagination``1(Castle.MonoRail.Framework.Controller,System.Collections.Generic.ICollection{``0},System.Int32)">
            <summary>
            Creates a <see cref="T:Castle.MonoRail.Framework.Helpers.Page"/> which is a sliced view of
            the data source
            </summary>
            <param name="controller">the current controller</param>
            <param name="datasource">Data source to be used as target of the pagination</param>
            <param name="pageSize">Page size</param>
            <returns>A <see cref="T:Castle.MonoRail.Framework.Helpers.Page"/> instance</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.PaginationHelper.CreatePagination``1(System.Collections.Generic.ICollection{``0},System.Int32,System.Int32)">
            <summary>
            Creates a <see cref="T:Castle.MonoRail.Framework.Helpers.Page"/> which is a sliced view of
            the data source
            </summary>
            <param name="datasource">Data source to be used as target of the pagination</param>
            <param name="pageSize">Page size</param>
            <param name="currentPage">current page index (1 based)</param>
            <returns>A <see cref="T:Castle.MonoRail.Framework.Helpers.Page"/> instance</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.PaginationHelper.CreateCachedPagination(Castle.MonoRail.Framework.Controller,System.String,System.Int32,Castle.MonoRail.Framework.Helpers.DataObtentionDelegate)">
            <summary>
            Creates a <see cref="T:Castle.MonoRail.Framework.Helpers.Page"/> which is a sliced view of
            the data source. This method first looks for the datasource 
            in the <see cref="T:System.Web.Caching.Cache"/> and if not found, 
            it invokes the <c>dataObtentionCallback</c> and caches the result
            using the specifed <c>cacheKey</c>
            </summary>
            <param name="controller">the current controller</param>
            <param name="cacheKey">Cache key used to query/store the datasource</param>
            <param name="pageSize">Page size</param>
            <param name="dataObtentionCallback">Callback to be used to populate the cache</param>
            <returns>A <see cref="T:Castle.MonoRail.Framework.Helpers.Page"/> instance</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.PaginationHelper.CreateCustomPage(Castle.MonoRail.Framework.Controller,System.Collections.IList,System.Int32,System.Int32)">
            <summary>
            Creates a <see cref="T:Castle.MonoRail.Framework.Helpers.Page"/> which is a sliced view of
            the data source
            <para>
            Assumes that the slicing is managed by the caller.
            </para>
            </summary>
            <param name="controller">the current controller</param>
            <param name="datasource">Data source to be used as target of the pagination</param>
            <param name="pageSize">Page size</param>
            <param name="total">The total of items in the datasource</param>
            <returns>A <see cref="T:Castle.MonoRail.Framework.Helpers.Page"/> instance</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.PaginationHelper.CreateCustomPage(System.Collections.IList,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a <see cref="T:Castle.MonoRail.Framework.Helpers.Page"/> which is a sliced view of
            the data source
            <para>
            Assumes that the slicing is managed by the caller.
            </para>
            </summary>
            <param name="datasource">Data source to be used as target of the pagination</param>
            <param name="pageSize">Page size</param>
            <param name="total">The total of items in the datasource</param>
            <param name="currentPage">The current page index (1 based).</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.PaginationHelper.CreateCustomPage``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a <see cref="T:Castle.MonoRail.Framework.Helpers.Page"/> which is a sliced view of
            the data source
            <para>
            Assumes that the slicing is managed by the caller.
            </para>
            </summary>
            <param name="datasource">Data source to be used as target of the pagination</param>
            <param name="pageSize">Page size</param>
            <param name="total">The total of items in the datasource</param>
            <param name="currentPage">The current page index (1 based).</param>
            <returns></returns>
        </member>
        <member name="T:Castle.MonoRail.Framework.Helpers.Page">
            <summary>
            Represents the sliced data and offers
            a few read only properties to create a pagination bar.
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.Helpers.AbstractPage">
            <summary>
            Abstract implementation of <see cref="T:Castle.MonoRail.Framework.Helpers.IPaginatedPage"/>
            which performs the standard calculations on 
            <see cref="M:Castle.MonoRail.Framework.Helpers.AbstractPage.CalculatePaginationInfo(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)"/>
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.AbstractPage.CalculatePaginationInfo(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Calculate the values of all properties
            based on the specified parameters
            </summary>
            <param name="startIndex">Start index</param>
            <param name="endIndex">Last index</param>
            <param name="count">Total of elements</param>
            <param name="pageSize">Page size</param>
            <param name="curPage">This page index</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.AbstractPage.HasPage(System.Int32)">
            <summary>
            Checks whether the specified page exists.
            Useful for Google-like pagination.
            </summary>
            <param name="pageNumber">The page number</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.AbstractPage.GetEnumerator">
            <summary>
            Returns a enumerator for the contents
            of this page only (not the whole set)
            </summary>
            <returns>Enumerator instance</returns>
        </member>
        <member name="P:Castle.MonoRail.Framework.Helpers.AbstractPage.FirstIndex">
            <summary>
            The first index
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.Helpers.AbstractPage.CurrentIndex">
            <summary>
            The index this page represents
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.Helpers.AbstractPage.LastIndex">
            <summary>
            The last index available on the set
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.Helpers.AbstractPage.PreviousIndex">
            <summary>
            The previous index (from this page)
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.Helpers.AbstractPage.NextIndex">
            <summary>
            The next index (from this page)
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.Helpers.AbstractPage.FirstItem">
            <summary>
            The first element (index + 1)
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.Helpers.AbstractPage.LastItem">
            <summary>
            The last element in the page (count)
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.Helpers.AbstractPage.TotalItems">
            <summary>
            The count of all elements on the set
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.Helpers.AbstractPage.PageSize">
            <summary>
            Gets the size of the page.
            </summary>
            <value>The size of the page.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Helpers.AbstractPage.HasPrevious">
            <summary>
            Returns true if a previous page 
            is accessible from this page
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.Helpers.AbstractPage.HasNext">
            <summary>
            Returns true if a next page is
            accessible from this page
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.Helpers.AbstractPage.HasFirst">
            <summary>
            Returns true if a first page 
            exists
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.Helpers.AbstractPage.HasLast">
            <summary>
            Returns true if a last page 
            exists
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.Page.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.Helpers.Page"/> class.
            </summary>
            <param name="curPage">The desired page index</param>
            <param name="pageSize">The desired page size</param>
            <param name="total">The total of items in the data source.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.Page.#ctor(System.Collections.IList,System.Int32,System.Int32)">
            <summary>
            Constructs a Page using the specified parameters
            </summary>
            <param name="list">The whole set</param>
            <param name="curPage">The desired page index</param>
            <param name="pageSize">The desired page size</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.Page.#ctor(System.Collections.IList,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.Helpers.Page"/> class.
            </summary>
            <param name="slice">The sliced list.</param>
            <param name="curPage">The desired page index</param>
            <param name="pageSize">The desired page size</param>
            <param name="total">The total of items (not in the list, but on the original source).</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.Page.CreateSlicedCollection(System.Int32,System.Int32,System.Collections.IList)">
            <summary>
            Populates the sliced view of the whole set
            </summary>
            <param name="startIndex">Index to start to</param>
            <param name="endIndex">Last index</param>
            <param name="list">Source set</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.Page.GetEnumerator">
            <summary>
            Creates an enumerator for the 
            sliced set
            </summary>
            <returns>An enumerator instance</returns>
        </member>
        <member name="T:Castle.MonoRail.Framework.Helpers.GenericPage`1">
            <summary>
            Represents the sliced data and offers
            a few read only properties to create a pagination bar.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.GenericPage`1.#ctor(System.Collections.Generic.ICollection{`0},System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.Helpers.GenericPage`1"/> class.
            </summary>
            <param name="list">The list.</param>
            <param name="curPage">The cur page.</param>
            <param name="pageSize">Size of the page.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.GenericPage`1.GetEnumerator">
            <summary>
            Returns a enumerator for the contents
            of this page only (not the whole set)
            </summary>
            <returns>Enumerator instance</returns>
        </member>
        <member name="T:Castle.MonoRail.Framework.Helpers.GenericCustomPage`1">
            <summary>
            Represents the sliced data and offers
            a few read only properties to create a pagination bar.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.GenericCustomPage`1.#ctor(System.Collections.Generic.IList{`0},System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.Helpers.GenericCustomPage`1"/> class.
            </summary>
            <param name="list">The list.</param>
            <param name="curPage">The cur page.</param>
            <param name="pageSize">Size of the page.</param>
            <param name="total">The total.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.GenericCustomPage`1.GetEnumerator">
            <summary>
            Returns a enumerator for the contents
            of this page only (not the whole set)
            </summary>
            <returns>Enumerator instance</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.GenericCustomPage`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:Castle.MonoRail.Framework.Helpers.PrototypeHelper">
            <summary>
            Pendent
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.Helpers.PrototypeHelper.JSGenerator">
            <summary>
            Pendent
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.Helpers.DynamicDispatchSupport">
            <summary>
            DynamicDispatch support is an infrastructure 
            that mimics a dynamic language/environment. 
            It is not finished but the idea is to allow 
            plugins to add operations to the generators.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.DynamicDispatchSupport.PopulateAvailableMethods(System.Collections.IDictionary,System.Reflection.MethodInfo[])">
            <summary>
            Populates the available methods.
            </summary>
            <param name="generatorMethods">The generator methods.</param>
            <param name="methods">The methods.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.DynamicDispatchSupport.IsGeneratorMethod(System.String)">
            <summary>
            Determines whether [is generator method] [the specified method].
            </summary>
            <param name="method">The method.</param>
            <returns>
            	<c>true</c> if [is generator method] [the specified method]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.DynamicDispatchSupport.Dispatch(System.String,System.Object[])">
            <summary>
            Dispatches the specified method.
            </summary>
            <param name="method">The method.</param>
            <param name="args">The args.</param>
            <returns></returns>
        </member>
        <member name="P:Castle.MonoRail.Framework.Helpers.DynamicDispatchSupport.GeneratorMethods">
            <summary>
            Gets the generator methods.
            </summary>
            <value>The generator methods.</value>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.PrototypeHelper.JSGenerator.#cctor">
            <summary>
            Collects the public methods
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.PrototypeHelper.JSGenerator.#ctor(Castle.MonoRail.Framework.IRailsEngineContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.Helpers.PrototypeHelper.JSGenerator"/> class.
            </summary>
            <param name="context">The request context</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.PrototypeHelper.JSGenerator.InsertHtml(System.String,System.String,System.Object)">
            <summary>
            Inserts a content snippet relative to the element specified by the <paramref name="id"/>
            	<para>
            The supported positions are
            Top, After, Before, Bottom
            </para>
            </summary>
            <param name="position">The position to insert the content relative to the element id</param>
            <param name="id">The target element id</param>
            <param name="renderOptions">Defines what to render</param>
            <example>
            The following example uses nvelocity syntax:
            <code>
            $page.InsertHtml('Bottom', 'messagestable', "%{partial='shared/newmessage.vm'}")
            </code>
            </example>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.PrototypeHelper.JSGenerator.ReplaceHtml(System.String,System.Object)">
            <summary>
            Replaces the content of the specified target element.
            </summary>
            <param name="id">The target element id</param>
            <param name="renderOptions">Defines what to render</param>
            <example>
            The following example uses nvelocity syntax:
            <code>
            $page.ReplaceHtml('messagediv', "%{partial='shared/newmessage.vm'}")
            </code>
            </example>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.PrototypeHelper.JSGenerator.Replace(System.String,System.Object)">
            <summary>
            Replaces the entire target element -- and not only its innerHTML --
            by the content evaluated.
            </summary>
            <param name="id">The target element id</param>
            <param name="renderOptions">Defines what to render</param>
            <example>
            The following example uses nvelocity syntax:
            <code>
            $page.Replace('messagediv', "%{partial='shared/newmessage.vm'}")
            </code>
            </example>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.PrototypeHelper.JSGenerator.Show(System.String[])">
            <summary>
            Shows the specified elements.
            </summary>
            <param name="ids">The elements ids.</param>
            <remarks>
            The elements must exist.
            </remarks>
            <example>
            The following example uses nvelocity syntax:
            <code>
            $page.Show('div1', 'div2')
            </code>
            </example>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.PrototypeHelper.JSGenerator.Hide(System.String[])">
            <summary>
            Hides the specified elements.
            </summary>
            <param name="ids">The elements ids.</param>
            <remarks>
            The elements must exist.
            </remarks>
            <example>
            The following example uses nvelocity syntax:
            <code>
            $page.Hide('div1', 'div2')
            </code>
            </example>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.PrototypeHelper.JSGenerator.Toggle(System.String[])">
            <summary>
            Toggles the display status of the specified elements.
            </summary>
            <param name="ids">The elements ids.</param>
            <remarks>
            The elements must exist.
            </remarks>
            <example>
            The following example uses nvelocity syntax:
            <code>
            $page.Toggle('div1', 'div2')
            </code>
            </example>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.PrototypeHelper.JSGenerator.Remove(System.String[])">
            <summary>
            Remove the specified elements from the DOM.
            </summary>
            <param name="ids">The elements ids.</param>
            <remarks>
            The elements must exist.
            </remarks>
            <example>
            The following example uses nvelocity syntax:
            <code>
            $page.Remove('div1', 'div2')
            </code>
            </example>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.PrototypeHelper.JSGenerator.Alert(System.Object)">
            <summary>
            Shows a JS alert
            </summary>
            <param name="message">The message to display.</param>
            <example>
            The following example uses nvelocity syntax:
            <code>
            $page.Alert('You won a Mercedez')
            </code>
            </example>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.PrototypeHelper.JSGenerator.RedirectTo(System.Object)">
            <summary>
            Redirects to an url using the <c>location.href</c>.
            This is required as most ajax libs don't care for the redirect status
            in the http reply.
            </summary>
            <param name="url">The URL.</param>
            <example>
            The following redirects to a static page
            <code>
            $page.RedirectTo('about.aspx')
            </code>
            	<para>
            The following redirects using the <see cref="T:Castle.MonoRail.Framework.Helpers.UrlHelper"/>
            	</para>
            	<code>
            $page.RedirectTo("%{controller='Home',action='index'}")
            </code>
            </example>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.PrototypeHelper.JSGenerator.ReApply">
            <summary>
            Re-apply Behaviour css' rules.
            </summary>
            <remarks>
            Only makes sense if you are using the Behaviour javascript library.
            </remarks>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.PrototypeHelper.JSGenerator.VisualEffect(System.String,System.String,System.Collections.IDictionary)">
            <summary>
            Generates a call to a scriptaculous' visual effect.
            </summary>
            <param name="name">The effect name.</param>
            <param name="element">The target element.</param>
            <param name="options">The optional options.</param>
            <seealso cref="T:Castle.MonoRail.Framework.Helpers.ScriptaculousHelper"/>
            <example>
            The following example uses nvelocity syntax:
            <code>
            $page.VisualEffect('ToggleSlide', 'myelement')
            </code>
            	<para>
            This is especially useful to show which elements
            where updated in an ajax call.
            </para>
            	<code>
            $page.ReplaceHtml('mydiv', "Hey, I've changed")
            $page.VisualEffect('Highlight', 'mydiv')
            </code>
            </example>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.PrototypeHelper.JSGenerator.VisualEffectDropOut(System.String,System.Collections.IDictionary)">
            <summary>
            Generates a call to a scriptaculous' drop out visual effect.
            </summary>
            <param name="element">The target element.</param>
            <param name="options">The optional options.</param>
            <seealso cref="T:Castle.MonoRail.Framework.Helpers.ScriptaculousHelper"/>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.PrototypeHelper.JSGenerator.Assign(System.String,System.String)">
            <summary>
            Assigns a javascript variable with the expression.
            </summary>
            <param name="variable">The target variable</param>
            <param name="expression">The right side expression</param>
            <example>
            The following example uses nvelocity syntax:
            <code>
            $page.Assign('myvariable', '10')
            </code>
            	<para>
            Which outputs:
            </para>
            	<code>
            myvariable = 10;
            </code>
            	<para>
            With strings you can escape strings:
            </para>
            	<code>
            $page.Assign('myvariable', '\'Hello world\'')
            </code>
            	<para>
            Which outputs:
            </para>
            	<code>
            myvariable = 'Hello world';
            </code>
            </example>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.PrototypeHelper.JSGenerator.Declare(System.String)">
            <summary>
            Declares the specified variable as null.
            </summary>
            <param name="variable">The variable name.</param>
            <seealso cref="M:Castle.MonoRail.Framework.Helpers.PrototypeHelper.JSGenerator.Assign(System.String,System.String)"/>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.PrototypeHelper.JSGenerator.Call(System.Object,System.Object[])">
            <summary>
            Calls the specified function with the optional arguments.
            </summary>
            <param name="function">The function name.</param>
            <param name="args">The arguments.</param>
            <example>
            The following example uses nvelocity syntax:
            <code>
            $page.call('myJsFunctionAlreadyDeclared', '10', "'message'", $somethingfrompropertybag, $anothermessage.to_squote)
            </code>
            	<para>
            Which outputs:
            </para>
            	<code>
            myJsFunctionAlreadyDeclared(10, 'message', 1001, 'who let the dogs out?')
            </code>
            </example>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.PrototypeHelper.JSGenerator.Render(System.Object)">
            <summary>
            Outputs the content using the renderOptions approach.
            <para>
            If the renderOptions is a string, the content is escaped and quoted.
            </para>
            	<para>
            If the renderOptions is a dictionary, we extract the key <c>partial</c>
            and evaluate the template it points to. The content is escaped and quoted.
            </para>
            </summary>
            <param name="renderOptions">The render options.</param>
            <returns></returns>
            <example>
            The following example uses nvelocity syntax:
            <code>
            $page.Call('myJsFunction', $page.render("%{partial='shared/newmessage.vm'}") )
            </code>
            	<para>
            Which outputs:
            </para>
            	<code>
            myJsFunction('the content from the newmessage partial view template')
            </code>
            </example>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.PrototypeHelper.JSGenerator.Write(System.String)">
            <summary>
            Writes the content specified to the generator instance
            </summary>
            <param name="content">The content.</param>
            <remarks>
            This is for advanced scenarios and for the infrastructure. Usually not useful.
            </remarks>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.PrototypeHelper.JSGenerator.AppendLine(System.String)">
            <summary>
            Writes the content specified to the generator instance
            </summary>
            <param name="content">The content.</param>
            <remarks>
            This is for advanced scenarios and for the infrastructure. Usually not useful.
            </remarks>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.PrototypeHelper.JSGenerator.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.PrototypeHelper.JSGenerator.CreateCollectionGenerator(System.String)">
            <summary>
            Creates a generator for a collection.
            </summary>
            <param name="root">The root expression.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.PrototypeHelper.JSGenerator.CreateElementGenerator(System.String)">
            <summary>
            Creates a generator for an element.
            </summary>
            <param name="root">The root expression.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.PrototypeHelper.JSGenerator.Record(Castle.MonoRail.Framework.Helpers.IJSGenerator,System.String)">
            <summary>
            Records the specified line on the generator.
            </summary>
            <param name="gen">The gen.</param>
            <param name="line">The line.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.PrototypeHelper.JSGenerator.BuildJSArguments(System.Object[])">
            <summary>
            Builds the JS arguments.
            </summary>
            <param name="args">The args.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.PrototypeHelper.JSGenerator.ReplaceTailByPeriod(Castle.MonoRail.Framework.Helpers.IJSGenerator)">
            <summary>
            Replaces the tail by period.
            </summary>
            <param name="generator">The generator.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.PrototypeHelper.JSGenerator.RemoveTail(Castle.MonoRail.Framework.Helpers.IJSGenerator)">
            <summary>
            Removes the tail.
            </summary>
            <param name="generator">The generator.</param>
        </member>
        <member name="P:Castle.MonoRail.Framework.Helpers.PrototypeHelper.JSGenerator.GeneratorMethods">
            <summary>
            Gets the generator methods.
            </summary>
            <value>The generator methods.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Helpers.PrototypeHelper.JSGenerator.Lines">
            <summary>
            Gets the js lines.
            </summary>
            <value>The js lines.</value>
        </member>
        <member name="T:Castle.MonoRail.Framework.Helpers.PrototypeHelper.JSCollectionGenerator">
            <summary>
            Implementation of <see cref="T:Castle.MonoRail.Framework.Helpers.IJSCollectionGenerator"/>
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.PrototypeHelper.JSCollectionGenerator.#cctor">
            <summary>
            Collects the public methods
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.PrototypeHelper.JSCollectionGenerator.#ctor(Castle.MonoRail.Framework.Helpers.PrototypeHelper.JSGenerator,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.Helpers.PrototypeHelper.JSCollectionGenerator"/> class.
            </summary>
            <param name="generator">The generator.</param>
            <param name="root">The root</param>
        </member>
        <member name="P:Castle.MonoRail.Framework.Helpers.PrototypeHelper.JSCollectionGenerator.ParentGenerator">
            <summary>
            Gets the parent generator.
            </summary>
            <value>The parent generator.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Helpers.PrototypeHelper.JSCollectionGenerator.GeneratorMethods">
            <summary>
            Gets the generator methods.
            </summary>
            <value>The generator methods.</value>
        </member>
        <member name="T:Castle.MonoRail.Framework.Helpers.PrototypeHelper.JSElementGenerator">
            <summary>
            Implementation for the <see cref="T:Castle.MonoRail.Framework.Helpers.IJSElementGenerator"/>
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.PrototypeHelper.JSElementGenerator.#cctor">
            <summary>
            Collects the public methods
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.PrototypeHelper.JSElementGenerator.#ctor(Castle.MonoRail.Framework.Helpers.PrototypeHelper.JSGenerator,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.Helpers.PrototypeHelper.JSElementGenerator"/> class.
            </summary>
            <param name="generator">The generator.</param>
            <param name="root">The root.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.PrototypeHelper.JSElementGenerator.ReplaceHtml(System.Object)">
            <summary>
            Replaces the content of the element.
            </summary>
            <param name="renderOptions">Defines what to render</param>
            <example>
            The following example uses nvelocity syntax:
            <code>
            $page.el('elementid').ReplaceHtml("%{partial='shared/newmessage.vm'}")
            </code>
            </example>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.PrototypeHelper.JSElementGenerator.Replace(System.Object)">
            <summary>
            Replaces the entire element's content -- and not only its innerHTML --
            by the content evaluated.
            </summary>
            <param name="renderOptions">Defines what to render</param>
            <example>
            The following example uses nvelocity syntax:
            <code>
            $page.el('messagediv').Replace("%{partial='shared/newmessage.vm'}")
            </code>
            </example>
        </member>
        <member name="P:Castle.MonoRail.Framework.Helpers.PrototypeHelper.JSElementGenerator.ParentGenerator">
            <summary>
            Gets the parent generator.
            </summary>
            <value>The parent generator.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Helpers.PrototypeHelper.JSElementGenerator.GeneratorMethods">
            <summary>
            Gets the generator methods.
            </summary>
            <value>The generator methods.</value>
        </member>
        <member name="T:Castle.MonoRail.Framework.Helpers.SetOperation">
            <summary>
            The SetOperation exposes an <see cref="M:Castle.MonoRail.Framework.Helpers.SetOperation.IterateOnDataSource(System.Object,System.Collections.IEnumerable,System.Collections.IDictionary)"/> that 
            extracts information from the attributes and creates a proper configured
            Iterator.
            <para>
            It is shared by a handful of MonoRail operations related to sets. 
            </para>
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.SetOperation.IterateOnDataSource(System.Object,System.Collections.IEnumerable,System.Collections.IDictionary)">
            <summary>
            Combines a group of well thought rules to create 
            an <see cref="T:Castle.MonoRail.Framework.Helpers.OperationState"/> instance.
            </summary>
            
            <remarks>
            The parameters read from the <paramref name="attributes"/> are
            
            <list type="bullet">
            <item>
            	<term>value</term>
            	<description>The property name used to extract the value</description>
            </item>
            <item>
            	<term>text</term>
            	<description>The property name used to extract the display text</description>
            </item>
            <item>
            	<term>textformat</term>
            	<description>A format rule to apply to the text</description>
            </item>
            <item>
            	<term>valueformat</term>
            	<description>A format rule to apply to the value</description>
            </item>
            <item>
            	<term>suffix</term>
            	<description>If the types on both sets are different, 
            	the suffix specifies a different target property</description>
            </item>
            <item>
            	<term>sourceProperty</term>
            	<description>
            	If the types on both sets are different, 
            	the sourceProperty identifies a different source property to extract the value from.
            	</description>
            </item>
            
            </list>
            
            </remarks>
            
            <param name="initialSelection">The initial selection.</param>
            <param name="dataSource">The data source.</param>
            <param name="attributes">The attributes.</param>
            <returns></returns>
        </member>
        <member name="T:Castle.MonoRail.Framework.Helpers.SetItem">
            <summary>
            Represents a set element
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.SetItem.#ctor(System.Object,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.Helpers.SetItem"/> class.
            </summary>
            <param name="item">The item.</param>
            <param name="value">The value.</param>
            <param name="text">The text.</param>
            <param name="isSelected">if set to <c>true</c> [is selected].</param>
        </member>
        <member name="P:Castle.MonoRail.Framework.Helpers.SetItem.Item">
            <summary>
            Gets the item.
            </summary>
            <value>The item.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Helpers.SetItem.Value">
            <summary>
            Gets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Helpers.SetItem.Text">
            <summary>
            Gets the text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Helpers.SetItem.IsSelected">
            <summary>
            Gets a value indicating whether this instance is selected.
            </summary>
            <value>
            	<c>true</c> if this instance is selected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Castle.MonoRail.Framework.Helpers.OperationState">
            <summary>
            Base class for set iterators
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Helpers.OperationState.type">
            <summary>
            source type
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Helpers.OperationState.valuePropInfo">
            <summary>
            Value getter for value
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Helpers.OperationState.textPropInfo">
            <summary>
            Value getter for text
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Helpers.OperationState.textFormat">
            <summary>
            Format rule for text
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Helpers.OperationState.valueFormat">
            <summary>
            Format rule for value
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Helpers.OperationState.enumerator">
            <summary>
            Source enumerator
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.OperationState.#ctor(System.Type,System.Collections.IEnumerable,System.Boolean,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.Helpers.OperationState"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="dataSource">The data source.</param>
            <param name="emptyValueCase">if set to <c>true</c> [empty value case].</param>
            <param name="valueProperty">The value property.</param>
            <param name="textProperty">The text property.</param>
            <param name="textFormat">The text format.</param>
            <param name="valueFormat">The value format.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.OperationState.FormatText(System.Object@,System.String)">
            <summary>
            Formats the text.
            </summary>
            <param name="value">The value to be formatted.</param>
            <param name="format">The format to apply.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.OperationState.CreateItemRepresentation(System.Object)">
            <summary>
            Creates the item representation.
            </summary>
            <param name="current">The current.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.OperationState.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.
            </returns>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.OperationState.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.OperationState.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Castle.MonoRail.Framework.Helpers.OperationState.TargetSuffix">
            <summary>
            Gets the target suffix.
            </summary>
            <value>The target suffix.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Helpers.OperationState.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
            <value></value>
            <returns>The current element in the collection.</returns>
            <exception cref="T:System.InvalidOperationException">The enumerator is positioned before the first element of the collection or after the last element. </exception>
        </member>
        <member name="T:Castle.MonoRail.Framework.Helpers.NoIterationState">
            <summary>
            Used for empty/null datasources
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Helpers.NoIterationState.Instance">
            <summary>
            Single instance for the iterator.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.NoIterationState.CreateItemRepresentation(System.Object)">
            <summary>
            Creates the item representation.
            </summary>
            <param name="current">The current.</param>
            <returns></returns>
        </member>
        <member name="P:Castle.MonoRail.Framework.Helpers.NoIterationState.TargetSuffix">
            <summary>
            Gets the target suffix.
            </summary>
            <value>The target suffix.</value>
        </member>
        <member name="T:Castle.MonoRail.Framework.Helpers.ListDataSourceState">
            <summary>
            Simple iterator
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.ListDataSourceState.#ctor(System.Type,System.Collections.IEnumerable,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.Helpers.ListDataSourceState"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="dataSource">The data source.</param>
            <param name="valueProperty">The value property.</param>
            <param name="textProperty">The text property.</param>
            <param name="textFormat">The text format.</param>
            <param name="valueFormat">The value format.</param>
            <param name="customSuffix">The custom suffix.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.ListDataSourceState.CreateItemRepresentation(System.Object)">
            <summary>
            Creates the item representation.
            </summary>
            <param name="current">The current.</param>
            <returns></returns>
        </member>
        <member name="P:Castle.MonoRail.Framework.Helpers.ListDataSourceState.TargetSuffix">
            <summary>
            Gets the target suffix.
            </summary>
            <value>The target suffix.</value>
        </member>
        <member name="T:Castle.MonoRail.Framework.Helpers.SameTypeOperationState">
            <summary>
            Iterator for sets type same type
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.SameTypeOperationState.#ctor(System.Type,System.Object,System.Collections.IEnumerable,System.Boolean,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.Helpers.SameTypeOperationState"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="initialSelection">The initial selection.</param>
            <param name="dataSource">The data source.</param>
            <param name="emptyValueCase">if set to <c>true</c> [empty value case].</param>
            <param name="valueProperty">The value property.</param>
            <param name="textProperty">The text property.</param>
            <param name="textFormat">The text format.</param>
            <param name="valueFormat">The value format.</param>
            <param name="isInitialSelectionASet">if set to <c>true</c> [is initial selection A set].</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.SameTypeOperationState.CreateItemRepresentation(System.Object)">
            <summary>
            Creates the item representation.
            </summary>
            <param name="current">The current.</param>
            <returns></returns>
        </member>
        <member name="P:Castle.MonoRail.Framework.Helpers.SameTypeOperationState.TargetSuffix">
            <summary>
            Gets the target suffix.
            </summary>
            <value>The target suffix.</value>
        </member>
        <member name="T:Castle.MonoRail.Framework.Helpers.DifferentTypeOperationState">
            <summary>
            Iterator for different types on the set
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.DifferentTypeOperationState.#ctor(System.Type,System.Type,System.Object,System.Collections.IEnumerable,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.Helpers.DifferentTypeOperationState"/> class.
            </summary>
            <param name="initialSelectionType">Initial type of the selection.</param>
            <param name="dataSourceType">Type of the data source.</param>
            <param name="initialSelection">The initial selection.</param>
            <param name="dataSource">The data source.</param>
            <param name="sourceProperty">The source property.</param>
            <param name="valueProperty">The value property.</param>
            <param name="textProperty">The text property.</param>
            <param name="textFormat">The text format.</param>
            <param name="valueFormat">The value format.</param>
            <param name="isInitialSelectionASet">if set to <c>true</c> [is initial selection A set].</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.DifferentTypeOperationState.CreateItemRepresentation(System.Object)">
            <summary>
            Creates the item representation.
            </summary>
            <param name="current">The current.</param>
            <returns></returns>
        </member>
        <member name="P:Castle.MonoRail.Framework.Helpers.DifferentTypeOperationState.TargetSuffix">
            <summary>
            Gets the target suffix.
            </summary>
            <value>The target suffix.</value>
        </member>
        <member name="T:Castle.MonoRail.Framework.Helpers.TextHelper">
            <summary>
            Provides methods for working with strings and grammar. At the moment,
            it contains the ToSentence overloads.
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Helpers.TextHelper.DefaultConnector">
            <summary>
            Default word connector
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.TextHelper.PascalCaseToWord(System.String)">
            <summary>
            Converts a camelized text to words. For instance:
            <c>FileWriter</c> is converted to <c>File Writer</c>
            </summary>
            <param name="pascalText">Content in pascal case</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.TextHelper.ToSentence(System.Collections.ICollection,System.String)">
            <summary>
            Builds a phrase listing a series of strings with with proper sentence semantics,
            i.e. separating elements with ", " and prefacing the last element with
            the specified <paramref name="connector"/>.
            </summary>
            <param name="elements">Collection with items to use in the sentence.</param>
            <param name="connector">String to preface the last element.</param>
            <returns>String suitable for use in a sentence.</returns>
            <remarks>Calling <c>ToSentence( elements, "y" )</c> results in:
            <code>
            element1, element2 y element3
            </code>
            <para>If <paramref name="elements"/> is not an array of strings, each element will be
            converted to string through <see cref="M:System.Object.ToString"/>.</para>
            </remarks>
            <example>This example shows how to use <b>ToSentence</b>:
            <code>
            $TextHelper.ToSentence( elements, "y" )
            </code>
            </example>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.TextHelper.ToSentence(System.Collections.ICollection,System.Boolean)">
            <summary>
            Builds a phrase listing a series of strings with with proper sentence semantics,
            i.e. separating elements with ", " and prefacing the last element with
            " and ".
            </summary>
            <param name="elements">Collection with items to use in the sentence.</param>
            <param name="skipLastComma">True to skip the comma before the connector, false to include it.</param>
            <returns>String suitable for use in a sentence.</returns>
            <remarks>Calling <c>ToSentence( elements, false )</c> results in:
            <code>
            element1, element2, and element3
            </code>
            <para>If <paramref name="elements"/> is not an array of strings, each element will be
            converted to string through <see cref="M:System.Object.ToString"/>.</para>
            </remarks>
            <example>This example shows how to use <b>ToSentence</b>:
            <code>
            $TextHelper.ToSentence( elements, false )
            </code>
            </example>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.TextHelper.ToSentence(System.Collections.ICollection)">
            <summary>
            Builds a phrase listing a series of strings with with proper sentence semantics,
            i.e. separating elements with ", " and prefacing the last element with
            " and ".
            </summary>
            <param name="elements">Collection with items to use in the sentence.</param>
            <returns>String suitable for use in a sentence.</returns>
            <remarks>Calling <c>ToSentence( elements )</c> results in:
            <code>
            element1, element2 and element3
            </code>
            <para>If <paramref name="elements"/> is not an array of strings, each element will be
            converted to string through <see cref="M:System.Object.ToString"/>.</para>
            </remarks>
            <example>This example shows how to use <b>ToSentence</b>:
            <code>
            $TextHelper.ToSentence( elements )
            </code>
            </example>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.TextHelper.ToSentence(System.Collections.ICollection,System.String,System.Boolean)">
            <summary>
            Builds a phrase listing a series of strings with with proper sentence semantics,
            i.e. separating elements with ", " and prefacing the last element with
            the specified <paramref name="connector"/>.
            </summary>
            <param name="elements">Collection with items to use in the sentence.</param>
            <param name="connector">String to preface the last element.</param>
            <param name="skipLastComma">True to skip the comma before the <paramref name="connector"/>, false to include it.</param>
            <returns>String suitable for use in a sentence.</returns>
            <remarks>Calling <c>ToSentence( elements, "y", false )</c> results in:
            <code>
            element1, element2, y element3
            </code>
            <para>If <paramref name="elements"/> is not an array of strings, each element will be
            converted to string through <see cref="M:System.Object.ToString"/>.</para>
            </remarks>
            <example>This example shows how to use <b>ToSentence</b>:
            <code>
            $TextHelper.ToSentence( elements, "y", false )
            </code>
            </example>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.TextHelper.ToSentence(System.String[],System.String,System.Boolean)">
            <summary>
            Builds a phrase listing a series of strings with with proper sentence semantics,
            i.e. separating elements with &quot;, &quot; and prefacing the last element with
            the specified <paramref name="connector"/>.
            </summary>
            <param name="elements">Array of strings with items to use in the sentence.</param>
            <param name="connector">String to preface the last element.</param>
            <param name="skipLastComma">True to skip the comma before the <paramref name="connector"/>, false to include it.</param>
            <returns>String suitable for use in a sentence.</returns>
            <remarks>Calling <c>ToSentence( elements, "y", false )</c> results in:
            <code>
            element1, element2, y element3
            </code>
            </remarks>
            <example>This example shows how to use <b>ToSentence</b>:
            <code>
            $TextHelper.ToSentence( elements, "y", false )
            </code>
            </example>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.TextHelper.Fold(System.String,System.Int32)">
            <summary>
            Shortens a text to the specified length and wraps it into a span-
            element that has the title-property with the full text associated.
            This is convenient for displaying properties in tables that might
            have very much content (desription fields etc.) without destroying
            the table's layout.
            Due to the title-property of the surrounding span-element, the full
            text is displayed in the browser while hovering over the shortened
            text.
            </summary>
            <param name="text">The text to display</param>
            <param name="maxLength">The maximum number of character to display</param>
            <returns>The generated HTML</returns>
        </member>
        <member name="T:Castle.MonoRail.Framework.Helpers.UrlHelper">
            <summary>
            Helper that allows the creation of urls using a dictionary.
            
            <para>
            For more information see <see cref="M:Castle.MonoRail.Framework.Services.DefaultUrlBuilder.BuildUrl(Castle.MonoRail.Framework.UrlInfo,System.Collections.IDictionary)"/>
            </para>
            
            </summary>
            
            <remarks> 
            By default the urlhelper sets the encode to <c>true</c>, so the html generated is valid xhtml.
            </remarks> 
            
            <seealso cref="M:Castle.MonoRail.Framework.Services.DefaultUrlBuilder.BuildUrl(Castle.MonoRail.Framework.UrlInfo,System.Collections.IDictionary)"/>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.UrlHelper.For(System.Collections.IDictionary)">
            <summary>
            Outputs a path constructed using the specified parameters.
            </summary>
            
            <seealso cref="M:Castle.MonoRail.Framework.Services.DefaultUrlBuilder.BuildUrl(Castle.MonoRail.Framework.UrlInfo,System.Collections.IDictionary)"/>
            
            <example>
            The following code uses nvelocity syntax:
            
            <code>
             $url.for("%{action='Save'}")
            </code>
            
            <para>outputs</para>
            
            <code>/ControllerNameFromContext/Save.extension_configured</code>
            
            <code>
             $url.for("%{action='Edit',querystring='id=1'}")
            </code>
            
            <para>outputs</para>
            
            <code>/ControllerNameFromContext/Edit.extension_configured?id=1</code>
            </example>
            
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.UrlHelper.Link(System.String,System.Collections.IDictionary)">
            <summary>
            Outputs an anchor element constructed using the specified parameters.
            </summary>
            
            <seealso cref="M:Castle.MonoRail.Framework.Services.DefaultUrlBuilder.BuildUrl(Castle.MonoRail.Framework.UrlInfo,System.Collections.IDictionary)"/>
            
            <example>
            The following code uses nvelocity syntax:
            
            <code>
             $url.link('my link', "%{action='Save'}")
            </code>
            
            <para>outputs</para>
            
            <code><![CDATA[ <a href="/ControllerNameFromContext/Save.extension_configured">my link</a> ]]> </code>
            
            <code>
             $url.link('my link', "%{action='Edit',querystring='id=1'}")
            </code>
            
            <para>outputs</para>
            
            <code><![CDATA[ <a href="/ControllerNameFromContext/Edit.extension_configured?id=1">my link</a> ]]> </code>
            </example>
            
            <param name="innerContent">The anchor text.</param>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.UrlHelper.Link(System.String,System.Collections.IDictionary,System.Collections.IDictionary)">
            <summary>
            Outputs an anchor element constructed using the specified parameters.
            </summary>
            
            <seealso cref="M:Castle.MonoRail.Framework.Services.DefaultUrlBuilder.BuildUrl(Castle.MonoRail.Framework.UrlInfo,System.Collections.IDictionary)"/>
            
            <example>
            The following code uses nvelocity syntax:
            
            <code>
             $url.link('my link', "%{action='Save'}", "%{class='buttonlink'}")
            </code>
            
            <para>outputs</para>
            
            <code><![CDATA[ <a href="/ControllerNameFromContext/Save.extension_configured" class="buttonlink">my link</a> ]]> </code>
            
            </example>
            
            <param name="innerContent">The anchor text.</param>
            <param name="parameters">The parameters.</param>
            <param name="anchorAttributes">The anchor element attributes.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.UrlHelper.ButtonLink(System.String,System.Collections.IDictionary)">
            <summary>
            Outputs a button element constructed using the specified parameters.
            </summary>
            
            <seealso cref="M:Castle.MonoRail.Framework.Services.DefaultUrlBuilder.BuildUrl(Castle.MonoRail.Framework.UrlInfo,System.Collections.IDictionary)"/>
            
            <example>
            The following code uses nvelocity syntax:
            
            <code>
             $url.ButtonLink('my link', "%{action='Save'}")
            </code>
            
            <para>outputs</para>
            
            <code><![CDATA[ <button type="button" onclick="javascript:window.location.href = '/ControllerNameFromContext/Save.extension_configured'">my link</a> ]]> </code>
            
            </example>
            
            <param name="innerContent">The button text.</param>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.UrlHelper.ButtonLink(System.String,System.Collections.IDictionary,System.Collections.IDictionary)">
            <summary>
            Outputs a button element constructed using the specified parameters.
            </summary>
            
            <seealso cref="M:Castle.MonoRail.Framework.Services.DefaultUrlBuilder.BuildUrl(Castle.MonoRail.Framework.UrlInfo,System.Collections.IDictionary)"/>
            
            <example>
            The following code uses nvelocity syntax:
            
            <code>
             $url.ButtonLink('my link', "%{action='Save'}", "%{class='buttonlink'}")
            </code>
            
            <para>outputs</para>
            
            <code><![CDATA[ <button type="button" onclick="javascript:window.location.href = '/ControllerNameFromContext/Save.extension_configured'" class="buttonlink">my link</a> ]]> </code>
            
            </example>
            
            <param name="innerContent">The button text.</param>
            <param name="parameters">The parameters.</param>
            <param name="buttonAttributes">The button element attributes.</param>
            <returns></returns>
        </member>
        <member name="T:Castle.MonoRail.Framework.Helpers.ValidationHelper">
            <summary>
            Helper that provides client-side validation.
            </summary>
            <remarks>The javascript core lib is extension of Peter Bailey's 
            fValidate(http://www.peterbailey.net/fValidate/).</remarks>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.ValidationHelper.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.ValidationHelper.InstallScripts">
            <summary>
            Automatic Script installer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.ValidationHelper.InstallScripts(System.String)">
            <summary>
            Installs the scripts.
            </summary>
            <param name="locale">The locale.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.ValidationHelper.SetSubmitOptions(System.Collections.IDictionary)">
            <summary>
            Configure the submit and validation options.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.ValidationHelper.SetSubmitOptions(System.Boolean,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Configure the submit and validation options.
            </summary>
            <param name="confirm"><b>True</b> for submit confirmation. Otherwise, <b>false</b>.</param>
            <param name="disable"><b>True</b> for submit buttons disabling.</param>
            <param name="groupError"><b>True</b> for error grouping.</param>
            <param name="errorMode"><see cref="T:System.Int32"/> representing the error mode.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.ValidationHelper.GetValidationTriggerFunction">
            <summary>
            Returns the form validation function.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.ValidationHelper.GetValidationTriggerFunction(System.String)">
            <summary>
            Returns the form validation function.
            </summary>
            <param name="formElement">Javascript expression that return the desired form.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.ValidationHelper.GetValidationTriggerFunction(System.String,System.Collections.IDictionary)">
            <summary>
            Returns the form validation function where you can override the options:
            </summary>
            <remarks>
            The options that can be overriden:
            confirm (bool), disable (bool), groupError (bool), errorMode (int)
            </remarks>
            <param name="formElement">Javascript expression that return the desired form.</param>
            <param name="options">Custom options</param>
            <returns></returns>
        </member>
        <member name="T:Castle.MonoRail.Framework.Helpers.WizardHelper">
            <summary>
            Provide useful helpers to be used in a layout view
            or in the wizards steps views.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.WizardHelper.HasNextStep">
            <summary>
            Returns <c>true</c> if the current wizard 
            flow has a next step.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.WizardHelper.HasPreviousStep">
            <summary>
            Returns <c>true</c> if the current wizard
            flow has an accessible previous step.
            </summary>
            <remarks>
            This will only return <c>true</c> if not
            the first step
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.WizardHelper.LinkToStep(System.String,Castle.MonoRail.Framework.WizardStepPage)">
            <overloads>This method has three overloads.</overloads>
            <summary>
            Creates an anchor tag (link) to the specified step.
            <code>
            &lt;a href=&quot;/page2.rails&quot;&gt;linkText&lt;/a&gt;
            </code>
            </summary>
            <param name="linkText">The label for the step</param>
            <param name="step">The WizardStepPage to link to</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.WizardHelper.LinkToStep(System.String,Castle.MonoRail.Framework.WizardStepPage,System.Object)">
            <summary>
            Creates an anchor tag (link) to the specified step.
            <code>
            &lt;a href=&quot;/page2.rails&quot;&gt;linkText&lt;/a&gt;
            </code>
            </summary>
            <param name="linkText">The label for the step</param>
            <param name="step">The WizardStepPage to link to</param>
            <param name="id">Object to use for the action ID argument.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.WizardHelper.LinkToStep(System.String,Castle.MonoRail.Framework.WizardStepPage,System.Object,System.Collections.IDictionary)">
            <summary>
            Creates an anchor tag (link) to the specified step.
            <code>
            &lt;a href=&quot;/page2.rails&quot;&gt;linkText&lt;/a&gt;
            </code>
            </summary>
            <param name="linkText">The label for the step</param>
            <param name="step">The WizardStepPage to link to</param>
            <param name="id">Object to use for the action ID argument.</param>
            <param name="attributes">Additional attributes for the <b>a</b> tag.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.WizardHelper.LinkToNext(System.String)">
            <overloads>This method has four overloads.</overloads>
            <summary>
            Creates an anchor tag (link) to the next step.
            <code>
            &lt;a href="/page2.rails"&gt;linkText&lt;/a&gt;
            </code>
            </summary>
            <remarks>
            This helper assumes there is a next step. It's advised 
            that you use <see cref="M:Castle.MonoRail.Framework.Helpers.WizardHelper.HasNextStep"/> before calling this
            </remarks>
            <param name="linkText">The label for the link</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.WizardHelper.LinkToNext(System.String,System.Collections.IDictionary)">
            <summary>
            Creates an anchor tag (link) to the next step.
            <code>
            &lt;a href="/page2.rails"&gt;linkText&lt;/a&gt;
            </code>
            </summary>
            <remarks>
            This helper assumes there is a next step. It's advised 
            that you use <see cref="M:Castle.MonoRail.Framework.Helpers.WizardHelper.HasNextStep"/> before calling this
            </remarks>
            <param name="linkText">The label for the link</param>
            <param name="attributes">Additional attributes for the <b>a</b> tag.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.WizardHelper.LinkToNext(System.String,System.Object)">
            <summary>
            Creates an anchor tag (link) with an id attribute to the next step.
            <code>
            &lt;a href="/page2.rails?Id=id"&gt;linkText&lt;/a&gt;
            </code>
            </summary>
            <remarks>
            This helper assumes there is a next step. It's advised 
            that you use <see cref="M:Castle.MonoRail.Framework.Helpers.WizardHelper.HasNextStep"/> before calling this
            </remarks>
            <param name="linkText">The label for the link</param>
            <param name="id">Object to use for the action ID argument.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.WizardHelper.LinkToNext(System.String,System.Object,System.Collections.IDictionary)">
            <summary>
            Creates an anchor tag (link) with an id attribute to the next step.
            <code>
            &lt;a href="/page2.rails?Id=id"&gt;linkText&lt;/a&gt;
            </code>
            </summary>
            <remarks>
            This helper assumes there is a previous step. It's advised 
            that you use <see cref="M:Castle.MonoRail.Framework.Helpers.WizardHelper.HasNextStep"/> before calling this
            </remarks>
            <param name="linkText">The label for the link</param>
            <param name="id">Object to use for the action ID argument.</param>
            <param name="attributes">Additional attributes for the <b>a</b> tag.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.WizardHelper.LinkToPrevious(System.String)">
            <overloads>This method has four overloads.</overloads>
            <summary>
            Creates an anchor tag (link) to the previous step.
            <code>
            &lt;a href="/page2.rails"&gt;linkText&lt;/a&gt;
            </code>
            </summary>
            <remarks>
            This helper assumes there is a previous step. It's advised 
            that you use <see cref="M:Castle.MonoRail.Framework.Helpers.WizardHelper.HasPreviousStep"/> before calling this
            </remarks>
            <param name="linkText">The label for the link</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.WizardHelper.LinkToPrevious(System.String,System.Collections.IDictionary)">
            <summary>
            Creates an anchor tag (link) to the previous step.
            <code>
            &lt;a href="/page2.rails"&gt;linkText&lt;/a&gt;
            </code>
            </summary>
            <remarks>
            This helper assumes there is a previous step. It's advised 
            that you use <see cref="M:Castle.MonoRail.Framework.Helpers.WizardHelper.HasPreviousStep"/> before calling this
            </remarks>
            <param name="linkText">The label for the link</param>
            <param name="attributes">Additional attributes for the <b>a</b> tag.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.WizardHelper.LinkToPrevious(System.String,System.Object)">
            <summary>
            Creates an anchor tag (link) with an id attribute to the previous step.
            <code>
            &lt;a href="/page2.rails?Id=id"&gt;linkText&lt;/a&gt;
            </code>
            </summary>
            <remarks>
            This helper assumes there is a previous step. It's advised 
            that you use <see cref="M:Castle.MonoRail.Framework.Helpers.WizardHelper.HasPreviousStep"/> before calling this
            </remarks>
            <param name="linkText">The label for the link</param>
            <param name="id">Object to use for the action ID argument.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.WizardHelper.LinkToPrevious(System.String,System.Object,System.Collections.IDictionary)">
            <summary>
            Creates an anchor tag (link) with an id attribute to the previous step.
            <code>
            &lt;a href="/page2.rails?Id=id"&gt;linkText&lt;/a&gt;
            </code>
            </summary>
            <remarks>
            This helper assumes there is a previous step. It's advised 
            that you use <see cref="M:Castle.MonoRail.Framework.Helpers.WizardHelper.HasPreviousStep"/> before calling this
            </remarks>
            <param name="linkText">The label for the link</param>
            <param name="id">Object to use for the action ID argument.</param>
            <param name="attributes">Additional attributes for the <b>a</b> tag.</param>
            <returns></returns>
        </member>
        <member name="P:Castle.MonoRail.Framework.Helpers.WizardHelper.PreviousStepName">
            <summary>
            Returns the name of the previous step
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.Helpers.WizardHelper.NextStepName">
            <summary>
            Returns the name of the next step
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.Helpers.ZebdaHelper">
            <summary>
            MonoRail Helper that delivers Zebda validation capabilities.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Helpers.ZebdaHelper.InstallScripts">
            <summary>
            Renders a zebda library inside a script tag.
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.Internal.ActionMetaDescriptor">
            <summary>
            Holds the meta information for a specific action
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.Internal.BaseMetaDescriptor">
            <summary>
            Common meta descriptor that represents configuration share by 
            controllers and actions.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.Internal.BaseMetaDescriptor.Layout">
            <summary>
            Gets or sets the layout descriptor.
            </summary>
            <value>The layout.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Internal.BaseMetaDescriptor.Rescues">
            <summary>
            Gets or sets the rescues descriptors.
            </summary>
            <value>The rescues.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Internal.BaseMetaDescriptor.Resources">
            <summary>
            Gets or sets the resources descriptors.
            </summary>
            <value>The resources.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Internal.ActionMetaDescriptor.SkipRescue">
            <summary>
            Gets or sets the skip rescue associated with this action.
            </summary>
            <value>The skip rescue.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Internal.ActionMetaDescriptor.AccessibleThrough">
            <summary>
            Gets or sets the accessible through definition associated with this action.
            </summary>
            <value>The accessible through.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Internal.ActionMetaDescriptor.SkipFilters">
            <summary>
            Gets the skip filters associated with this action.
            </summary>
            <value>The skip filters.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Internal.ActionMetaDescriptor.CacheConfigurers">
            <summary>
            Gets the cache configurers associated with this action.
            </summary>
            <value>The cache configurers.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Internal.ActionMetaDescriptor.TransformFilters">
            <summary>
            Gets or sets the transform filters associated with this action.
            </summary>
            <value>The transform filters.</value>
        </member>
        <member name="T:Castle.MonoRail.Framework.Internal.ControllerDescriptor">
            <summary>
            Represents the configuration associated with a <see cref="T:Castle.MonoRail.Framework.Controller"/>.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Internal.ControllerDescriptor.#ctor(System.Type,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.Internal.ControllerDescriptor"/> class.
            </summary>
            <param name="controllerType">Type of the controller.</param>
            <param name="name">The name of the controller.</param>
            <param name="area">The area associated with the controller.</param>
        </member>
        <member name="P:Castle.MonoRail.Framework.Internal.ControllerDescriptor.ControllerType">
            <summary>
            Gets the type of the controller.
            </summary>
            <value>The type of the controller.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Internal.ControllerDescriptor.Name">
            <summary>
            Gets the controller's name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Internal.ControllerDescriptor.Area">
            <summary>
            Gets the controller's area.
            </summary>
            <value>The area.</value>
        </member>
        <member name="T:Castle.MonoRail.Framework.Internal.ControllerMetaDescriptor">
            <summary>
            Holds all meta information a controller might 
            expose, so the attributes are collected only once.
            This approach translates into a huge performance boost. 
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Internal.ControllerMetaDescriptor.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.Internal.ControllerMetaDescriptor"/> class.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Internal.ControllerMetaDescriptor.GetAction(System.Reflection.MethodInfo)">
            <summary>
            Gets an action descriptor with information about an action.
            </summary>
            <param name="actionMethod">The action method.</param>
            <returns></returns>
        </member>
        <member name="P:Castle.MonoRail.Framework.Internal.ControllerMetaDescriptor.Actions">
            <summary>
            Gets the actions.
            </summary>
            <value>The actions.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Internal.ControllerMetaDescriptor.AjaxActions">
            <summary>
            Gets the ajax actions.
            </summary>
            <value>The ajax actions.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Internal.ControllerMetaDescriptor.DefaultAction">
            <summary>
            Gets or sets the default action.
            </summary>
            <value>The default action.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Internal.ControllerMetaDescriptor.Helpers">
            <summary>
            Gets or sets the helpers.
            </summary>
            <value>The helpers.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Internal.ControllerMetaDescriptor.Filters">
            <summary>
            Gets or sets the filters.
            </summary>
            <value>The filters.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Internal.ControllerMetaDescriptor.Scaffoldings">
            <summary>
            Gets the scaffoldings.
            </summary>
            <value>The scaffoldings.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Internal.ControllerMetaDescriptor.ActionProviders">
            <summary>
            Gets the action providers.
            </summary>
            <value>The action providers.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Internal.ControllerMetaDescriptor.TransformFilters">
            <summary>
            Gets or sets the transform filters.
            </summary>
            <value>The transform filters.</value>
        </member>
        <member name="T:Castle.MonoRail.Framework.Internal.FilterDescriptor">
            <summary>
            Represents the meta information and type of
            an implementation of <see cref="T:Castle.MonoRail.Framework.IFilter"/>.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Internal.FilterDescriptor.#ctor(System.Type,Castle.MonoRail.Framework.ExecuteEnum,System.Int32,Castle.MonoRail.Framework.FilterAttribute)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.Internal.FilterDescriptor"/> class.
            </summary>
            <param name="filterType">Type of the filter.</param>
            <param name="when">The flag that defines when it should run.</param>
            <param name="executionOrder">The execution order.</param>
            <param name="attribute">The attribute.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Internal.FilterDescriptor.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="P:Castle.MonoRail.Framework.Internal.FilterDescriptor.FilterType">
            <summary>
            Gets the type of the filter.
            </summary>
            <value>The type of the filter.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Internal.FilterDescriptor.When">
            <summary>
            Gets the flag that defines when it should run.
            </summary>
            <value>The when.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Internal.FilterDescriptor.ExecutionOrder">
            <summary>
            Gets the execution order.
            </summary>
            <value>The execution order.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Internal.FilterDescriptor.FilterInstance">
            <summary>
            Gets or sets the filter instance.
            </summary>
            <value>The filter instance.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Internal.FilterDescriptor.Attribute">
            <summary>
            Gets or sets the attribute.
            </summary>
            <value>The attribute.</value>
        </member>
        <member name="T:Castle.MonoRail.Framework.Internal.HelperDescriptor">
            <summary>
            Represents the information about a Helper class
            associated with a <see cref="T:Castle.MonoRail.Framework.Controller"/>
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Internal.HelperDescriptor.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.Internal.HelperDescriptor"/> class.
            </summary>
            <param name="helperType">Type of the helper.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Internal.HelperDescriptor.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.Internal.HelperDescriptor"/> class.
            </summary>
            <param name="helperType">Type of the helper.</param>
            <param name="name">A custom name to use to access the helper from the view.</param>
        </member>
        <member name="P:Castle.MonoRail.Framework.Internal.HelperDescriptor.Name">
            <summary>
            Gets the helper name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Internal.HelperDescriptor.HelperType">
            <summary>
            Gets the type of the helper.
            </summary>
            <value>The type of the helper.</value>
        </member>
        <member name="T:Castle.MonoRail.Framework.Internal.LayoutDescriptor">
            <summary>
            Represents a layout configuration
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Internal.LayoutDescriptor.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.Internal.LayoutDescriptor"/> class.
            </summary>
            <param name="layoutName">Name of the layout.</param>
        </member>
        <member name="P:Castle.MonoRail.Framework.Internal.LayoutDescriptor.LayoutName">
            <summary>
            Gets the name of the layout.
            </summary>
            <value>The name of the layout.</value>
        </member>
        <member name="T:Castle.MonoRail.Framework.Internal.RescueDescriptor">
            <summary>
            Represents a rescue configuration
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Internal.RescueDescriptor.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.Internal.RescueDescriptor"/> class.
            </summary>
            <param name="viewName">Name of the rescue view.</param>
            <param name="exceptionType">Type of the exception it is associated with.</param>
        </member>
        <member name="P:Castle.MonoRail.Framework.Internal.RescueDescriptor.ViewName">
            <summary>
            Gets the name of the rescue view.
            </summary>
            <value>The name of the view.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Internal.RescueDescriptor.ExceptionType">
            <summary>
            Gets the type of the exception this rescue is associated with.
            </summary>
            <value>The type of the exception.</value>
        </member>
        <member name="T:Castle.MonoRail.Framework.Internal.ResourceDescriptor">
            <summary>
            Represents a resource configuration associated with a controller.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Internal.ResourceDescriptor.#ctor(System.Type,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.Internal.ResourceDescriptor"/> class.
            </summary>
            <param name="resourceType">Type that has the resource.</param>
            <param name="name">The name.</param>
            <param name="resourceName">Name of the resource.</param>
            <param name="cultureName">Name of the culture.</param>
            <param name="assemblyName">Name of the assembly.</param>
        </member>
        <member name="P:Castle.MonoRail.Framework.Internal.ResourceDescriptor.ResourceType">
            <summary>
            Gets the type that has the resource.
            </summary>
            <value>The type that has the resource.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Internal.ResourceDescriptor.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Internal.ResourceDescriptor.ResourceName">
            <summary>
            Gets the name of the resource.
            </summary>
            <value>The name of the resource.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Internal.ResourceDescriptor.CultureName">
            <summary>
            Gets the name of the culture.
            </summary>
            <value>The name of the culture.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Internal.ResourceDescriptor.AssemblyName">
            <summary>
            Gets the name of the assembly.
            </summary>
            <value>The name of the assembly.</value>
        </member>
        <member name="T:Castle.MonoRail.Framework.Internal.TransformFilterDescriptor">
            <summary>
            Represents the meta information and type of
            an implementation of <see cref="T:Castle.MonoRail.Framework.ITransformFilter"/>.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Internal.TransformFilterDescriptor.#ctor(System.Type,System.Int32,Castle.MonoRail.Framework.TransformFilterAttribute)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.Internal.TransformFilterDescriptor"/> class.
            </summary>
            <param name="transformFilterType">Type of the transform filter.</param>
            <param name="executionOrder">The execution order.</param>
            <param name="attribute">The attribute.</param>
        </member>
        <member name="P:Castle.MonoRail.Framework.Internal.TransformFilterDescriptor.Attribute">
            <summary>
            Gets the attribute.
            </summary>
            <value>The attribute.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Internal.TransformFilterDescriptor.TransformFilterType">
            <summary>
            Gets the type of the transform filter.
            </summary>
            <value>The type of the transform filter.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Internal.TransformFilterDescriptor.ExecutionOrder">
            <summary>
            Gets the execution order.
            </summary>
            <value>The execution order.</value>
        </member>
        <member name="T:Castle.MonoRail.Framework.Internal.DefaultFilterDescriptorProvider">
            <summary>
            Creates <see cref="T:Castle.MonoRail.Framework.Internal.FilterDescriptor"/> from attributes 
            associated with the <see cref="T:Castle.MonoRail.Framework.Controller"/>
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.Internal.IFilterDescriptorProvider">
            <summary>
            Defines the contract to an implementation 
            that wish to create <see cref="T:Castle.MonoRail.Framework.Internal.FilterDescriptor"/>.
            </summary>
            <remarks>
            The default implementation creates the descriptors
            based on <see cref="T:Castle.MonoRail.Framework.FilterAttribute"/> associated
            with the controller
            </remarks>
        </member>
        <member name="T:Castle.MonoRail.Framework.Internal.IProvider">
            <summary>
            Base interface for providers
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Internal.IFilterDescriptorProvider.CollectFilters(System.Type)">
            <summary>
            Implementors should collect the filter information
            and return descriptors instances, or an empty array if none 
            was found.
            </summary>
            <param name="controllerType">The controller type</param>
            <returns>An array of <see cref="T:Castle.MonoRail.Framework.Internal.FilterDescriptor"/></returns>
        </member>
        <member name="F:Castle.MonoRail.Framework.Internal.DefaultFilterDescriptorProvider.logger">
            <summary>
            The logger instance
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Internal.DefaultFilterDescriptorProvider.Service(System.IServiceProvider)">
            <summary>
            Invoked by the framework in order to give a chance to
            obtain other services
            </summary>
            <param name="provider">The service proviver</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Internal.DefaultFilterDescriptorProvider.CollectFilters(System.Type)">
            <summary>
            Implementors should collect the filter information
            and return descriptors instances, or an empty array if none
            was found.
            </summary>
            <param name="controllerType">The controller type</param>
            <returns>
            An array of <see cref="T:Castle.MonoRail.Framework.Internal.FilterDescriptor"/>
            </returns>
        </member>
        <member name="T:Castle.MonoRail.Framework.Internal.DefaultHelperDescriptorProvider">
            <summary>
            Creates <see cref="T:Castle.MonoRail.Framework.Internal.HelperDescriptor"/> from attributes 
            associated with the <see cref="T:Castle.MonoRail.Framework.Controller"/>
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.Internal.IHelperDescriptorProvider">
            <summary>
            Defines the contract to an implementation 
            that wish to create <see cref="T:Castle.MonoRail.Framework.Internal.HelperDescriptor"/>.
            </summary>
            <remarks>
            The default implementation creates the descriptors
            based on <see cref="T:Castle.MonoRail.Framework.HelperAttribute"/> associated
            with the controller
            </remarks>
        </member>
        <member name="M:Castle.MonoRail.Framework.Internal.IHelperDescriptorProvider.CollectHelpers(System.Type)">
            <summary>
            Implementors should collect the helper information
            and return descriptors instances, or an empty array if none 
            was found.
            </summary>
            <param name="controllerType">The controller type</param>
            <returns>An array of <see cref="T:Castle.MonoRail.Framework.Internal.HelperDescriptor"/></returns>
        </member>
        <member name="F:Castle.MonoRail.Framework.Internal.DefaultHelperDescriptorProvider.logger">
            <summary>
            The logger instance
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Internal.DefaultHelperDescriptorProvider.Service(System.IServiceProvider)">
            <summary>
            Invoked by the framework in order to give a chance to
            obtain other services
            </summary>
            <param name="provider">The service proviver</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Internal.DefaultHelperDescriptorProvider.CollectHelpers(System.Type)">
            <summary>
            Implementors should collect the helper information
            and return descriptors instances, or an empty array if none
            was found.
            </summary>
            <param name="controllerType">The controller type</param>
            <returns>
            An array of <see cref="T:Castle.MonoRail.Framework.Internal.HelperDescriptor"/>
            </returns>
        </member>
        <member name="T:Castle.MonoRail.Framework.Internal.DefaultLayoutDescriptorProvider">
            <summary>
            Creates <see cref="T:Castle.MonoRail.Framework.Internal.LayoutDescriptor"/> from attributes 
            associated with the <see cref="T:Castle.MonoRail.Framework.Controller"/> and its actions
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.Internal.ILayoutDescriptorProvider">
            <summary>
            Defines the contract to an implementation 
            that wish to create <see cref="T:Castle.MonoRail.Framework.Internal.LayoutDescriptor"/>.
            </summary>
            <remarks>
            The default implementation creates the descriptors
            based on <see cref="T:Castle.MonoRail.Framework.LayoutAttribute"/> associated
            with the controller
            </remarks>
        </member>
        <member name="M:Castle.MonoRail.Framework.Internal.ILayoutDescriptorProvider.CollectLayout(System.Reflection.MemberInfo)">
            <summary>
            Implementors should collect the layout information
            and return a descriptor instance, or null if none 
            was found.
            </summary>
            <param name="memberInfo">The controller type or action (MethodInfo)</param>
            <returns>An <see cref="T:Castle.MonoRail.Framework.Internal.LayoutDescriptor"/> instance</returns>
        </member>
        <member name="F:Castle.MonoRail.Framework.Internal.DefaultLayoutDescriptorProvider.logger">
            <summary>
            The logger instance
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Internal.DefaultLayoutDescriptorProvider.Service(System.IServiceProvider)">
            <summary>
            Invoked by the framework in order to give a chance to
            obtain other services
            </summary>
            <param name="provider">The service proviver</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Internal.DefaultLayoutDescriptorProvider.CollectLayout(System.Reflection.MemberInfo)">
            <summary>
            Implementors should collect the layout information
            and return a descriptor instance, or null if none
            was found.
            </summary>
            <param name="memberInfo">The controller type or action (MethodInfo)</param>
            <returns>
            An <see cref="T:Castle.MonoRail.Framework.Internal.LayoutDescriptor"/> instance
            </returns>
        </member>
        <member name="T:Castle.MonoRail.Framework.Internal.DefaultRescueDescriptorProvider">
            <summary>
            Creates <see cref="T:Castle.MonoRail.Framework.Internal.RescueDescriptor"/> from attributes 
            associated with the <see cref="T:Castle.MonoRail.Framework.Controller"/>
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.Internal.IRescueDescriptorProvider">
            <summary>
            Defines the contract to an implementation 
            that wish to create <see cref="T:Castle.MonoRail.Framework.Internal.RescueDescriptor"/>.
            </summary>
            <remarks>
            The default implementation creates the descriptors
            based on <see cref="T:Castle.MonoRail.Framework.RescueAttribute"/> associated
            with the controller
            </remarks>
        </member>
        <member name="M:Castle.MonoRail.Framework.Internal.IRescueDescriptorProvider.CollectRescues(System.Type)">
            <summary>
            Implementors should collect the rescue information
            and return descriptors instances, or an empty array if none 
            was found.
            </summary>
            <param name="memberInfo">The controller type</param>
            <returns>An array of <see cref="T:Castle.MonoRail.Framework.Internal.RescueDescriptor"/></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Internal.IRescueDescriptorProvider.CollectRescues(System.Reflection.MethodInfo)">
            <summary>
            Implementors should collect the rescue information
            and return descriptors instances, or an empty array if none 
            was found.
            </summary>
            <param name="memberInfo">The action (MethodInfo)</param>
            <returns>An array of <see cref="T:Castle.MonoRail.Framework.Internal.RescueDescriptor"/></returns>
        </member>
        <member name="F:Castle.MonoRail.Framework.Internal.DefaultRescueDescriptorProvider.logger">
            <summary>
            The logger instance
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Internal.DefaultRescueDescriptorProvider.Service(System.IServiceProvider)">
            <summary>
            Invoked by the framework in order to give a chance to
            obtain other services
            </summary>
            <param name="provider">The service proviver</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Internal.DefaultRescueDescriptorProvider.CollectRescues(System.Type)">
            <summary>
            Collects the rescues.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Internal.DefaultRescueDescriptorProvider.CollectRescues(System.Reflection.MethodInfo)">
            <summary>
            Implementors should collect the rescue information
            and return descriptors instances, or an empty array if none
            was found.
            </summary>
            <param name="memberInfo">The action (MethodInfo)</param>
            <returns>
            An array of <see cref="T:Castle.MonoRail.Framework.Internal.RescueDescriptor"/>
            </returns>
        </member>
        <member name="T:Castle.MonoRail.Framework.Internal.DefaultResourceDescriptorProvider">
            <summary>
            Creates <see cref="T:Castle.MonoRail.Framework.Internal.ResourceDescriptor"/> from attributes 
            associated with the <see cref="T:Castle.MonoRail.Framework.Controller"/>
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.Internal.IResourceDescriptorProvider">
            <summary>
            Defines the contract to an implementation 
            that wish to create <see cref="T:Castle.MonoRail.Framework.Internal.ResourceDescriptor"/>.
            </summary>
            <remarks>
            The default implementation creates the descriptors
            based on <see cref="T:Castle.MonoRail.Framework.ResourceAttribute"/> associated
            with the controller
            </remarks>
        </member>
        <member name="M:Castle.MonoRail.Framework.Internal.IResourceDescriptorProvider.CollectResources(System.Reflection.MemberInfo)">
            <summary>
            Implementors should collect the resource information
            and return descriptors instances, or an empty array if none 
            was found.
            </summary>
            <param name="member">The controller or action (MethodInfo)</param>
            <returns>An array of <see cref="T:Castle.MonoRail.Framework.Internal.ResourceDescriptor"/></returns>
        </member>
        <member name="F:Castle.MonoRail.Framework.Internal.DefaultResourceDescriptorProvider.logger">
            <summary>
            The logger instance
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Internal.DefaultResourceDescriptorProvider.Service(System.IServiceProvider)">
            <summary>
            Invoked by the framework in order to give a chance to
            obtain other services
            </summary>
            <param name="provider">The service proviver</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Internal.DefaultResourceDescriptorProvider.CollectResources(System.Reflection.MemberInfo)">
            <summary>
            Collects the resources.
            </summary>
            <param name="memberInfo">The member info.</param>
            <returns></returns>
        </member>
        <member name="T:Castle.MonoRail.Framework.Internal.DefaultTransformFilterDescriptorProvider">
            <summary>
            Creates <see cref="T:Castle.MonoRail.Framework.Internal.TransformFilterDescriptor"/> from attributes 
            associated with the <see cref="T:Castle.MonoRail.Framework.Controller"/>
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.Internal.ITransformFilterDescriptorProvider">
            <summary>
            Defines the contract to an implementation 
            that wish to create <see cref="T:Castle.MonoRail.Framework.Internal.TransformFilterDescriptor"/>.
            </summary>
            <remarks>
            The default implementation creates the descriptors
            based on <see cref="T:Castle.MonoRail.Framework.TransformFilterAttribute"/> associated
            with the actions on the controller. 
            </remarks>
        </member>
        <member name="M:Castle.MonoRail.Framework.Internal.ITransformFilterDescriptorProvider.CollectFilters(System.Reflection.MemberInfo)">
            <summary>
            Implementors should collect the transformfilter information
            and return descriptors instances, or an empty array if none 
            was found.
            </summary>
            <param name="memberInfo">The action (MethodInfo)</param>
            <returns>An array of <see cref="T:Castle.MonoRail.Framework.Internal.TransformFilterDescriptor"/></returns>
        </member>
        <member name="F:Castle.MonoRail.Framework.Internal.DefaultTransformFilterDescriptorProvider.logger">
            <summary>
            The logger instance
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Internal.DefaultTransformFilterDescriptorProvider.Service(System.IServiceProvider)">
            <summary>
            Invoked by the framework in order to give a chance to
            obtain other services
            </summary>
            <param name="provider">The service proviver</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Internal.DefaultTransformFilterDescriptorProvider.CollectFilters(System.Reflection.MemberInfo)">
            <summary>
            Implementors should collect the transformfilter information
            and return descriptors instances, or an empty array if none
            was found.
            </summary>
            <param name="memberInfo">The action (MethodInfo)</param>
            <returns>
            An array of <see cref="T:Castle.MonoRail.Framework.Internal.TransformFilterDescriptor"/>
            </returns>
        </member>
        <member name="T:Castle.MonoRail.Framework.Internal.Test.TestContextHolder">
            <summary>
            Helper class to store the context to be used 
            for the test cases (that use the ASP.Net Runtime)
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Internal.Test.TestContextHolder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.Internal.Test.TestContextHolder"/> class.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Internal.Test.TestContextHolder.SetContext(System.Web.HttpContext)">
            <summary>
            Sets the context.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="P:Castle.MonoRail.Framework.Internal.Test.TestContextHolder.Context">
            <summary>
            Gets the context.
            </summary>
            <value>The context.</value>
        </member>
        <member name="T:Castle.MonoRail.Framework.Internal.ActionProviderUtil">
            <summary>
            Util class that deals with action providers
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Internal.ActionProviderUtil.RegisterActions(Castle.MonoRail.Framework.Controller)">
            <summary>
            Registers the actions on the controller.
            </summary>
            <param name="controller">The controller.</param>
        </member>
        <member name="T:Castle.MonoRail.Framework.AssemblySourceInfo">
            <summary>
            Represents a source of views in an assembly resource.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.AssemblySourceInfo.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.AssemblySourceInfo"/> class.
            </summary>
            <param name="assemblyName">Name of the assembly.</param>
            <param name="_namespace">The _namespace.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.AssemblySourceInfo.HasTemplate(System.String)">
            <summary>
            Determines whether the assembly has the specified template.
            </summary>
            <param name="templateName">Name of the template.</param>
            <returns>
            	<c>true</c> if the specified exists on the assembly; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.AssemblySourceInfo.GetTemplateStream(System.String)">
            <summary>
            Gets the template stream.
            </summary>
            <param name="templateName">Name of the template.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.AssemblySourceInfo.CollectViews(System.String,System.Collections.ArrayList)">
            <summary>
            Collects the views on the assembly resource.
            </summary>
            <param name="dirName">Name of the dir.</param>
            <param name="views">The views.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.AssemblySourceInfo.NormalizeTemplateName(System.String)">
            <summary>
            Normalizes the name of the template.
            </summary>
            <param name="templateName">Name of the template.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.AssemblySourceInfo.RegisterEntries">
            <summary>
            Registers the entries.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.AssemblySourceInfo.AssemblyName">
            <summary>
            Gets the name of the assembly.
            </summary>
            <value>The name of the assembly.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.AssemblySourceInfo.Namespace">
            <summary>
            Gets the namespace.
            </summary>
            <value>The namespace.</value>
        </member>
        <member name="T:Castle.MonoRail.Framework.Internal.CommonUtils">
            <summary>
            Code shared by Helpers/Controllers/Others
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Internal.CommonUtils.ObtainEntry(System.Collections.IDictionary,System.String)">
            <summary>
            Obtains the entry.
            </summary>
            <param name="attributes">The attributes.</param>
            <param name="key">The key.</param>
            <returns>The generated form element</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Internal.CommonUtils.ObtainEntry(System.Collections.IDictionary,System.String,System.String)">
            <summary>
            Obtains the entry.
            </summary>
            <param name="attributes">The attributes.</param>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value.</param>
            <returns>the entry value or the default value</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Internal.CommonUtils.ObtainEntryAndRemove(System.Collections.IDictionary,System.String,System.String)">
            <summary>
            Obtains the entry and remove it if found.
            </summary>
            <param name="attributes">The attributes.</param>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value.</param>
            <returns>the entry value or the default value</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Internal.CommonUtils.ObtainEntryAndRemove(System.Collections.IDictionary,System.String)">
            <summary>
            Obtains the entry and remove it if found.
            </summary>
            <param name="attributes">The attributes.</param>
            <param name="key">The key.</param>
            <returns>the entry value or null</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Internal.CommonUtils.ObtainObjectEntryAndRemove(System.Collections.IDictionary,System.String)">
            <summary>
            Obtains the entry and remove it if found.
            </summary>
            <param name="attributes">The attributes.</param>
            <param name="key">The key.</param>
            <returns>the entry value or null</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Internal.CommonUtils.MergeOptions(System.Collections.IDictionary,System.Collections.IDictionary)">
            <summary>
            Merges <paramref name="userOptions"/> with <paramref name="defaultOptions"/> placing results in
            <paramref name="userOptions"/>.
            </summary>
            <param name="userOptions">The user options.</param>
            <param name="defaultOptions">The default options.</param>
            <remarks>
            All <see cref="P:System.Collections.IDictionary.Values"/> and <see cref="P:System.Collections.IDictionary.Keys"/> in <paramref name="defaultOptions"/>
            are copied to <paramref name="userOptions"/>. Entries with the same <see cref="P:System.Collections.DictionaryEntry.Key"/> in
            <paramref name="defaultOptions"/> and <paramref name="userOptions"/> are skipped.
            </remarks>
        </member>
        <member name="M:Castle.MonoRail.Framework.Internal.CommonUtils.BuildQueryString(Castle.MonoRail.Framework.IServerUtility,System.Collections.Specialized.NameValueCollection,System.Boolean)">
            <summary>
            Builds a query string.
            </summary>
            <remarks>
            Supports multi-value query strings, using any
            <see cref="T:System.Collections.IEnumerable"/> as a value.
            </remarks>
            <param name="parameters">The parameters</param>
            <param name="serverUtil">The server utility instance</param>
            <param name="encodeAmp">if <c>true</c>, the separation of entries will be encoded.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Internal.CommonUtils.BuildQueryString(Castle.MonoRail.Framework.IServerUtility,System.Collections.IDictionary,System.Boolean)">
            <summary>
            Builds a query string.
            </summary>
            <remarks>
            Supports multi-value query strings, using any
            <see cref="T:System.Collections.IEnumerable"/> as a value.
            <example>
            <code>
            IDictionary dict = new Hashtable();
            dict.Add("id", 5);
            dict.Add("selectedItem", new int[] { 2, 4, 99 });
            string querystring = BuildQueryString(dict);
            // should result in: "id=5&amp;selectedItem=2&amp;selectedItem=4&amp;selectedItem=99&amp;"
            </code>
            </example>
            </remarks>
            <param name="parameters">The parameters</param>
            <param name="serverUtil">The server utility instance</param>
            <param name="encodeAmp">if <c>true</c>, the separation of entries will be encoded.</param>
        </member>
        <member name="T:Castle.MonoRail.Framework.Internal.JSCollectionGeneratorBase">
            <summary>
            Collection related generator
            </summary>
            <remarks>
            Not really implemented.
            </remarks>
        </member>
        <member name="F:Castle.MonoRail.Framework.Internal.JSCollectionGeneratorBase.generator">
            <summary>
            Collection generator instance
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Internal.JSCollectionGeneratorBase.parentGenerator">
            <summary>
            Parent generator instance
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Internal.JSCollectionGeneratorBase.#ctor(Castle.MonoRail.Framework.Helpers.IJSCollectionGenerator)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.Internal.JSCollectionGeneratorBase"/> class.
            </summary>
            <param name="generator">The generator.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Internal.JSCollectionGeneratorBase.InternalGet(System.String)">
            <summary>
            Defines the behavior when a property is read
            </summary>
            <param name="propName">Property name.</param>
            <returns>value back to the template</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Internal.JSCollectionGeneratorBase.InternalInvoke(System.String,System.Object[])">
            <summary>
            Invokes the specified method.
            </summary>
            <param name="method">The method name.</param>
            <param name="args">The method arguments.</param>
            <returns>value back to the template</returns>
        </member>
        <member name="T:Castle.MonoRail.Framework.Internal.JSElementGeneratorBase">
            <summary>
            Operations related to an element
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Internal.JSElementGeneratorBase.generator">
            <summary>
            Element generator instance
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Internal.JSElementGeneratorBase.parentGenerator">
            <summary>
            Parent Generator instance
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Internal.JSElementGeneratorBase.#ctor(Castle.MonoRail.Framework.Helpers.IJSElementGenerator)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.Internal.JSElementGeneratorBase"/> class.
            </summary>
            <param name="generator">The generator.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Internal.JSElementGeneratorBase.InternalGet(System.String)">
            <summary>
            Generates a get statement
            </summary>
            <param name="propName">Name of the prop.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Internal.JSElementGeneratorBase.InternalInvoke(System.String,System.Object[])">
            <summary>
            Dispatches the invocation (late bound)
            </summary>
            <param name="method">The method.</param>
            <param name="args">The args.</param>
            <returns></returns>
        </member>
        <member name="T:Castle.MonoRail.Framework.Internal.JSGeneratorBase">
            <summary>
            Abstract class that contains the shared logic of JS Generation, separated from
            the various view engines implementations
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Internal.JSGeneratorBase.generator">
            <summary>
            The generator instance
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Internal.JSGeneratorBase.#ctor(Castle.MonoRail.Framework.Helpers.IJSGenerator)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.Internal.JSGeneratorBase"/> class.
            </summary>
            <param name="generator">The generator.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Internal.JSGeneratorBase.InternalInvoke(System.String,System.Object[])">
            <summary>
            Executes an operation (totally late bound)
            </summary>
            <param name="method">The method.</param>
            <param name="args">The args.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Internal.JSGeneratorBase.CreateNullGenerator">
            <summary>
            Creates a null generator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Internal.JSGeneratorBase.CreateJSCollectionGenerator(Castle.MonoRail.Framework.Helpers.IJSCollectionGenerator)">
            <summary>
            Creates a JS collection generator.
            </summary>
            <param name="collectionGenerator">The collection generator.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Internal.JSGeneratorBase.CreateJSElementGenerator(Castle.MonoRail.Framework.Helpers.IJSElementGenerator)">
            <summary>
            Creates a JS element generator.
            </summary>
            <param name="elementGenerator">The element generator.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Internal.JSGeneratorBase.ToString">
            <summary>
            Delegates to the generator
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="T:Castle.MonoRail.Framework.Internal.ResourceDictionary">
            <summary>
            Simple strong typed dictionary for IResource instances.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Internal.ResourceDictionary.Add(System.Object,Castle.MonoRail.Framework.IResource)">
            <summary>
            Adds the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="resource">The resource.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Internal.ResourceDictionary.Remove(System.Object)">
            <summary>
            Removes the specified key.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Internal.ResourceDictionary.Contains(System.Object)">
            <summary>
            Determines whether the resource contains the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns>
            	<c>true</c> if the resource contains it; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Internal.ResourceDictionary.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Internal.ResourceDictionary.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">array is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than zero. </exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or- index is equal to or greater than the length of array.-or- The number of elements in the source <see cref="T:System.Collections.ICollection"></see> is greater than the available space from index to the end of the destination array. </exception>
            <exception cref="T:System.InvalidCastException">The type of the source <see cref="T:System.Collections.ICollection"></see> cannot be cast automatically to the type of the destination array. </exception>
        </member>
        <member name="M:Castle.MonoRail.Framework.Internal.ResourceDictionary.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Castle.MonoRail.Framework.Internal.ResourceDictionary.Item(System.Object)">
            <summary>
            Gets or sets the <see cref="T:Castle.MonoRail.Framework.IResource"/> with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Internal.ResourceDictionary.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.ICollection"></see>.
            </summary>
            <value></value>
            <returns>The number of elements contained in the <see cref="T:System.Collections.ICollection"></see>.</returns>
        </member>
        <member name="P:Castle.MonoRail.Framework.Internal.ResourceDictionary.Values">
            <summary>
            Gets the values.
            </summary>
            <value>The values.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Internal.ResourceDictionary.Keys">
            <summary>
            Gets the keys.
            </summary>
            <value>The keys.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Internal.ResourceDictionary.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe).
            </summary>
            <value></value>
            <returns>true if access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe); otherwise, false.</returns>
        </member>
        <member name="P:Castle.MonoRail.Framework.Internal.ResourceDictionary.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.
            </summary>
            <value></value>
            <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.</returns>
        </member>
        <member name="T:Castle.MonoRail.Framework.Internal.ResourceFacade">
            <summary>
            Simple facade that provides the IResource interface to a
            ResourceManager instance.
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.IResource">
            <summary>
            Dictates the contract for resources that are publishable
            through the PropertyBag context.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.IResource.GetString(System.String)">
            <summary>
            Returns the object linked to the specific key as a string.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.IResource.GetObject(System.String)">
            <summary>
            Returns the object linked to the specific key.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.IResource.Item(System.String)">
            <summary>
            Returns the object linked to the specific key.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Internal.ResourceFacade.#ctor(System.Resources.ResourceManager,System.Globalization.CultureInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.Internal.ResourceFacade"/> class.
            </summary>
            <param name="resourceManager">The resource manager.</param>
            <param name="cultureInfo">The culture info.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Internal.ResourceFacade.GetObject(System.String)">
            <summary>
            Returns the object linked to the specific key.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Internal.ResourceFacade.GetString(System.String)">
            <summary>
            Returns the object linked to the specific key as a string.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Internal.ResourceFacade.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Internal.ResourceFacade.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Castle.MonoRail.Framework.Internal.ResourceFacade.Item(System.String)">
            <summary>
            Returns the object linked to the specific key.
            </summary>
            <value></value>
        </member>
        <member name="T:Castle.MonoRail.Framework.ScaffoldException">
            <summary>
            Exception to be used by scaffolding implementations
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.RailsException">
            <summary>
            Base exception for monorail exceptions
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.RailsException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.RailsException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.RailsException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.RailsException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="args">The args.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.RailsException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.RailsException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.RailsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.RailsException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.ScaffoldException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.ScaffoldException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.ScaffoldException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.ScaffoldException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.ScaffoldException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.ScaffoldException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:Castle.MonoRail.Framework.UrlInfo">
            <summary>
            Represents the tokenized information from an Url.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.UrlInfo.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.UrlInfo"/> class.
            </summary>
            <param name="area">The area.</param>
            <param name="controller">The controller.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.UrlInfo.#ctor(System.String,System.String,System.String,System.String,System.Int32,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.UrlInfo"/> class.
            </summary>
            <param name="domain">The domain (host).</param>
            <param name="subdomain">The subdomain (first token on the domain).</param>
            <param name="protocol">Protocol (http/https)</param>
            <param name="port">The port.</param>
            <param name="urlRaw">The raw URL.</param>
            <param name="area">The area, or empty.</param>
            <param name="controller">The controller name.</param>
            <param name="action">The action name.</param>
            <param name="extension">The file extension.</param>
            <param name="appVirtualDir">The application virtual dir.</param>
        </member>
        <member name="P:Castle.MonoRail.Framework.UrlInfo.AppVirtualDir">
            <summary>
            Gets the app virtual dir.
            </summary>
            <value>The app virtual dir.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.UrlInfo.Port">
            <summary>
            Gets the port.
            </summary>
            <value>The port.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.UrlInfo.Domain">
            <summary>
            Gets the domain.
            </summary>
            <value>The domain.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.UrlInfo.Subdomain">
            <summary>
            Gets the subdomain.
            </summary>
            <value>The subdomain.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.UrlInfo.UrlRaw">
            <summary>
            Gets the URL raw.
            </summary>
            <value>The URL raw.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.UrlInfo.Area">
            <summary>
            Gets the area.
            </summary>
            <value>The area.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.UrlInfo.Controller">
            <summary>
            Gets the controller.
            </summary>
            <value>The controller.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.UrlInfo.Action">
            <summary>
            Gets the action.
            </summary>
            <value>The action.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.UrlInfo.Protocol">
            <summary>
            Gets the protocol.
            </summary>
            <value>The protocol.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.UrlInfo.Extension">
            <summary>
            The URL extension, without the leading dot.
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.Internal.UrlTokenizerException">
            <summary>
            Represents a problem during the Url information extraction.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Internal.UrlTokenizerException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.Internal.UrlTokenizerException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Internal.UrlTokenizerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.Internal.UrlTokenizerException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:Castle.MonoRail.Framework.Internal.ViewEngineInfo">
            <summary>
            Represents a view engine configuration
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Internal.ViewEngineInfo.#ctor(System.Type,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.Internal.ViewEngineInfo"/> class.
            </summary>
            <param name="engine">The engine.</param>
            <param name="xhtmlRendering">if set to <c>true</c> [XHTML rendering].</param>
        </member>
        <member name="P:Castle.MonoRail.Framework.Internal.ViewEngineInfo.Engine">
            <summary>
            Gets or sets the View Engine type.
            </summary>
            <value>The View Engine type.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Internal.ViewEngineInfo.XhtmlRendering">
            <summary>
            Gets or sets a value indicating whether 
            the view engine should send the content using the xhtml mime type. 
            </summary>
            <value><c>true</c> if xhtml mime type should be used; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Castle.MonoRail.Framework.Internal.WizardUtils">
            <summary>
            Utility class for wizard related queries and operations
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Internal.WizardUtils.ConstructWizardNamespace(Castle.MonoRail.Framework.Controller)">
            <summary>
            Constructs the wizard namespace.
            </summary>
            <param name="controller">The controller.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Internal.WizardUtils.HasPreviousStep(Castle.MonoRail.Framework.Controller)">
            <summary>
            Determines whether the current wizard has a previous step.
            </summary>
            <param name="controller">The controller.</param>
            <returns>
            	<c>true</c> if has previous step; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Internal.WizardUtils.HasNextStep(Castle.MonoRail.Framework.Controller)">
            <summary>
            Determines whether the current wizard has a next step.
            </summary>
            <param name="controller">The controller.</param>
            <returns>
            	<c>true</c> if has next step; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Internal.WizardUtils.GetPreviousStepName(Castle.MonoRail.Framework.Controller)">
            <summary>
            Gets the name of the previous step.
            </summary>
            <param name="controller">The controller.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Internal.WizardUtils.GetNextStepName(Castle.MonoRail.Framework.Controller)">
            <summary>
            Gets the name of the next step.
            </summary>
            <param name="controller">The controller.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Internal.WizardUtils.RegisterCurrentStepInfo(Castle.MonoRail.Framework.Controller,System.String)">
            <summary>
            Registers the current step info/state.
            </summary>
            <param name="controller">The controller.</param>
            <param name="actionName">Name of the action.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Internal.WizardUtils.RegisterCurrentStepInfo(Castle.MonoRail.Framework.Controller,System.Int32,System.String)">
            <summary>
            Registers the current step info/state.
            </summary>
            <param name="controller">The controller.</param>
            <param name="stepIndex">Index of the step.</param>
            <param name="stepName">Name of the step.</param>
        </member>
        <member name="T:Castle.MonoRail.Framework.Services.AjaxProxyGenerator.IAjaxProxyGenerator">
            <summary>
            Provides a service which generates a <em>JavaScript</em> block, that
            can be used to call Ajax actions on the controller.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.AjaxProxyGenerator.IAjaxProxyGenerator.GenerateJSProxy(Castle.MonoRail.Framework.IRailsEngineContext,System.String,System.String,System.String)">
            <summary>
            Generates an AJAX JavaScript proxy for a given controller.
            </summary>
            <param name="context">The context of the current request</param>
            <param name="proxyName">Name of the javascript proxy object</param>
            <param name="controller">Controller which will be target of the proxy</param>
            <param name="area">area which the controller belongs to</param>
        </member>
        <member name="T:Castle.MonoRail.Framework.Services.AjaxProxyGenerator.PrototypeAjaxProxyGenerator">
            <summary>
            Provides a service which generates a <em>JavaScript</em> block, that
            can be used to call Ajax actions on the controller. This JavaScript will
            use the <em>Prototype</em> syntax.
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Services.AjaxProxyGenerator.PrototypeAjaxProxyGenerator.logger">
            <summary>
            The logger instance
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.AjaxProxyGenerator.PrototypeAjaxProxyGenerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.Services.AjaxProxyGenerator.PrototypeAjaxProxyGenerator"/> class.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.AjaxProxyGenerator.PrototypeAjaxProxyGenerator.Service(System.IServiceProvider)">
            <summary>
            Invoked by the framework in order to give a chance to
            obtain other services
            </summary>
            <param name="provider">The service proviver</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.AjaxProxyGenerator.PrototypeAjaxProxyGenerator.GenerateJSProxy(Castle.MonoRail.Framework.IRailsEngineContext,System.String,System.String,System.String)">
            <summary>
            Generates an AJAX JavaScript proxy for a given controller.
            </summary>
            <param name="context">The context of the current request</param>
            <param name="proxyName">Name of the javascript proxy object</param>
            <param name="controller">Controller which will be target of the proxy</param>
            <param name="area">area which the controller belongs to</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.AjaxProxyGenerator.PrototypeAjaxProxyGenerator.GetParameterName(System.Reflection.ParameterInfo)">
            <summary>
            Gets the name of the parameter.
            </summary>
            <param name="paramInfo">The parameterInfo.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.AjaxProxyGenerator.PrototypeAjaxProxyGenerator.GetPropertyValue(System.Object,System.String)">
            <summary>
            Gets the property value.
            </summary>
            <param name="obj">The obj.</param>
            <param name="propName">Name of the prop.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.AjaxProxyGenerator.PrototypeAjaxProxyGenerator.GetSingleAttribute(System.Reflection.ICustomAttributeProvider,System.Type,System.Boolean)">
            <summary>
            Gets the single attribute.
            </summary>
            <param name="obj">The obj.</param>
            <param name="attributeType">Type of the attribute.</param>
            <param name="inherit">if set to <c>true</c> [inherit].</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.AjaxProxyGenerator.PrototypeAjaxProxyGenerator.ToCamelCase(System.String)">
            <summary>
            Toes the camel case.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="T:Castle.MonoRail.Framework.Services.Utils.ControllerInspectionUtil">
            <summary>
            Utilities methods to inspect the controller Type
            and gathers its name and area.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.Utils.ControllerInspectionUtil.Inspect(System.Type)">
            <summary>
            Creates a <see cref="T:Castle.MonoRail.Framework.Internal.ControllerDescriptor"/> based on the conventions
            and possible attributes found for the Controller Type specified
            </summary>
            <param name="controllerType">The controller type</param>
            <returns>A controller descriptor</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.Utils.ControllerInspectionUtil.ObtainControllerName(System.String,System.Type)">
            <summary>
            Obtains the name of the controller.
            </summary>
            <param name="name">The name.</param>
            <param name="controller">The controller.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.Utils.ControllerInspectionUtil.Strip(System.String)">
            <summary>
            Strips the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="T:Castle.MonoRail.Framework.Services.AbstractControllerFactory">
            <summary>
            Base implementation of <see cref="T:Castle.MonoRail.Framework.IControllerFactory"/>
            using the <see cref="T:Castle.MonoRail.Framework.Services.DefaultControllerTree"/> to build an hierarchy
            of controllers and the areas they belong to.
            <seealso cref="T:Castle.MonoRail.Framework.Services.DefaultControllerTree"/>
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.IControllerFactory">
            <summary>
            Depicts the contract the engine has 
            to perform the creation and disposal of
            <see cref="T:Castle.MonoRail.Framework.Controller"/> instances.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.IControllerFactory.CreateController(Castle.MonoRail.Framework.UrlInfo)">
            <summary>
            Implementors should perform their logic to 
            return a instance of <see cref="T:Castle.MonoRail.Framework.Controller"/>.
            If the <see cref="T:Castle.MonoRail.Framework.Controller"/> can not be found,
            it should return <c>null</c>.
            </summary>
            <param name="urlInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.IControllerFactory.Release(Castle.MonoRail.Framework.Controller)">
            <summary>
            Implementors should perform their logic 
            to release the <see cref="T:Castle.MonoRail.Framework.Controller"/> instance
            and its resources.
            </summary>
            <param name="controller"></param>
        </member>
        <member name="F:Castle.MonoRail.Framework.Services.AbstractControllerFactory.tree">
            <summary>
            The controller tree. A binary tree that contains
            all controllers registered
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Services.AbstractControllerFactory.logger">
            <summary>
            The logger instance
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.AbstractControllerFactory.#ctor">
            <summary>
            Initializes an <c>AbstractControllerFactory</c> instance
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.AbstractControllerFactory.Initialize">
            <summary>
            Invoked by the framework in order to initialize the state
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.AbstractControllerFactory.Service(System.IServiceProvider)">
            <summary>
            Invoked by the framework in order to give a chance to
            obtain other services
            </summary>
            <param name="provider">The service proviver</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.AbstractControllerFactory.CreateController(Castle.MonoRail.Framework.UrlInfo)">
            <summary>
            Implementors should perform their logic to
            return a instance of <see cref="T:Castle.MonoRail.Framework.Controller"/>.
            If the <see cref="T:Castle.MonoRail.Framework.Controller"/> can not be found,
            it should return <c>null</c>.
            </summary>
            <param name="urlInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.AbstractControllerFactory.Release(Castle.MonoRail.Framework.Controller)">
            <summary>
            Implementors should perform their logic
            to release the <see cref="T:Castle.MonoRail.Framework.Controller"/> instance
            and its resources.
            </summary>
            <param name="controller"></param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.AbstractControllerFactory.AddBuiltInControllers">
            <summary>
            Register built-in controller that serve static files
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.AbstractControllerFactory.CreateControllerInstance(System.String,System.String)">
            <summary>
            Creates the controller instance.
            </summary>
            <param name="area">The area.</param>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="P:Castle.MonoRail.Framework.Services.AbstractControllerFactory.Tree">
            <summary>
            Gets the tree.
            </summary>
            <value>The tree.</value>
        </member>
        <member name="T:Castle.MonoRail.Framework.Services.AbstractViewComponentFactory">
            <summary>
            Base implementation for <see cref="T:Castle.MonoRail.Framework.IViewComponentFactory"/>
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.IViewComponentFactory">
            <summary>
            Depicts the contract used by the view engine
            to obtain implementations of <see cref="T:Castle.MonoRail.Framework.ViewComponent"/>.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.IViewComponentFactory.Create(System.String)">
            <summary>
            Creates the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="F:Castle.MonoRail.Framework.Services.AbstractViewComponentFactory.logger">
            <summary>
            The logger instance
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.AbstractViewComponentFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.Services.AbstractViewComponentFactory"/> class.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.AbstractViewComponentFactory.Initialize">
            <summary>
            Invoked by the framework in order to initialize the state
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.AbstractViewComponentFactory.Service(System.IServiceProvider)">
            <summary>
            Invoked by the framework in order to give a chance to
            obtain other services
            </summary>
            <param name="provider">The service proviver</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.AbstractViewComponentFactory.Create(System.String)">
            <summary>
            Creates an instance of the requested <see cref="T:Castle.MonoRail.Framework.ViewComponent"/>
            </summary>
            <param name="name">The view component's name</param>
            <returns>The view component instance</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.AbstractViewComponentFactory.ResolveType(System.String)">
            <summary>
            Resolves the type.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.AbstractViewComponentFactory.Release(Castle.MonoRail.Framework.ViewComponent)">
            <summary>
            Releases a ViewComponent instance
            </summary>
            <remarks>
            Not currently used
            </remarks>
            <param name="instance"></param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.AbstractViewComponentFactory.AddBuiltInComponents">
            <summary>
            Registers viewcomponents provided by default.
            <seealso cref="T:Castle.MonoRail.Framework.ViewComponents.CaptureFor"/>
            <seealso cref="T:Castle.MonoRail.Framework.ViewComponents.SecurityComponent"/>
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.AbstractViewComponentFactory.RegisterComponent(System.String,System.Type)">
            <summary>
            Registers a view component type.
            </summary>
            <param name="name">The view components's name</param>
            <param name="type">The view component's which must extend <see cref="T:Castle.MonoRail.Framework.ViewComponent"/></param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.AbstractViewComponentFactory.GetViewComponentRegistry">
            <summary>
            Gets the view component registry.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Castle.MonoRail.Framework.Services.AbstractViewComponentFactory.ViewEngine">
            <summary>
            Implementors should return a reference to 
            the current view engine.
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.Services.DefaultCacheProvider">
            <summary>
            Simple implementation of <see cref="T:Castle.MonoRail.Framework.ICacheProvider"/>
            that relies on ASP.Net Cache
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.ICacheProvider">
            <summary>
            Depicts the contract for cache provider. Was
            created to be used with providers like memcached.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.ICacheProvider.HasKey(System.String)">
            <summary>
            Determines whether the specified key is on the cache.
            </summary>
            <param name="key">The key.</param>
            <returns>
            	<c>true</c> if the cache has the key; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.ICacheProvider.Get(System.String)">
            <summary>
            Gets the cache item by the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.ICacheProvider.Store(System.String,System.Object)">
            <summary>
            Stores the cache item by the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="data">The data.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.ICacheProvider.Delete(System.String)">
            <summary>
            Deletes the cache item by the specified key.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="F:Castle.MonoRail.Framework.Services.DefaultCacheProvider.logger">
            <summary>
            The logger instance
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultCacheProvider.Service(System.IServiceProvider)">
            <summary>
            Invoked by the framework in order to give a chance to
            obtain other services
            </summary>
            <param name="provider">The service proviver</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultCacheProvider.HasKey(System.String)">
            <summary>
            Determines whether the specified key is on the cache.
            </summary>
            <param name="key">The key.</param>
            <returns>
            	<c>true</c> if the cache has the key; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultCacheProvider.Get(System.String)">
            <summary>
            Gets the cache item by the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultCacheProvider.Store(System.String,System.Object)">
            <summary>
            Stores the cache item by the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="data">The data.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultCacheProvider.Delete(System.String)">
            <summary>
            Deletes the cache item by the specified key.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultCacheProvider.GetCurrentContext">
            <summary>
            Gets the current context.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Castle.MonoRail.Framework.Services.DefaultControllerDescriptorProvider">
            <summary>
            Constructs and caches all collected information
            about a <see cref="T:Castle.MonoRail.Framework.Controller"/> and its actions.
            <seealso cref="T:Castle.MonoRail.Framework.Internal.ControllerMetaDescriptor"/>
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.IControllerDescriptorProvider">
            <summary>
            Defines the contract for implementations that should
            collect from one or more sources the meta information that
            dictates the <see cref="T:Castle.MonoRail.Framework.Controller"/> behavior and the actions it exposes.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.IControllerDescriptorProvider.BuildDescriptor(Castle.MonoRail.Framework.Controller)">
            <summary>
            Builds the descriptor.
            </summary>
            <param name="controller">The controller.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.IControllerDescriptorProvider.BuildDescriptor(System.Type)">
            <summary>
            Builds the descriptor.
            </summary>
            <param name="controllerType">Type of the controller.</param>
            <returns></returns>
        </member>
        <member name="F:Castle.MonoRail.Framework.Services.DefaultControllerDescriptorProvider.logger">
            <summary>
            The logger instance
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Services.DefaultControllerDescriptorProvider.locker">
            <summary>
            Used to lock the cache
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultControllerDescriptorProvider.Service(System.IServiceProvider)">
            <summary>
            Services the specified service provider.
            </summary>
            <param name="serviceProvider">The service provider.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultControllerDescriptorProvider.BuildDescriptor(Castle.MonoRail.Framework.Controller)">
            <summary>
            Constructs and populates a <see cref="T:Castle.MonoRail.Framework.Internal.ControllerMetaDescriptor"/>.
            </summary>
            <remarks>
            This implementation is also responsible for caching 
            constructed meta descriptors.
            </remarks>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultControllerDescriptorProvider.BuildDescriptor(System.Type)">
            <summary>
            Constructs and populates a <see cref="T:Castle.MonoRail.Framework.Internal.ControllerMetaDescriptor"/>.
            </summary>
            <remarks>
            This implementation is also responsible for caching 
            constructed meta descriptors.
            </remarks>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultControllerDescriptorProvider.InternalBuildDescriptor(System.Type)">
            <summary>
            Builds the <see cref="T:Castle.MonoRail.Framework.Internal.ControllerMetaDescriptor"/> for the specified controller type
            </summary>
            <param name="controllerType">Type of the controller.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultControllerDescriptorProvider.CollectActions(System.Type,Castle.MonoRail.Framework.Internal.ControllerMetaDescriptor)">
            <summary>
            Collects the actions.
            </summary>
            <param name="controllerType">Type of the controller.</param>
            <param name="desc">The desc.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultControllerDescriptorProvider.CollectActionLevelAttributes(Castle.MonoRail.Framework.Internal.ControllerMetaDescriptor)">
            <summary>
            Collects the action level attributes.
            </summary>
            <param name="descriptor">The descriptor.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultControllerDescriptorProvider.CollectActionAttributes(System.Reflection.MethodInfo,Castle.MonoRail.Framework.Internal.ControllerMetaDescriptor)">
            <summary>
            Collects the action attributes.
            </summary>
            <param name="method">The method.</param>
            <param name="descriptor">The descriptor.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultControllerDescriptorProvider.CollectSkipRescue(Castle.MonoRail.Framework.Internal.ActionMetaDescriptor,System.Reflection.MethodInfo)">
            <summary>
            Collects the skip rescue.
            </summary>
            <param name="actionDescriptor">The action descriptor.</param>
            <param name="method">The method.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultControllerDescriptorProvider.CollectAccessibleThrough(Castle.MonoRail.Framework.Internal.ActionMetaDescriptor,System.Reflection.MethodInfo)">
            <summary>
            Collects the accessible through.
            </summary>
            <param name="actionDescriptor">The action descriptor.</param>
            <param name="method">The method.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultControllerDescriptorProvider.CollectSkipFilter(Castle.MonoRail.Framework.Internal.ActionMetaDescriptor,System.Reflection.MethodInfo)">
            <summary>
            Collects the skip filter.
            </summary>
            <param name="actionDescriptor">The action descriptor.</param>
            <param name="method">The method.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultControllerDescriptorProvider.CollectResources(Castle.MonoRail.Framework.Internal.BaseMetaDescriptor,System.Reflection.MemberInfo)">
            <summary>
            Collects the resources.
            </summary>
            <param name="desc">The desc.</param>
            <param name="memberInfo">The member info.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultControllerDescriptorProvider.CollectTransformFilter(Castle.MonoRail.Framework.Internal.ActionMetaDescriptor,System.Reflection.MethodInfo)">
            <summary>
            Collects the transform filter.
            </summary>
            <param name="actionDescriptor">The action descriptor.</param>
            <param name="method">The method.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultControllerDescriptorProvider.GetRealControllerType(System.Type)">
            <summary>
            Gets the real controller type, instead of the proxy type.
            </summary>
            <remarks>
            Workaround for DYNPROXY-14 bug. See: http://support.castleproject.org/browse/DYNPROXY-14
            </remarks>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultControllerDescriptorProvider.CollectClassLevelAttributes(System.Type,Castle.MonoRail.Framework.Internal.ControllerMetaDescriptor)">
            <summary>
            Collects the class level attributes.
            </summary>
            <param name="controllerType">Type of the controller.</param>
            <param name="descriptor">The descriptor.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultControllerDescriptorProvider.CollectDefaultAction(Castle.MonoRail.Framework.Internal.ControllerMetaDescriptor,System.Type)">
            <summary>
            Collects the default action.
            </summary>
            <param name="descriptor">The descriptor.</param>
            <param name="controllerType">Type of the controller.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultControllerDescriptorProvider.CollectScaffolding(Castle.MonoRail.Framework.Internal.ControllerMetaDescriptor,System.Type)">
            <summary>
            Collects the scaffolding.
            </summary>
            <param name="descriptor">The descriptor.</param>
            <param name="controllerType">Type of the controller.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultControllerDescriptorProvider.CollectDynamicAction(Castle.MonoRail.Framework.Internal.ControllerMetaDescriptor,System.Type)">
            <summary>
            Collects the dynamic action.
            </summary>
            <param name="descriptor">The descriptor.</param>
            <param name="controllerType">Type of the controller.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultControllerDescriptorProvider.CollectHelpers(Castle.MonoRail.Framework.Internal.ControllerMetaDescriptor,System.Type)">
            <summary>
            Collects the helpers.
            </summary>
            <param name="descriptor">The descriptor.</param>
            <param name="controllerType">Type of the controller.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultControllerDescriptorProvider.CollectFilters(Castle.MonoRail.Framework.Internal.ControllerMetaDescriptor,System.Type)">
            <summary>
            Collects the filters.
            </summary>
            <param name="descriptor">The descriptor.</param>
            <param name="controllerType">Type of the controller.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultControllerDescriptorProvider.CollectLayout(Castle.MonoRail.Framework.Internal.BaseMetaDescriptor,System.Reflection.MemberInfo)">
            <summary>
            Collects the layout.
            </summary>
            <param name="descriptor">The descriptor.</param>
            <param name="memberInfo">The member info.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultControllerDescriptorProvider.CollectRescues(Castle.MonoRail.Framework.Internal.BaseMetaDescriptor,System.Reflection.MethodInfo)">
            <summary>
            Collects the rescues.
            </summary>
            <param name="descriptor">The descriptor.</param>
            <param name="memberInfo">The member info.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultControllerDescriptorProvider.CollectRescues(Castle.MonoRail.Framework.Internal.BaseMetaDescriptor,System.Type)">
            <summary>
            Collects the rescues.
            </summary>
            <param name="descriptor">The descriptor.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultControllerDescriptorProvider.CollectCacheConfigures(Castle.MonoRail.Framework.Internal.ActionMetaDescriptor,System.Reflection.MemberInfo)">
            <summary>
            Collects the cache configures.
            </summary>
            <param name="descriptor">The descriptor.</param>
            <param name="memberInfo">The member info.</param>
        </member>
        <member name="T:Castle.MonoRail.Framework.Services.DefaultControllerDescriptorProvider.FilterDescriptorComparer">
            <summary>
            This <see cref="T:System.Collections.IComparer"/> implementation
            is used to sort the filters based on their Execution Order.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultControllerDescriptorProvider.FilterDescriptorComparer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.Services.DefaultControllerDescriptorProvider.FilterDescriptorComparer"/> class.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultControllerDescriptorProvider.FilterDescriptorComparer.Compare(System.Object,System.Object)">
            <summary>
            Compares the specified left.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="P:Castle.MonoRail.Framework.Services.DefaultControllerDescriptorProvider.FilterDescriptorComparer.Instance">
            <summary>
            Gets the instance.
            </summary>
            <value>The instance.</value>
        </member>
        <member name="T:Castle.MonoRail.Framework.Services.DefaultControllerDescriptorProvider.TransformFilterDescriptorComparer">
            <summary>
            This <see cref="T:System.Collections.IComparer"/> implementation
            is used to sort the transformfilters based on their Execution Order.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultControllerDescriptorProvider.TransformFilterDescriptorComparer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.Services.DefaultControllerDescriptorProvider.TransformFilterDescriptorComparer"/> class.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultControllerDescriptorProvider.TransformFilterDescriptorComparer.Compare(System.Object,System.Object)">
            <summary>
            Compares the specified left.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns></returns>
        </member>
        <member name="P:Castle.MonoRail.Framework.Services.DefaultControllerDescriptorProvider.TransformFilterDescriptorComparer.Instance">
            <summary>
            Gets the instance.
            </summary>
            <value>The instance.</value>
        </member>
        <member name="T:Castle.MonoRail.Framework.Services.DefaultControllerFactory">
            <summary>
            Standard implementation of <see cref="T:Castle.MonoRail.Framework.IControllerFactory"/>.
            It inspects assemblies looking for concrete classes
            that extend <see cref="T:Castle.MonoRail.Framework.Controller"/>.
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Services.DefaultControllerFactory.logger">
            <summary>
            The logger instance
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultControllerFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.Services.DefaultControllerFactory"/> class.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultControllerFactory.Initialize">
            <summary>
            Invoked by the framework in order to initialize the state
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultControllerFactory.Service(System.IServiceProvider)">
            <summary>
            Invoked by the framework in order to give a chance to
            obtain other services
            </summary>
            <param name="provider">The service proviver</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultControllerFactory.Inspect(System.String)">
            <summary>
            Loads the assembly and inspect its public types.
            </summary>
            <param name="assemblyFileName"></param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultControllerFactory.Inspect(System.Reflection.Assembly)">
            <summary>
            Inspect the assembly's public types.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultControllerFactory.RegisterController(Castle.MonoRail.Framework.Internal.ControllerDescriptor)">
            <summary>
            Registers the controller.
            </summary>
            <param name="descriptor">The descriptor.</param>
        </member>
        <member name="T:Castle.MonoRail.Framework.Services.DefaultControllerLifecycleExecutorFactory">
            <summary>
            Default implementation of <see cref="T:Castle.MonoRail.Framework.IControllerLifecycleExecutorFactory"/>
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.IControllerLifecycleExecutorFactory">
            <summary>
            Depicts the contract for a 
            <see cref="T:Castle.MonoRail.Framework.IControllerLifecycleExecutor"/> factory.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.IControllerLifecycleExecutorFactory.CreateExecutor(Castle.MonoRail.Framework.Controller,Castle.MonoRail.Framework.IRailsEngineContext)">
            <summary>
            Creates an executor instance
            </summary>
            <returns>An <see cref="T:Castle.MonoRail.Framework.IControllerLifecycleExecutor"/> 
            implementation</returns>
            <param name="controller">Controller instance (cannot be null)</param>
            <param name="context">Request context (cannot be null)</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultControllerLifecycleExecutorFactory.CreateExecutor(Castle.MonoRail.Framework.Controller,Castle.MonoRail.Framework.IRailsEngineContext)">
            <summary>
            Creates an executor instance
            </summary>
            <returns>An <see cref="T:Castle.MonoRail.Framework.IControllerLifecycleExecutor"/> 
            implementation</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultControllerLifecycleExecutorFactory.Service(System.IServiceProvider)">
            <summary>
            Services the specified provider.
            </summary>
            <param name="provider">The provider.</param>
        </member>
        <member name="T:Castle.MonoRail.Framework.Services.DefaultControllerTree">
            <summary>
            Default implementation of <see cref="T:Castle.MonoRail.Framework.IControllerTree"/>.
            Represents an binary tree of registered controllers.
            <para>
            It is used by the controller factory to resolve a controller instance
            based on the specified area (which is optional) and controller name
            </para>
            <seealso cref="T:Castle.MonoRail.Framework.IControllerTree"/>
            <seealso cref="T:Castle.MonoRail.Framework.Services.AbstractControllerFactory"/>
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.IControllerTree">
            <summary>
            Represents an binary tree of registered controllers.
            <para>
            It is used by the controller factory to resolve a controller instance
            based on the specified area (which is optional) and controller name
            </para>
            <seealso cref="T:Castle.MonoRail.Framework.Services.AbstractControllerFactory"/>
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.IControllerTree.AddController(System.String,System.String,System.Type)">
            <summary>
            Register a controller on the tree. If the specified
            area name matches the current node, the controller is
            register on the node itself, otherwise on the right or 
            on the left node.
            </summary>
            <remarks>
            Note that the controller is an <c>object</c>. That allows
            different implementation of a controller factory to register
            different representation of what a controller is (a name, a descriptor etc)
            </remarks>
            <param name="areaName">The area name, or <c>String.Empty</c></param>
            <param name="controllerName">The controller name</param>
            <param name="controller">The controller representation</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.IControllerTree.GetController(System.String,System.String)">
            <summary>
            Returns a controller previously registered. 
            </summary>
            <param name="areaName">The area name, or <c>String.Empty</c></param>
            <param name="controllerName">The controller name</param>
            <returns>The controller representation or null</returns>
        </member>
        <member name="F:Castle.MonoRail.Framework.Services.DefaultControllerTree.area">
            <summary>
            The area the controller belongs to. 
            The default area is <c>String.Empty</c>
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Services.DefaultControllerTree.controllers">
            <summary>
            A dictionary of controllers that belongs to this node (area)
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Services.DefaultControllerTree.left">
            <summary>
            The controllers node on the left
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Services.DefaultControllerTree.right">
            <summary>
            The controllers node on the right
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultControllerTree.#ctor">
            <summary>
            Constructs a <c>ControllerTree</c> with an empty area
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultControllerTree.#ctor(System.String)">
            <summary>
            Constructs a <c>ControllerTree</c> specifying an area
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultControllerTree.AddController(System.String,System.String,System.Type)">
            <summary>
            Register a controller on the tree. If the specified
            area name matches the current node, the controller is
            register on the node itself, otherwise on the right or 
            on the left node.
            </summary>
            <remarks>
            Note that the controller is an <c>object</c>. That allows
            different implementation of a controller factory to register
            different representation of what a controller is (a name, a descriptor etc)
            </remarks>
            <param name="areaName">The area name, or <c>String.Empty</c></param>
            <param name="controllerName">The controller name</param>
            <param name="controller">The controller representation</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultControllerTree.GetController(System.String,System.String)">
            <summary>
            Returns a controller previously registered. 
            </summary>
            <param name="areaName">The area name, or <c>String.Empty</c></param>
            <param name="controllerName">The controller name</param>
            <returns>The controller representation or null</returns>
        </member>
        <member name="T:Castle.MonoRail.Framework.Services.DefaultFilterFactory">
            <summary>
            Standard implementation of <see cref="T:Castle.MonoRail.Framework.IFilterFactory"/>.
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.IFilterFactory">
            <summary>
            Depicts the contract used by the engine
            to obtain implementations of <see cref="T:Castle.MonoRail.Framework.IFilter"/>.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.IFilterFactory.Create(System.Type)">
            <summary>
            Creates the specified filter type.
            </summary>
            <param name="filterType">Type of the filter.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.IFilterFactory.Release(Castle.MonoRail.Framework.IFilter)">
            <summary>
            Releases the specified filter.
            </summary>
            <param name="filter">The filter.</param>
        </member>
        <member name="F:Castle.MonoRail.Framework.Services.DefaultFilterFactory.logger">
            <summary>
            The logger instance
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultFilterFactory.Service(System.IServiceProvider)">
            <summary>
            Invoked by the framework in order to give a chance to
            obtain other services
            </summary>
            <param name="provider">The service proviver</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultFilterFactory.Create(System.Type)">
            <summary>
            Creates a filter instance
            </summary>
            <param name="filterType">The filter's type</param>
            <returns>The filter instance</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultFilterFactory.Release(Castle.MonoRail.Framework.IFilter)">
            <summary>
            Releases a filter instance
            </summary>
            <param name="filter">The filter instance</param>
        </member>
        <member name="T:Castle.MonoRail.Framework.Services.DefaultResourceFactory">
            <summary>
            Standard implementation of <see cref="T:Castle.MonoRail.Framework.IResourceFactory"/>
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.IResourceFactory">
            <summary>
            Depicts the contract used by the engine
            to obtain implementations of <see cref="T:Castle.MonoRail.Framework.IResource"/>.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.IResourceFactory.Create(Castle.MonoRail.Framework.Internal.ResourceDescriptor,System.Reflection.Assembly)">
            <summary>
            Creates the specified descriptor.
            </summary>
            <param name="descriptor">The descriptor.</param>
            <param name="appAssembly">The app assembly.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.IResourceFactory.Release(Castle.MonoRail.Framework.IResource)">
            <summary>
            Releases the specified resource.
            </summary>
            <param name="resource">The resource.</param>
        </member>
        <member name="F:Castle.MonoRail.Framework.Services.DefaultResourceFactory.logger">
            <summary>
            The logger instance
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultResourceFactory.Service(System.IServiceProvider)">
            <summary>
            Invoked by the framework in order to give a chance to
            obtain other services
            </summary>
            <param name="provider">The service proviver</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultResourceFactory.Create(Castle.MonoRail.Framework.Internal.ResourceDescriptor,System.Reflection.Assembly)">
            <summary>
            Creates an implementation of <see cref="T:Castle.MonoRail.Framework.IResource"/>
            based on the descriptor.
            <seealso cref="T:System.Resources.ResourceManager"/>
            <seealso cref="T:Castle.MonoRail.Framework.Internal.ResourceFacade"/>
            </summary>
            <param name="descriptor"></param>
            <param name="appAssembly"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultResourceFactory.Release(Castle.MonoRail.Framework.IResource)">
            <summary>
            Releases a resource
            </summary>
            <param name="resource"></param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultResourceFactory.ResolveCulture(System.String)">
            <summary>
            Resolves the culture by name.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultResourceFactory.ResolveAssembly(System.String,System.Reflection.Assembly)">
            <summary>
            Resolves the assembly.
            </summary>
            <param name="name">The name.</param>
            <param name="assembly">The assembly.</param>
            <returns></returns>
        </member>
        <member name="T:Castle.MonoRail.Framework.Services.DefaultTransformFilterFactory">
            <summary>
            Standard implementation of <see cref="T:Castle.MonoRail.Framework.ITransformFilterFactory"/>.
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.ITransformFilterFactory">
            <summary>
            Depicts the contract used by the engine
            to obtain implementations of <see cref="T:Castle.MonoRail.Framework.ITransformFilter"/>.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.ITransformFilterFactory.Create(System.Type,System.IO.Stream)">
            <summary>
            Creates the specified transform filter type.
            </summary>
            <param name="transformFilterType">Type of the transform filter.</param>
            <param name="baseStream">The base stream.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.ITransformFilterFactory.Release(Castle.MonoRail.Framework.ITransformFilter)">
            <summary>
            Releases the specified transform filter.
            </summary>
            <param name="transformFilter">The transform filter.</param>
        </member>
        <member name="F:Castle.MonoRail.Framework.Services.DefaultTransformFilterFactory.logger">
            <summary>
            The logger instance
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultTransformFilterFactory.Service(System.IServiceProvider)">
            <summary>
            Invoked by the framework in order to give a chance to
            obtain other services
            </summary>
            <param name="provider">The service proviver</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultTransformFilterFactory.Create(System.Type,System.IO.Stream)">
            <summary>
            Creates a transformfilter instance
            </summary>
            <param name="transformFilterType">The transformfilter's type</param>
            <param name="baseStream">The filter's basestream to write to</param>
            <returns>The transformfilter instance</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultTransformFilterFactory.Release(Castle.MonoRail.Framework.ITransformFilter)">
            <summary>
            Releases a transformfilter instance
            </summary>
            <param name="transformFilter">The filter instance</param>
        </member>
        <member name="T:Castle.MonoRail.Framework.Services.DefaultUrlBuilder">
            <summary>
            Default implementation of <see cref="T:Castle.MonoRail.Framework.IUrlBuilder"/>	
            </summary>
            <remarks>
            The property <see cref="P:Castle.MonoRail.Framework.Services.DefaultUrlBuilder.UseExtensions"/> defines whether the builder should output
            file extension. This might be handy to use in combination with a url rewrite strategy
            
            <para>
            If you want to create a custom urlbuilder, you can extend this one and override 
            the <see cref="M:Castle.MonoRail.Framework.Services.DefaultUrlBuilder.InternalBuildUrl(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.String)"/>
            </para>
            
            </remarks>
            <seealso cref="M:Castle.MonoRail.Framework.Services.DefaultUrlBuilder.BuildUrl(Castle.MonoRail.Framework.UrlInfo,System.Collections.IDictionary)"/>
        </member>
        <member name="T:Castle.MonoRail.Framework.IUrlBuilder">
            <summary>
            THe UrlBuilder service centralizes the url generation used by the whole 
            framework including redirect urls, urls generated by helpers and so on. 
            It offers a central place to change MonoRail behavior on how to deal with urls. 
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.IUrlBuilder.BuildUrl(Castle.MonoRail.Framework.UrlInfo,System.Collections.IDictionary)">
            <summary>
            Builds the URL using the current url as contextual information and a parameter dictionary.
            <para>
            Common parameters includes area, controller and action. 
            </para>
            </summary>
            <param name="current">The current Url information.</param>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.IUrlBuilder.BuildUrl(Castle.MonoRail.Framework.UrlInfo,System.String,System.String)">
            <summary>
            Builds an URL using the controller name and action name.
            </summary>
            <param name="current">The current Url information.</param>
            <param name="controller">The controller.</param>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.IUrlBuilder.BuildUrl(Castle.MonoRail.Framework.UrlInfo,System.String,System.String,System.Collections.IDictionary)">
            <summary>
            Builds an URL using the controller name, action name, and a querystring dictionary.
            </summary>
            <param name="current">The current Url information.</param>
            <param name="controller">The controller.</param>
            <param name="action">The action.</param>
            <param name="queryStringParams">The query string params.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.IUrlBuilder.BuildUrl(Castle.MonoRail.Framework.UrlInfo,System.String,System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Builds an URL using the controller name, action name, and a querystring name value collection.
            </summary>
            <param name="current">The current Url information.</param>
            <param name="controller">The controller.</param>
            <param name="action">The action.</param>
            <param name="queryStringParams">The query string params.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.IUrlBuilder.BuildUrl(Castle.MonoRail.Framework.UrlInfo,System.String,System.String,System.String)">
            <summary>
            Builds an URL using the area name, controller name and action name.
            </summary>
            <param name="current">The current Url information.</param>
            <param name="area">The area.</param>
            <param name="controller">The controller.</param>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.IUrlBuilder.BuildUrl(Castle.MonoRail.Framework.UrlInfo,System.String,System.String,System.String,System.Collections.IDictionary)">
            <summary>
            Builds an URL using the area name, controller name, action name, and a querystring dictionary.
            </summary>
            <param name="current">The current Url information.</param>
            <param name="area">The area.</param>
            <param name="controller">The controller.</param>
            <param name="action">The action.</param>
            <param name="queryStringParams">The query string params.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.IUrlBuilder.BuildUrl(Castle.MonoRail.Framework.UrlInfo,System.String,System.String,System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Builds an URL using the area name, controller name, action name, and a querystring name value collection.
            </summary>
            <param name="current">The current Url information.</param>
            <param name="area">The area.</param>
            <param name="controller">The controller.</param>
            <param name="action">The action.</param>
            <param name="queryStringParams">The query string params.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultUrlBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.Services.DefaultUrlBuilder"/> class.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultUrlBuilder.Service(System.IServiceProvider)">
            <summary>
            Services the specified provider.
            </summary>
            <param name="provider">The provider.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultUrlBuilder.BuildUrl(Castle.MonoRail.Framework.UrlInfo,System.Collections.IDictionary)">
            <summary>
            Builds the URL using the current url as contextual information and a parameter dictionary.
            
            </summary>
            
            <remarks>
            <para>
            Common parameters includes <c>area</c>, <c>controller</c> and <c>action</c>, which outputs
            <c>/area/controller/name.extension</c>
            </para>
            
            <para>
            Please note that if you dont specify an area or controller name, they will be inferred from the 
            context. If you want to use an empty area, you must specify <c>area=''</c>. 
            This is commonly a source of confusion, so understand the following cases:
            </para>
            
            <example>
            <code>
            UrlInfo current = ... // Assume that the current is area Admin, controller Products and action List
            
            BuildUrl(current, {action: 'view'})
            // returns /Admin/Products/view.castle
            
            BuildUrl(current, {controller: 'Home', action: 'index'})
            // returns /Admin/Home/index.castle
             
            BuildUrl(current, {area:'', controller: 'Home', action: 'index'})
            // returns /Home/index.castle
            </code>
            </example>
            
            <para>
            The <c>querystring</c> parameter can be a string or a dictionary. It appends a query string to the url:
            <c>/area/controller/name.extension?id=1</c>
            </para>
            
            <para>
            The <c>absolute</c> parameter forces the builder to output a full url like
            <c>http://hostname/virtualdir/area/controller/name.extension</c>
            </para>
            
            <para>
            The <c>encode</c> parameter forces the builder to encode the querystring
            <c>/controller/name.extension?id=1&amp;name=John</c> which is required to output full xhtml compliant content.
            </para>
            
            </remarks>
            <param name="current">The current Url information.</param>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultUrlBuilder.BuildUrl(Castle.MonoRail.Framework.UrlInfo,System.String,System.String)">
            <summary>
            Builds an URL using the controller name and action name.
            </summary>
            <param name="current">The current Url information.</param>
            <param name="controller">The controller.</param>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultUrlBuilder.BuildUrl(Castle.MonoRail.Framework.UrlInfo,System.String,System.String,System.Collections.IDictionary)">
            <summary>
            Builds an URL using the controller name, action name, and a querystring dictionary.
            </summary>
            <param name="current">The current Url information.</param>
            <param name="controller">The controller.</param>
            <param name="action">The action.</param>
            <param name="queryStringParams">The query string params.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultUrlBuilder.BuildUrl(Castle.MonoRail.Framework.UrlInfo,System.String,System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Builds an URL using the controller name, action name, and a querystring name value collection.
            </summary>
            <param name="current">The current Url information.</param>
            <param name="controller">The controller.</param>
            <param name="action">The action.</param>
            <param name="queryStringParams">The query string params.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultUrlBuilder.BuildUrl(Castle.MonoRail.Framework.UrlInfo,System.String,System.String,System.String)">
            <summary>
            Builds an URL using the area name, controller name and action name.
            </summary>
            <param name="current">The current Url information.</param>
            <param name="area">The area.</param>
            <param name="controller">The controller.</param>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultUrlBuilder.BuildUrl(Castle.MonoRail.Framework.UrlInfo,System.String,System.String,System.String,System.Collections.IDictionary)">
            <summary>
            Builds an URL using the area name, controller name, action name, and a querystring dictionary.
            </summary>
            <param name="current">The current Url information.</param>
            <param name="area">The area.</param>
            <param name="controller">The controller.</param>
            <param name="action">The action.</param>
            <param name="queryStringParams">The query string params.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultUrlBuilder.BuildUrl(Castle.MonoRail.Framework.UrlInfo,System.String,System.String,System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Builds an URL using the area name, controller name, action name, and a querystring name value collection.
            </summary>
            <param name="current">The current Url information.</param>
            <param name="area">The area.</param>
            <param name="controller">The controller.</param>
            <param name="action">The action.</param>
            <param name="queryStringParams">The query string params.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultUrlBuilder.InternalBuildUrl(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.String)">
            <summary>
            Internals the build URL.
            </summary>
            <param name="area">The area.</param>
            <param name="controller">The controller.</param>
            <param name="action">The action.</param>
            <param name="protocol">The protocol.</param>
            <param name="port">The port.</param>
            <param name="domain">The domain.</param>
            <param name="subdomain">The subdomain.</param>
            <param name="appVirtualDir">The app virtual dir.</param>
            <param name="extension">The extension.</param>
            <param name="absolutePath">if set to <c>true</c> [absolute path].</param>
            <param name="applySubdomain">if set to <c>true</c> [apply subdomain].</param>
            <param name="suffix">The suffix.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultUrlBuilder.InternalBuildUrl(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.String,System.String)">
            <summary>
            Internals the build URL.
            </summary>
            <param name="area">The area.</param>
            <param name="controller">The controller.</param>
            <param name="action">The action.</param>
            <param name="protocol">The protocol.</param>
            <param name="port">The port.</param>
            <param name="domain">The domain.</param>
            <param name="subdomain">The subdomain.</param>
            <param name="appVirtualDir">The app virtual dir.</param>
            <param name="extension">The extension.</param>
            <param name="absolutePath">if set to <c>true</c> [absolute path].</param>
            <param name="applySubdomain">if set to <c>true</c> [apply subdomain].</param>
            <param name="suffix">The suffix.</param>
            <param name="basePath">The base path.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultUrlBuilder.InternalBuildUsingAppVirtualDir(System.Boolean,System.String,System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Internals the build using app virtual dir.
            </summary>
            <param name="absolutePath">if set to <c>true</c> [absolute path].</param>
            <param name="action">The action.</param>
            <param name="applySubdomain">if set to <c>true</c> [apply subdomain].</param>
            <param name="appVirtualDir">The app virtual dir.</param>
            <param name="area">The area.</param>
            <param name="controller">The controller.</param>
            <param name="domain">The domain.</param>
            <param name="port">The port.</param>
            <param name="protocol">The protocol.</param>
            <param name="subdomain">The subdomain.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultUrlBuilder.InternalBuildUrlUsingBasePath(System.String,System.String,System.String,System.String)">
            <summary>
            Internals the build URL using base path.
            </summary>
            <param name="action">The action.</param>
            <param name="area">The area.</param>
            <param name="basePath">The base path.</param>
            <param name="controller">The controller.</param>
            <returns></returns>
        </member>
        <member name="P:Castle.MonoRail.Framework.Services.DefaultUrlBuilder.UseExtensions">
            <summary>
            Gets or sets a value indicating whether the builder should output an extension.
            </summary>
            <value><c>true</c> if should use extensions; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Services.DefaultUrlBuilder.ServerUtil">
            <summary>
            Gets or sets the server utility instance.
            </summary>
            <value>The server util.</value>
        </member>
        <member name="T:Castle.MonoRail.Framework.Services.DefaultUrlTokenizer">
            <summary>
            Breaks the url into smaller pieces to find out
            the requested controller, action and optionally the area.
            <para>
            It alsos checks for default urls which map a single resource to an area/controller/action
            </para>
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.IUrlTokenizer">
            <summary>
            Pendent
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.IUrlTokenizer.TokenizeUrl(System.String,System.Uri,System.Boolean,System.String)">
            <summary>
            Tokenizes the URL.
            </summary>
            <param name="rawUrl">The raw URL.</param>
            <param name="uri">The URI.</param>
            <param name="isLocal">if set to <c>true</c> [is local].</param>
            <param name="appVirtualDir">Virtual directory</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultUrlTokenizer.AddDefaultRule(System.String,System.String,System.String,System.String)">
            <summary>
            Adds the default rule mapping.
            </summary>
            <remarks>
            A defautl rule can associate something like a 'default.castle' 
            to a controller/action like 'Home/index.castle'
            </remarks>
            <param name="url">The URL.</param>
            <param name="area">The area.</param>
            <param name="controller">The controller.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultUrlTokenizer.Service(System.IServiceProvider)">
            <summary>
            Services the specified provider.
            </summary>
            <param name="provider">The provider.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultUrlTokenizer.TokenizeUrl(System.String,System.Uri,System.Boolean,System.String)">
            <summary>
            Tokenizes the URL.
            </summary>
            <param name="rawUrl">The raw URL.</param>
            <param name="uri">The URI.</param>
            <param name="isLocal">if set to <c>true</c> [is local].</param>
            <param name="appVirtualDir">Virtual directory</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultUrlTokenizer.ExtractAreaControllerAction(System.String,System.String@,System.String@,System.String@)">
            <summary>
            Extracts the area controller action.
            </summary>
            <param name="rawUrl">The raw URL.</param>
            <param name="area">The area.</param>
            <param name="controller">The controller.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultUrlTokenizer.GetDomainToken(System.String,System.Int32)">
            <summary>
            Gets the domain token.
            </summary>
            <param name="domain">The domain.</param>
            <param name="token">The token index.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultUrlTokenizer.GetExtension(System.String)">
            <summary>
            Gets the extension of the requested urls page without the preceding period.
            </summary>
            <param name="url">URL.</param>
            <returns>The resource file extension on the url (without the period).</returns>
        </member>
        <member name="T:Castle.MonoRail.Framework.Services.DefaultViewComponentFactory">
            <summary>
            Default implementation of <see cref="T:Castle.MonoRail.Framework.IViewComponentFactory"/>
            <para>
            This implementation looks for concrete types that extend 
            <see cref="T:Castle.MonoRail.Framework.ViewComponent"/> in an assembly
            </para>
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Services.DefaultViewComponentFactory.logger">
            <summary>
            The logger instance
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Services.DefaultViewComponentFactory.viewEngine">
            <summary>
            View engine instance used to initialize the <see cref="T:Castle.MonoRail.Framework.ViewComponent"/>
            instance upon creation
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Services.DefaultViewComponentFactory.registry">
            <summary>
            A dictionary of name to ViewComponent
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultViewComponentFactory.#ctor">
            <summary>
            Constructs a <c>DefaultViewComponentFactory</c>
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultViewComponentFactory.Initialize">
            <summary>
            Invoked by the framework in order to initialize the state
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultViewComponentFactory.GetViewComponentRegistry">
            <summary>
            Gets the view component registry.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultViewComponentFactory.Service(System.IServiceProvider)">
            <summary>
            Invoked by the framework in order to give a chance to
            obtain other services
            </summary>
            <param name="provider">The service proviver</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultViewComponentFactory.Inspect(System.String)">
            <summary>
            Loads the assembly and inspect its public types.
            </summary>
            <param name="assemblyFileName"></param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultViewComponentFactory.Inspect(System.Reflection.Assembly)">
            <summary>
            Inspect the assembly's public types.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.Services.DefaultViewComponentFactory.ViewEngine">
            <summary>
            Implementors should return a reference to
            the current view engine.
            </summary>
            <value></value>
        </member>
        <member name="T:Castle.MonoRail.Framework.Services.DefaultViewComponentRegistry">
            <summary>
            Centralizes the registration and lookup of ViewComponents
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.IViewComponentRegistry">
            <summary>
            Depicts a contract for viewcomponent registry implementations
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.IViewComponentRegistry.AddViewComponent(System.String,System.Type)">
            <summary>
            Adds the view component.
            </summary>
            <param name="name">The name.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.IViewComponentRegistry.GetViewComponent(System.String)">
            <summary>
            Gets the view component.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultViewComponentRegistry.AddViewComponent(System.String,System.Type)">
            <summary>
            Adds the view component.
            </summary>
            <param name="name">The name that can be used from the view template.</param>
            <param name="type">The type.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultViewComponentRegistry.GetViewComponent(System.String)">
            <summary>
            Gets the view component.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultViewComponentRegistry.NormalizeName(System.String)">
            <summary>
            Normalizes the name.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultViewComponentRegistry.GetDetails(System.Type)">
            <summary>
            Gets the details.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="T:Castle.MonoRail.Framework.Services.DefaultViewEngineManager">
            <summary>
            The view engine manager sits between MonoRail and all the registered 
            view engines. It is used to identify the view engine that should handle a 
            render request and delegates such requests properly. 
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.IViewEngineManager">
            <summary>
            Sits between the controller and the view engines (multiples)
            to decide which view engine should render a specific content
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.IViewEngineManager.HasTemplate(System.String)">
            <summary>
            Evaluates whether the specified template exists.
            </summary>
            <returns><c>true</c> if it exists</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.IViewEngineManager.Process(Castle.MonoRail.Framework.IRailsEngineContext,Castle.MonoRail.Framework.Controller,System.String)">
            <summary>
            Processes the view - using the templateName 
            to obtain the correct template,
            and using the context to output the result.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.IViewEngineManager.Process(System.IO.TextWriter,Castle.MonoRail.Framework.IRailsEngineContext,Castle.MonoRail.Framework.Controller,System.String)">
            <summary>
             Processes the view - using the templateName 
             to obtain the correct template
             and writes the results to the System.TextWriter. 
             <para>
             Please note that no layout is applied
             </para>
             </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.IViewEngineManager.ProcessPartial(System.IO.TextWriter,Castle.MonoRail.Framework.IRailsEngineContext,Castle.MonoRail.Framework.Controller,System.String)">
            <summary>
            Processes a partial view = using the partialName
            to obtain the correct template and writes the 
            results to the System.TextWriter.
            </summary>
            <param name="output">The output.</param>
            <param name="context">The context.</param>
            <param name="controller">The controller.</param>
            <param name="partialName">The partial name.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.IViewEngineManager.ProcessContents(Castle.MonoRail.Framework.IRailsEngineContext,Castle.MonoRail.Framework.Controller,System.String)">
            <summary>
            Wraps the specified content in the layout using 
            the context to output the result.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultViewEngineManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.Services.DefaultViewEngineManager"/> class.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultViewEngineManager.Initialize">
            <summary>
            Implementors should perform any initialization logic.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultViewEngineManager.Service(System.IServiceProvider)">
            <summary>
            Services the specified service provider.
            </summary>
            <param name="serviceProvider">The service provider.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultViewEngineManager.HasTemplate(System.String)">
            <summary>
            Evaluates whether the specified template exists.
            </summary>
            <param name="templateName">View template name</param>
            <returns><c>true</c> if it exists</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultViewEngineManager.Process(Castle.MonoRail.Framework.IRailsEngineContext,Castle.MonoRail.Framework.Controller,System.String)">
            <summary>
            Processes the view - using the templateName
            to obtain the correct template,
            and using the context to output the result.
            </summary>
            <param name="context"></param>
            <param name="controller"></param>
            <param name="templateName"></param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultViewEngineManager.Process(System.IO.TextWriter,Castle.MonoRail.Framework.IRailsEngineContext,Castle.MonoRail.Framework.Controller,System.String)">
            <summary>
            Processes the view - using the templateName
            to obtain the correct template
            and writes the results to the System.TextWriter.
            <para>
            Please note that no layout is applied
            </para>
            </summary>
            <param name="output"></param>
            <param name="context"></param>
            <param name="controller"></param>
            <param name="templateName"></param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultViewEngineManager.ProcessPartial(System.IO.TextWriter,Castle.MonoRail.Framework.IRailsEngineContext,Castle.MonoRail.Framework.Controller,System.String)">
            <summary>
            Processes a partial view = using the partialName
            to obtain the correct template and writes the
            results to the System.TextWriter.
            </summary>
            <param name="output">The output.</param>
            <param name="context">The context.</param>
            <param name="controller">The controller.</param>
            <param name="partialName">The partial name.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultViewEngineManager.ProcessContents(Castle.MonoRail.Framework.IRailsEngineContext,Castle.MonoRail.Framework.Controller,System.String)">
            <summary>
            Wraps the specified content in the layout using
            the context to output the result.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultViewEngineManager.FindExistingTemplate(System.String)">
            <summary>
            Finds the existing template.
            </summary>
            <param name="templateName">Name of the template.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultViewEngineManager.ContextualizeViewEngine(Castle.MonoRail.Framework.IViewEngine)">
            <summary>
            Contextualizes the view engine.
            </summary>
            <param name="engine">The engine.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultViewEngineManager.ResolveEngine(System.String)">
            <summary>
            The view can be informed with an extension. If so, we use it
            to discover the extension. Otherwise, we use the view source
            to find out the file that exists there, and hence the view 
            engine instance
            </summary>
            <param name="templateName">View name</param>
            <returns>A view engine instance</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultViewEngineManager.RegisterEngineForView(Castle.MonoRail.Framework.IViewEngine)">
            <summary>
            Associates extensions with the view engine instance.
            </summary>
            <param name="engine">The view engine instance</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.DefaultViewEngineManager.AssertTemplateExists(System.String,System.String)">
            <summary>
            Asserts the template exists.
            </summary>
            <param name="resolvedTemplateName">Name of the resolved template.</param>
            <param name="templateName">Name of the template.</param>
        </member>
        <member name="T:Castle.MonoRail.Framework.EmailTemplateService">
            <summary>
            Default implementation of <see cref="T:Castle.MonoRail.Framework.IEmailTemplateService"/>
            </summary>
            <remarks>
            Will work only during a MonoRail process as it needs a <see cref="T:Castle.MonoRail.Framework.IRailsEngineContext"/>
            and a <see cref="T:Castle.MonoRail.Framework.Controller"/> instance to execute.
            </remarks>
        </member>
        <member name="T:Castle.MonoRail.Framework.IEmailTemplateService">
            <summary>
            Represents the disacoupled service to use 
            MonoRail's view engine to process email templates.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.IEmailTemplateService.RenderMailMessage(System.String,System.Collections.IDictionary,System.Boolean)">
            <summary>
            Creates an instance of <see cref="T:Castle.Components.Common.EmailSender.Message"/>
            using the specified template for the body
            </summary>
            <param name="templateName">
            Name of the template to load. 
            Will look in <c>Views/mail</c> for that template file.
            </param>
            <param name="parameters">
            Dictionary with parameters 
            that you can use on the email template
            </param>
            <param name="doNotApplyLayout">If <c>true</c>, it will skip the layout</param>
            <returns>An instance of <see cref="T:Castle.Components.Common.EmailSender.Message"/></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.IEmailTemplateService.RenderMailMessage(System.String,Castle.MonoRail.Framework.IRailsEngineContext,Castle.MonoRail.Framework.Controller,System.Boolean)">
            <summary>
            Creates an instance of <see cref="T:Castle.Components.Common.EmailSender.Message"/>
            using the specified template for the body
            </summary>
            <param name="templateName">
            Name of the template to load. 
            Will look in <c>Views/mail</c> for that template file.
            </param>
            <param name="context">Context that represents the current request</param>
            <param name="controller">Controller instance</param>
            <param name="doNotApplyLayout">If <c>true</c>, it will skip the layout</param>
            <returns>An instance of <see cref="T:Castle.Components.Common.EmailSender.Message"/></returns>
        </member>
        <member name="F:Castle.MonoRail.Framework.EmailTemplateService.logger">
            <summary>
            The logger instance
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.EmailTemplateService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.EmailTemplateService"/> class.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.EmailTemplateService.Service(System.IServiceProvider)">
            <summary>
            Invoked by the framework in order to give a chance to
            obtain other services
            </summary>
            <param name="provider">The service proviver</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.EmailTemplateService.RenderMailMessage(System.String,System.Collections.IDictionary,System.Boolean)">
            <summary>
            Creates an instance of <see cref="T:Castle.Components.Common.EmailSender.Message"/>
            using the specified template for the body
            </summary>
            <param name="templateName">
            Name of the template to load. 
            Will look in <c>Views/mail</c> for that template file.
            </param>
            <param name="parameters">
            Dictionary with parameters 
            that you can use on the email template
            </param>
            <param name="doNotApplyLayout">If <c>true</c>, it will skip the layout</param>
            <returns>An instance of <see cref="T:Castle.Components.Common.EmailSender.Message"/></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.EmailTemplateService.RenderMailMessage(System.String,Castle.MonoRail.Framework.IRailsEngineContext,Castle.MonoRail.Framework.Controller,System.Boolean)">
            <summary>
            Creates an instance of <see cref="T:Castle.Components.Common.EmailSender.Message"/>
            using the specified template for the body
            </summary>
            <param name="templateName">
            Name of the template to load. 
            Will look in Views/mail for that template file.
            </param>
            <param name="context">Context that represents the current request</param>
            <param name="controller">Controller instance</param>
            <param name="doNotApplyLayout">If <c>true</c>, it will skip the layout</param>
            <returns>An instance of <see cref="T:Castle.Components.Common.EmailSender.Message"/></returns>
        </member>
        <member name="T:Castle.MonoRail.Framework.Services.MonoRailSmtpSender">
            <summary>
            MonoRail internal email sender service
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.MonoRailSmtpSender.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.Services.MonoRailSmtpSender"/> class.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.MonoRailSmtpSender.Service(System.IServiceProvider)">
            <summary>
            Services the specified provider.
            </summary>
            <param name="provider">The provider.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.MonoRailSmtpSender.Send(System.String,System.String,System.String,System.String)">
            <summary>
            Sends a message.
            </summary>
            <param name="from">From field</param>
            <param name="to">To field</param>
            <param name="subject">e-mail's subject</param>
            <param name="messageText">message's body</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.MonoRailSmtpSender.Send(Castle.Components.Common.EmailSender.Message)">
            <summary>
            Sends a message.
            </summary>
            <param name="message">Message instance</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.MonoRailSmtpSender.Send(Castle.Components.Common.EmailSender.Message[])">
            <summary>
            Sends multiple messages.
            </summary>
            <param name="messages">Array of messages</param>
        </member>
        <member name="T:Castle.MonoRail.Framework.Services.WeakReferenceCacheProvider">
            <summary>
            Simple implementation that relies on weak 
            references in a dictionary
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Services.WeakReferenceCacheProvider.logger">
            <summary>
            The logger instance
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.WeakReferenceCacheProvider.Service(System.IServiceProvider)">
            <summary>
            Invoked by the framework in order to give a chance to
            obtain other services
            </summary>
            <param name="provider">The service proviver</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.WeakReferenceCacheProvider.HasKey(System.String)">
            <summary>
            Determines whether the specified key is on the cache.
            </summary>
            <param name="key">The key.</param>
            <returns>
            	<c>true</c> if the cache has the key; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.WeakReferenceCacheProvider.Get(System.String)">
            <summary>
            Gets the cache item by the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.WeakReferenceCacheProvider.Store(System.String,System.Object)">
            <summary>
            Stores the cache item by the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="data">The data.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Services.WeakReferenceCacheProvider.Delete(System.String)">
            <summary>
            Deletes the cache item by the specified key.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="T:Castle.MonoRail.Framework.Test.IMockResponse">
            <summary>
            Exposes methods on top of <see cref="T:Castle.MonoRail.Framework.IResponse"/>
            that are used by unit tests
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.Test.IMockResponse.RedirectedTo">
            <summary>
            Gets the urls the request was redirected to.
            </summary>
            <value>The redirected to.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Test.IMockResponse.Headers">
            <summary>
            Gets the http headers.
            </summary>
            <value>The headers.</value>
        </member>
        <member name="T:Castle.MonoRail.Framework.Test.IMockViewComponentContext">
            <summary>
            Exposes methods on top of <see cref="T:Castle.MonoRail.Framework.IViewComponentContext"/>
            that are used by unit tests
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.IViewComponentContext">
            <summary>
            Exposes the operations that can be performed by <see cref="T:Castle.MonoRail.Framework.ViewComponent"/>s
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.IViewComponentContext.HasSection(System.String)">
            <summary>
            Determines whether the current component declaration on the view
            has the specified section.
            </summary>
            <param name="sectionName">Name of the section.</param>
            <returns>
            <c>true</c> if the specified section exists; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.IViewComponentContext.RenderView(System.String,System.IO.TextWriter)">
            <summary>
            Renders the view specified to the writer.
            </summary>
            <param name="name">The view template name</param>
            <param name="writer">A writer to output</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.IViewComponentContext.RenderBody">
            <summary>
            Renders the component body.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.IViewComponentContext.RenderBody(System.IO.TextWriter)">
            <summary>
            Renders the body into the specified <see cref="T:System.IO.TextWriter"/>
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.IViewComponentContext.RenderSection(System.String)">
            <summary>
            Renders the the specified section. 
            No exception will the throw if the section cannot be found.
            </summary>
            <param name="sectionName">Name of the section.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.IViewComponentContext.RenderSection(System.String,System.IO.TextWriter)">
            <summary>
            Renders the the specified section.
            No exception will the throw if the section cannot be found.
            </summary>
            <param name="sectionName">Name of the section.</param>
            <param name="writer">The writer to output the section content.</param>
        </member>
        <member name="P:Castle.MonoRail.Framework.IViewComponentContext.ComponentName">
            <summary>
            Gets the name of the component.
            </summary>
            <value>The name of the component.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.IViewComponentContext.Writer">
            <summary>
            Gets the writer used to render the view component
            </summary>
            <value>The writer.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.IViewComponentContext.ContextVars">
            <summary>
            Gets the dictionary that holds variables for the
            view and for the view component
            </summary>
            <value>The context vars.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.IViewComponentContext.ComponentParameters">
            <summary>
            Gets the component parameters that the view has passed
            to the component
            </summary>
            <value>The component parameters.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.IViewComponentContext.ViewToRender">
            <summary>
            Gets or sets the view to render.
            </summary>
            <value>The view to render.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.IViewComponentContext.ViewEngine">
            <summary>
            Gets the view engine instance.
            </summary>
            <value>The view engine.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Test.IMockViewComponentContext.SectionRender">
            <summary>
            Gets or sets the section render dictionary.
            </summary>
            <value>The section render.</value>
        </member>
        <member name="T:Castle.MonoRail.Framework.Test.MockCacheProvider">
            <summary>
            Represents a mock implementation of <see cref="T:Castle.MonoRail.Framework.ICacheProvider"/> for unit test purposes.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Test.MockCacheProvider.Service(System.IServiceProvider)">
            <summary>
            Services the specified provider.
            </summary>
            <param name="provider">The provider.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Test.MockCacheProvider.HasKey(System.String)">
            <summary>
            Determines whether the specified key is on the cache.
            </summary>
            <param name="key">The key.</param>
            <returns>
            	<c>true</c> if the cache has the key; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Test.MockCacheProvider.Get(System.String)">
            <summary>
            Gets the cache item by the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Test.MockCacheProvider.Store(System.String,System.Object)">
            <summary>
            Stores the cache item by the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="data">The data.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Test.MockCacheProvider.Delete(System.String)">
            <summary>
            Deletes the cache item by the specified key.
            </summary>
            <param name="key">The key.</param>
        </member>
        <member name="T:Castle.MonoRail.Framework.Test.MockEmailTemplateService">
            <summary>
            Mocks the <see cref="T:Castle.MonoRail.Framework.IEmailTemplateService"/> calling 
            <see cref="M:Castle.MonoRail.Framework.Test.MockRailsEngineContext.AddMailTemplateRendered(System.String,System.Collections.IDictionary)"/> to register
            the calls made to these methods
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Test.MockEmailTemplateService.#ctor(Castle.MonoRail.Framework.Test.MockRailsEngineContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.Test.MockEmailTemplateService"/> class.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Test.MockEmailTemplateService.RenderMailMessage(System.String,System.Collections.IDictionary,System.Boolean)">
            <summary>
            Creates an instance of <see cref="T:Castle.Components.Common.EmailSender.Message"/>
            using the specified template for the body
            </summary>
            <param name="templateName">Name of the template to load.
            Will look in <c>Views/mail</c> for that template file.</param>
            <param name="parameters">Dictionary with parameters
            that you can use on the email template</param>
            <param name="doNotApplyLayout">If <c>true</c>, it will skip the layout</param>
            <returns>An instance of <see cref="T:Castle.Components.Common.EmailSender.Message"/></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Test.MockEmailTemplateService.RenderMailMessage(System.String,Castle.MonoRail.Framework.IRailsEngineContext,Castle.MonoRail.Framework.Controller,System.Boolean)">
            <summary>
            Renders the mail message.
            </summary>
            <param name="templateName">Name of the template.</param>
            <param name="engineContext">The engine context.</param>
            <param name="controller">The controller.</param>
            <param name="doNotApplyLayout">if set to <c>true</c> [do not apply layout].</param>
            <returns></returns>
        </member>
        <member name="T:Castle.MonoRail.Framework.Test.MockRailsEngineContext">
            <summary>
            Represents a mock implementation of <see cref="T:Castle.MonoRail.Framework.IRailsEngineContext"/> for unit test purposes.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Test.MockRailsEngineContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.Test.MockRailsEngineContext"/> class.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Test.MockRailsEngineContext.#ctor(Castle.MonoRail.Framework.IRequest,Castle.MonoRail.Framework.IResponse,Castle.MonoRail.Framework.ITrace,Castle.MonoRail.Framework.UrlInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.Test.MockRailsEngineContext"/> class.
            </summary>
            <param name="request">The request.</param>
            <param name="response">The response.</param>
            <param name="trace">The trace.</param>
            <param name="urlInfo">The URL info.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Test.MockRailsEngineContext.Transfer(System.String,System.Boolean)">
            <summary>
            Transfer the execution to another resource.
            </summary>
            <param name="path"></param>
            <param name="preserveForm"></param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Test.MockRailsEngineContext.SetContainer(System.IServiceProvider)">
            <summary>
            Sets the container.
            </summary>
            <param name="serviceProvider">The service provider.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Test.MockRailsEngineContext.RegisterServices">
            <summary>
            Registers the services.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.Test.MockRailsEngineContext.RequestType">
            <summary>
            Gets the request type (GET, POST, etc)
            </summary>
            <value></value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Test.MockRailsEngineContext.Url">
            <summary>
            Gets the request URL.
            </summary>
            <value></value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Test.MockRailsEngineContext.UrlReferrer">
            <summary>
            Gets the referring URL.
            </summary>
            <value></value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Test.MockRailsEngineContext.UnderlyingContext">
            <summary>
            Gets the underlying context of the API being used.
            </summary>
            <value></value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Test.MockRailsEngineContext.Params">
            <summary>
            Access the params (Query, Post, headers and Cookies)
            </summary>
            <value></value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Test.MockRailsEngineContext.Session">
            <summary>
            Access the session objects.
            </summary>
            <value></value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Test.MockRailsEngineContext.Request">
            <summary>
            Gets the request object.
            </summary>
            <value></value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Test.MockRailsEngineContext.Response">
            <summary>
            Gets the response object.
            </summary>
            <value></value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Test.MockRailsEngineContext.Trace">
            <summary>
            Gets the trace object.
            </summary>
            <value></value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Test.MockRailsEngineContext.Cache">
            <summary>
            Access the Cache associated with this
            web execution context.
            </summary>
            <value></value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Test.MockRailsEngineContext.Flash">
            <summary>
            Access a dictionary of volative items.
            </summary>
            <value></value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Test.MockRailsEngineContext.CurrentUser">
            <summary>
            Gets or sets the current user.
            </summary>
            <value></value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Test.MockRailsEngineContext.LastException">
            <summary>
            Gets the last exception raised during
            the execution of an action.
            </summary>
            <value></value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Test.MockRailsEngineContext.ApplicationPath">
            <summary>
            Returns the application path.
            </summary>
            <value></value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Test.MockRailsEngineContext.ApplicationPhysicalPath">
            <summary>
            Returns the physical application path.
            </summary>
            <value></value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Test.MockRailsEngineContext.UrlInfo">
            <summary>
            Returns the <see cref="P:Castle.MonoRail.Framework.Test.MockRailsEngineContext.UrlInfo"/> of the the current request.
            </summary>
            <value></value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Test.MockRailsEngineContext.Server">
            <summary>
            Returns an <see cref="T:Castle.MonoRail.Framework.IServerUtility"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Test.MockRailsEngineContext.Items">
            <summary>
            Returns the Items collection from the current HttpContext.
            </summary>
            <value></value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Test.MockRailsEngineContext.CurrentController">
            <summary>
            Gets or sets the current controller.
            </summary>
            <value>The current controller.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Test.MockRailsEngineContext.Container">
            <summary>
            If a container is available for the app, this
            property exposes its instance.
            </summary>
            <value></value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Test.MockRailsEngineContext.RenderedEmailTemplates">
            <summary>
            Gets the rendered email templates.
            </summary>
            <value>The rendered email templates.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Test.MockRailsEngineContext.MessagesSent">
            <summary>
            Gets the messages sent.
            </summary>
            <value>The messages sent.</value>
        </member>
        <member name="T:Castle.MonoRail.Framework.Test.MockRailsEngineContext.RenderedEmailTemplate">
            <summary>
            Represents an email template for unit test purposes
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Test.MockRailsEngineContext.RenderedEmailTemplate.#ctor(System.String,System.Collections.IDictionary)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.Test.MockRailsEngineContext.RenderedEmailTemplate"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="P:Castle.MonoRail.Framework.Test.MockRailsEngineContext.RenderedEmailTemplate.Name">
            <summary>
            Gets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Test.MockRailsEngineContext.RenderedEmailTemplate.Parameters">
            <summary>
            Gets the parameters.
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="T:Castle.MonoRail.Framework.Test.MockRequest">
            <summary>
            Represents a mock implementation of <see cref="T:Castle.MonoRail.Framework.IRequest"/> for unit test purposes.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Test.MockRequest.#ctor(System.Collections.IDictionary)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.Test.MockRequest"/> class.
            </summary>
            <param name="cookies">The cookies.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Test.MockRequest.BinaryRead(System.Int32)">
            <summary>
            Reads the request data as a byte array.
            </summary>
            <param name="count">How many bytes.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Test.MockRequest.ReadCookie(System.String)">
            <summary>
            Reads the cookie.
            </summary>
            <param name="name">The cookie name.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Test.MockRequest.ValidateInput">
            <summary>
            Validates the input.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.Test.MockRequest.Headers">
            <summary>
            Gets the Http headers.
            </summary>
            <value>The Http headers.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Test.MockRequest.Files">
            <summary>
            Gets the <see cref="T:System.Web.HttpPostedFile"/> per key.
            </summary>
            <value></value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Test.MockRequest.Params">
            <summary>
            Gets the params which accumulates headers, post, querystring and cookies.
            </summary>
            <value>The params.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Test.MockRequest.IsLocal">
            <summary>
            Gets a value indicating whether this requeest is from a local address.
            </summary>
            <value><c>true</c> if this instance is local; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Test.MockRequest.RawUrl">
            <summary>
            Gets the raw URL.
            </summary>
            <value>The raw URL.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Test.MockRequest.Uri">
            <summary>
            Gets the URI.
            </summary>
            <value>The URI.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Test.MockRequest.HttpMethod">
            <summary>
            Gets the HTTP method.
            </summary>
            <value>The HTTP method.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Test.MockRequest.FilePath">
            <summary>
            Gets the file path.
            </summary>
            <value>The file path.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Test.MockRequest.Item(System.String)">
            <summary>
            Gets the param with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Test.MockRequest.QueryString">
            <summary>
            Gets the query string.
            </summary>
            <value>The query string.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Test.MockRequest.Form">
            <summary>
            Gets the form.
            </summary>
            <value>The form.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Test.MockRequest.UserLanguages">
            <summary>
            Gets the user languages.
            </summary>
            <value>The user languages.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Test.MockRequest.UserHostAddress">
            <summary>
            Gets the IP host address of the remote client.
            </summary>
            <value>The IP address of the remote client.</value>
        </member>
        <member name="T:Castle.MonoRail.Framework.Test.MockResponse">
            <summary>
            Represents a mock implementation of <see cref="T:Castle.MonoRail.Framework.Test.IMockResponse"/> for unit test purposes.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Test.MockResponse.#ctor(System.Collections.IDictionary)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.Test.MockResponse"/> class.
            </summary>
            <param name="cookies">The cookies.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Test.MockResponse.AppendHeader(System.String,System.String)">
            <summary>
            Appends the header.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Test.MockResponse.BinaryWrite(System.Byte[])">
            <summary>
            Writes the buffer to the browser
            </summary>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Test.MockResponse.BinaryWrite(System.IO.Stream)">
            <summary>
            Writes the stream to the browser
            </summary>
            <param name="stream">The stream.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Test.MockResponse.Clear">
            <summary>
            Clears the response (only works if buffered)
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Test.MockResponse.ClearContent">
            <summary>
            Clears the response content (only works if buffered).
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Test.MockResponse.Write(System.String)">
            <summary>
            Writes the specified string.
            </summary>
            <param name="s">The string.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Test.MockResponse.Write(System.Object)">
            <summary>
            Writes the specified obj.
            </summary>
            <param name="obj">The obj.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Test.MockResponse.Write(System.Char)">
            <summary>
            Writes the specified char.
            </summary>
            <param name="ch">The char.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Test.MockResponse.Write(System.Char[],System.Int32,System.Int32)">
            <summary>
            Writes the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="index">The index.</param>
            <param name="count">The count.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Test.MockResponse.WriteFile(System.String)">
            <summary>
            Writes the file.
            </summary>
            <param name="fileName">Name of the file.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Test.MockResponse.Redirect(System.String,System.String)">
            <summary>
            Redirects the specified controller.
            </summary>
            <param name="controller">The controller.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Test.MockResponse.Redirect(System.String,System.String,System.String)">
            <summary>
            Redirects the specified area.
            </summary>
            <param name="area">The area.</param>
            <param name="controller">The controller.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Test.MockResponse.Redirect(System.String)">
            <summary>
            Redirects the specified URL.
            </summary>
            <param name="url">The URL.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Test.MockResponse.Redirect(System.String,System.Boolean)">
            <summary>
            Redirects the specified URL.
            </summary>
            <param name="url">The URL.</param>
            <param name="endProcess">if set to <c>true</c> [end process].</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Test.MockResponse.CreateCookie(System.String,System.String)">
            <summary>
            Creates a cookie.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Test.MockResponse.CreateCookie(System.String,System.String,System.DateTime)">
            <summary>
            Creates a cookie.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <param name="expiration">The expiration.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Test.MockResponse.CreateCookie(System.Web.HttpCookie)">
            <summary>
            Creates a cookie.
            </summary>
            <param name="cookie">The cookie.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Test.MockResponse.RemoveCookie(System.String)">
            <summary>
            Removes a cookie.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="P:Castle.MonoRail.Framework.Test.MockResponse.RedirectedTo">
            <summary>
            Gets the urls the request was redirected to.
            </summary>
            <value>The redirected to.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Test.MockResponse.Headers">
            <summary>
            Gets the http headers.
            </summary>
            <value>The headers.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Test.MockResponse.StatusCode">
            <summary>
            Gets or sets the status code.
            </summary>
            <value>The status code.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Test.MockResponse.ContentType">
            <summary>
            Gets or sets the type of the content.
            </summary>
            <value>The type of the content.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Test.MockResponse.CachePolicy">
            <summary>
            Gets the caching policy (expiration time, privacy,
            vary clauses) of a Web page.
            </summary>
            <value></value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Test.MockResponse.CacheControlHeader">
            <summary>
            Sets the Cache-Control HTTP header to Public or Private.
            </summary>
            <value></value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Test.MockResponse.Charset">
            <summary>
            Gets or sets the HTTP character set of the output stream.
            </summary>
            <value></value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Test.MockResponse.Output">
            <summary>
            Gets the output.
            </summary>
            <value>The output.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Test.MockResponse.OutputStream">
            <summary>
            Gets the output stream.
            </summary>
            <value>The output stream.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Test.MockResponse.WasRedirected">
            <summary>
            Gets a value indicating whether the response sent a redirect.
            </summary>
            <value><c>true</c> if was redirected; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Test.MockResponse.IsClientConnected">
            <summary>
            Gets a value indicating whether this instance is client connected.
            </summary>
            <value>
            	<c>true</c> if this instance is client connected; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Castle.MonoRail.Framework.Test.MockScaffoldingSupport">
            <summary>
            Represents a mock implementation of <see cref="T:Castle.MonoRail.Framework.IScaffoldingSupport"/> for unit test purposes.
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.IScaffoldingSupport">
            <summary>
            Abstracts the implementation of scaffolding support for MonoRail.
            <para>
            Implementors should use information from the controller instance
            and add dynamic actions to it exposing operations to manipulate an entity.
            </para>
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.IScaffoldingSupport.Process(Castle.MonoRail.Framework.Controller)">
            <summary>
            Implementors should use this method to read information 
            from the controller instance and add dynamic actions to the controller.
            </summary>
            <param name="controller"></param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Test.MockScaffoldingSupport.Process(Castle.MonoRail.Framework.Controller)">
            <summary>
            Implementors should use this method to read information
            from the controller instance and add dynamic actions to the controller.
            </summary>
            <param name="controller"></param>
        </member>
        <member name="T:Castle.MonoRail.Framework.Test.MockServerUtility">
            <summary>
            Represents a mock implementation of <see cref="T:Castle.MonoRail.Framework.IServerUtility"/> for unit test purposes.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Test.MockServerUtility.MapPath(System.String)">
            <summary>
            Returns the physical path for the
            specified virtual path.
            </summary>
            <param name="virtualPath">The virtual path.</param>
            <returns>The mapped path</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Test.MockServerUtility.HtmlEncode(System.String)">
            <summary>
            HTML encodes a string and returns the encoded string.
            </summary>
            <param name="content">The text string to HTML encode.</param>
            <returns>The HTML encoded text.</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Test.MockServerUtility.UrlEncode(System.String)">
            <summary>
            URL encodes a string and returns the encoded string.
            </summary>
            <param name="content">The text to URL encode.</param>
            <returns>The URL encoded text.</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Test.MockServerUtility.UrlDecode(System.String)">
            <summary>
            URL decodes a string and returns the decoded string.
            </summary>
            <param name="content">The text to URL decode.</param>
            <returns>The URL decoded text.</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Test.MockServerUtility.UrlPathEncode(System.String)">
            <summary>
            URL encodes the path portion of a URL string and returns the encoded string.
            </summary>
            <param name="content">The text to URL encode.</param>
            <returns>The URL encoded text.</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Test.MockServerUtility.JavaScriptEscape(System.String)">
            <summary>
            Escapes JavaScript with Url encoding and returns the encoded string.
            </summary>
            <param name="content">The text to URL encode and escape JavaScript within.</param>
            <returns>
            The URL encoded and JavaScript escaped text.
            </returns>
            <remarks>
            Converts quotes, single quotes and CR/LFs to their representation as an escape character.
            </remarks>
        </member>
        <member name="T:Castle.MonoRail.Framework.Test.MockSmtpSender">
            <summary>
            Represents a mock implementation of <see cref="T:Castle.Components.Common.EmailSender.IEmailSender"/> for unit test purposes.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Test.MockSmtpSender.#ctor(Castle.MonoRail.Framework.Test.MockRailsEngineContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.Test.MockSmtpSender"/> class.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Test.MockSmtpSender.Send(System.String,System.String,System.String,System.String)">
            <summary>
            Sends a message.
            </summary>
            <param name="from">From field</param>
            <param name="to">To field</param>
            <param name="subject">e-mail's subject</param>
            <param name="messageText">message's body</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Test.MockSmtpSender.Send(Castle.Components.Common.EmailSender.Message)">
            <summary>
            Sends a message.
            </summary>
            <param name="message">Message instance</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Test.MockSmtpSender.Send(Castle.Components.Common.EmailSender.Message[])">
            <summary>
            Sends multiple messages.
            </summary>
            <param name="messages">Array of messages</param>
        </member>
        <member name="T:Castle.MonoRail.Framework.Test.MockTrace">
            <summary>
            Represents a mock implementation of <see cref="T:Castle.MonoRail.Framework.ITrace"/> for unit test purposes.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Test.MockTrace.Warn(System.String)">
            <summary>
            Logs the specified message on the ASP.Net trace
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Test.MockTrace.Warn(System.String,System.String)">
            <summary>
            Logs the specified message on the ASP.Net trace
            </summary>
            <param name="category">The category.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Test.MockTrace.Warn(System.String,System.String,System.Exception)">
            <summary>
            Logs the specified message on the ASP.Net trace
            </summary>
            <param name="category">The category.</param>
            <param name="message">The message.</param>
            <param name="errorInfo">The error info.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Test.MockTrace.Write(System.String)">
            <summary>
            Logs the specified message on the ASP.Net trace
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Test.MockTrace.Write(System.String,System.String)">
            <summary>
            Logs the specified message on the ASP.Net trace
            </summary>
            <param name="category">The category.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Test.MockTrace.Write(System.String,System.String,System.Exception)">
            <summary>
            Logs the specified message on the ASP.Net trace
            </summary>
            <param name="category">The category.</param>
            <param name="message">The message.</param>
            <param name="errorInfo">The error info.</param>
        </member>
        <member name="T:Castle.MonoRail.Framework.Test.TestSectionRender">
            <summary>
            Used to hook a viewcomponent call to render a nested section
            </summary>
            <param name="context">The content available to the section</param>
            <param name="writer">The writer</param>
        </member>
        <member name="T:Castle.MonoRail.Framework.Test.TestViewRender">
            <summary>
            Used to hook a viewcomponent call to render a view template
            </summary>
            <param name="name">view name</param>
            <param name="context">The content available to the view</param>
            <param name="writer">The writer</param>
        </member>
        <member name="T:Castle.MonoRail.Framework.Test.MockViewComponentContext">
            <summary>
            Represents a mock implementation of <see cref="T:Castle.MonoRail.Framework.Test.IMockViewComponentContext"/> for unit test purposes.
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Test.MockViewComponentContext.OnBodyRender">
            <summary>
            Event that is raised when a section is rendered by the viewcomponent.
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Test.MockViewComponentContext.OnViewRender">
            <summary>
            Event that is raised when a view is rendered by the viewcomponent.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Test.MockViewComponentContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.Test.MockViewComponentContext"/> class.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Test.MockViewComponentContext.#ctor(System.String,System.IO.TextWriter,Castle.MonoRail.Framework.IViewEngine)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.Test.MockViewComponentContext"/> class.
            </summary>
            <param name="componentName">Name of the component.</param>
            <param name="writer">The writer.</param>
            <param name="viewEngine">The view engine.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Test.MockViewComponentContext.HasSection(System.String)">
            <summary>
            Determines whether the current component declaration on the view
            has the specified section.
            </summary>
            <param name="sectionName">Name of the section.</param>
            <returns>
            	<c>true</c> if the specified section exists; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Test.MockViewComponentContext.RenderView(System.String,System.IO.TextWriter)">
            <summary>
            Renders the view specified to the writer.
            </summary>
            <param name="name">The view template name</param>
            <param name="writer">A writer to output</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Test.MockViewComponentContext.RenderBody">
            <summary>
            Renders the component body.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Test.MockViewComponentContext.RenderBody(System.IO.TextWriter)">
            <summary>
            Renders the body into the specified <see cref="T:System.IO.TextWriter"/>
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Test.MockViewComponentContext.RenderSection(System.String)">
            <summary>
            Renders the the specified section.
            No exception will the throw if the section cannot be found.
            </summary>
            <param name="sectionName">Name of the section.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Test.MockViewComponentContext.RenderSection(System.String,System.IO.TextWriter)">
            <summary>
            Renders the the specified section.
            No exception will the throw if the section cannot be found.
            </summary>
            <param name="sectionName">Name of the section.</param>
            <param name="writer">The writer to output the section content.</param>
        </member>
        <member name="P:Castle.MonoRail.Framework.Test.MockViewComponentContext.SectionRender">
            <summary>
            Gets or sets the section render dictionary.
            </summary>
            <value>The section render.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Test.MockViewComponentContext.ComponentName">
            <summary>
            Gets the name of the component.
            </summary>
            <value>The name of the component.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Test.MockViewComponentContext.Writer">
            <summary>
            Gets the writer used to render the view component
            </summary>
            <value>The writer.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Test.MockViewComponentContext.ContextVars">
            <summary>
            Gets the dictionary that holds variables for the
            view and for the view component
            </summary>
            <value>The context vars.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Test.MockViewComponentContext.ComponentParameters">
            <summary>
            Gets the component parameters that the view has passed
            to the component
            </summary>
            <value>The component parameters.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Test.MockViewComponentContext.ViewToRender">
            <summary>
            Gets or sets the view to render.
            </summary>
            <value>The view to render.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Test.MockViewComponentContext.ViewEngine">
            <summary>
            Gets the view engine instance.
            </summary>
            <value>The view engine.</value>
        </member>
        <member name="T:Castle.MonoRail.Framework.Test.MockViewEngine">
            <summary>
            Represents a mock implementation of <see cref="T:Castle.MonoRail.Framework.IViewEngine"/> for unit test purposes.
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.IViewEngine">
            <summary>
            Depicts the contract used by the engine
            to process views, in an independent manner.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.IViewEngine.HasTemplate(System.String)">
            <summary>
            Evaluates whether the specified template exists.
            </summary>
            <returns><c>true</c> if it exists</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.IViewEngine.Process(Castle.MonoRail.Framework.IRailsEngineContext,Castle.MonoRail.Framework.Controller,System.String)">
            <summary>
            Processes the view - using the templateName 
            to obtain the correct template,
            and using the context to output the result.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.IViewEngine.Process(System.IO.TextWriter,Castle.MonoRail.Framework.IRailsEngineContext,Castle.MonoRail.Framework.Controller,System.String)">
            <summary>
             Processes the view - using the templateName 
             to obtain the correct template
             and writes the results to the <see cref="T:System.IO.TextWriter"/>. 
             No layout is applied!
             </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.IViewEngine.CreateJSGenerator(Castle.MonoRail.Framework.IRailsEngineContext)">
            <summary>
            Implementors should return a generator instance if
            the view engine supports JS generation.
            </summary>
            <param name="context">The request context.</param>
            <returns>A JS generator instance</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.IViewEngine.GenerateJS(Castle.MonoRail.Framework.IRailsEngineContext,Castle.MonoRail.Framework.Controller,System.String)">
            <summary>
            Processes the js generation view template - using the templateName 
            to obtain the correct template, and using the context to output the result.
            </summary>
            <param name="context">The request context.</param>
            <param name="controller">The controller.</param>
            <param name="templateName">Name of the template.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.IViewEngine.GenerateJS(System.IO.TextWriter,Castle.MonoRail.Framework.IRailsEngineContext,Castle.MonoRail.Framework.Controller,System.String)">
            <summary>
            Processes the js generation view template - using the templateName 
            to obtain the correct template, and using the specified <see cref="T:System.IO.TextWriter"/>
            to output the result.
            </summary>
            <param name="output">The output.</param>
            <param name="context">The request context.</param>
            <param name="controller">The controller.</param>
            <param name="templateName">Name of the template.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.IViewEngine.ProcessPartial(System.IO.TextWriter,Castle.MonoRail.Framework.IRailsEngineContext,Castle.MonoRail.Framework.Controller,System.String)">
            <summary>
            Should process the specified partial. The partial name must contains
            the path relative to the views folder.
            </summary>
            <param name="output">The output.</param>
            <param name="context">The request context.</param>
            <param name="controller">The controller.</param>
            <param name="partialName">The partial name.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.IViewEngine.ProcessContents(Castle.MonoRail.Framework.IRailsEngineContext,Castle.MonoRail.Framework.Controller,System.String)">
            <summary>
            Wraps the specified content in the layout using 
            the context to output the result.
            </summary>
            <param name="context">The request context.</param>
            <param name="controller">The controller.</param>
            <param name="contents">Content to output</param>
        </member>
        <member name="P:Castle.MonoRail.Framework.IViewEngine.SupportsJSGeneration">
            <summary>
            Gets a value indicating whether the view engine
            support the generation of JS.
            </summary>
            <value>
            <c>true</c> if JS generation is supported; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Castle.MonoRail.Framework.IViewEngine.XHtmlRendering">
            <summary>
            Gets or sets a value indicating whether the view engine should set the
            content type to xhtml.
            </summary>
            <value><c>true</c> if the content type should be set to xhtml; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.IViewEngine.ViewFileExtension">
            <summary>
            Gets the view template file extension.
            </summary>
            <value>The view file extension.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.IViewEngine.JSGeneratorFileExtension">
            <summary>
            Gets the JS generator view template file extension.
            </summary>
            <value>The JS generator file extension.</value>
        </member>
        <member name="M:Castle.MonoRail.Framework.Test.MockViewEngine.#ctor(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.Test.MockViewEngine"/> class.
            </summary>
            <param name="viewFileExtension">The view file extension.</param>
            <param name="jsGeneratorFileExtension">The js generator file extension.</param>
            <param name="supportsJSGeneration">if set to <c>true</c> [supports JS generation].</param>
            <param name="xHtmlRendering">if set to <c>true</c> [x HTML rendering].</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Test.MockViewEngine.HasTemplate(System.String)">
            <summary>
            Evaluates whether the specified template exists.
            </summary>
            <param name="templateName"></param>
            <returns><c>true</c> if it exists</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Test.MockViewEngine.Process(Castle.MonoRail.Framework.IRailsEngineContext,Castle.MonoRail.Framework.Controller,System.String)">
            <summary>
            Processes the view - using the templateName
            to obtain the correct template,
            and using the context to output the result.
            </summary>
            <param name="context"></param>
            <param name="controller"></param>
            <param name="templateName"></param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Test.MockViewEngine.Process(System.IO.TextWriter,Castle.MonoRail.Framework.IRailsEngineContext,Castle.MonoRail.Framework.Controller,System.String)">
            <summary>
            Processes the view - using the templateName
            to obtain the correct template
            and writes the results to the <see cref="T:System.IO.TextWriter"/>.
            No layout is applied!
            </summary>
            <param name="output"></param>
            <param name="context"></param>
            <param name="controller"></param>
            <param name="templateName"></param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Test.MockViewEngine.CreateJSGenerator(Castle.MonoRail.Framework.IRailsEngineContext)">
            <summary>
            Implementors should return a generator instance if
            the view engine supports JS generation.
            </summary>
            <param name="context">The request context.</param>
            <returns>A JS generator instance</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Test.MockViewEngine.GenerateJS(Castle.MonoRail.Framework.IRailsEngineContext,Castle.MonoRail.Framework.Controller,System.String)">
            <summary>
            Processes the js generation view template - using the templateName
            to obtain the correct template, and using the context to output the result.
            </summary>
            <param name="context">The request context.</param>
            <param name="controller">The controller.</param>
            <param name="templateName">Name of the template.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Test.MockViewEngine.GenerateJS(System.IO.TextWriter,Castle.MonoRail.Framework.IRailsEngineContext,Castle.MonoRail.Framework.Controller,System.String)">
            <summary>
            Processes the js generation view template - using the templateName
            to obtain the correct template, and using the specified <see cref="T:System.IO.TextWriter"/>
            to output the result.
            </summary>
            <param name="output">The output.</param>
            <param name="context">The request context.</param>
            <param name="controller">The controller.</param>
            <param name="templateName">Name of the template.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Test.MockViewEngine.ProcessPartial(System.IO.TextWriter,Castle.MonoRail.Framework.IRailsEngineContext,Castle.MonoRail.Framework.Controller,System.String)">
            <summary>
            Should process the specified partial. The partial name must contains
            the path relative to the views folder.
            </summary>
            <param name="output">The output.</param>
            <param name="context">The request context.</param>
            <param name="controller">The controller.</param>
            <param name="partialName">The partial name.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Test.MockViewEngine.ProcessContents(Castle.MonoRail.Framework.IRailsEngineContext,Castle.MonoRail.Framework.Controller,System.String)">
            <summary>
            Wraps the specified content in the layout using
            the context to output the result.
            </summary>
            <param name="context">The request context.</param>
            <param name="controller">The controller.</param>
            <param name="contents">Content to output</param>
        </member>
        <member name="P:Castle.MonoRail.Framework.Test.MockViewEngine.SupportsJSGeneration">
            <summary>
            Gets a value indicating whether the view engine
            support the generation of JS.
            </summary>
            <value>
            	<c>true</c> if JS generation is supported; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Test.MockViewEngine.XHtmlRendering">
            <summary>
            Gets or sets a value indicating whether the view engine should set the
            content type to xhtml.
            </summary>
            <value>
            	<c>true</c> if the content type should be set to xhtml; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Test.MockViewEngine.ViewFileExtension">
            <summary>
            Gets the view template file extension.
            </summary>
            <value>The view file extension.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Test.MockViewEngine.JSGeneratorFileExtension">
            <summary>
            Gets the JS generator view template file extension.
            </summary>
            <value>The JS generator file extension.</value>
        </member>
        <member name="T:Castle.MonoRail.Framework.TransformFilters.Formatters.WikiFormatter">
            <summary>
            Converts wiki formatted text to html formatted text.
            </summary>
            <remarks>
            The following tags are parsed:
            <list type="table">
            <item><term>italic</term></item>
            <item><term>bold</term></item>
            <item><term>bold italic</term></item>
            <item><term>underlined</term></item>
            <item><term>striked</term></item>
            <item><term>code</term></item>
            <item><term>pre</term></item>
            <item><term>box</term></item>
            <item><term>pipe tables</term></item>
            </list>
            More about style formats <see href="http://en.wikipedia.org/wiki/Help:Editing"/>
            More about tables <see href="http://en.wikipedia.org/wiki/Help:Table"/>
            </remarks>
        </member>
        <member name="M:Castle.MonoRail.Framework.TransformFilters.Formatters.WikiFormatter.Format(System.String)">
            <summary>
            Converts a string with wiki formatting to html formatting.
            </summary>
            <param name="wiki">the wiki formatted code</param>
            <returns>the html formatted code</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.TransformFilters.Formatters.WikiFormatter.BuildTable(System.String)">
            <summary>
            Converts a wiki pipe formatting to an HTML table
            </summary>
            <param name="markup">the pipe markup</param>
            <returns>the html table</returns>
        </member>
        <member name="T:Castle.MonoRail.Framework.TransformFilters.LowerCaseTransformFilter">
            <summary>
            Simple proof of concept filter that converts the stream data to lowercase.
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.TransformFilter">
            <summary>
            Abstract base class for HttpFilters.
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.ITransformFilter">
            <summary>
            Dictates the contract for transform filters. 
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.ITransformFilter.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes the specified buffer to the output
            </summary>
            <param name="buffer">The buffer.</param>
            <param name="offset">The offset.</param>
            <param name="count">The count.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.TransformFilter.#ctor(System.IO.Stream)">
            <summary>
            Base class holds the underlying stream.
            </summary>
            <param name="baseStream">The stream to write to after filtering.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.TransformFilter.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            This method is not supported for an HttpFilter
            </summary>
            <exception cref="T:System.NotSupportedException">Always thrown</exception>
        </member>
        <member name="M:Castle.MonoRail.Framework.TransformFilter.Close">
            <summary>
            Close implementation.
            </summary>
            <remarks>
            Don't forget to call base.Close is you override this function.
            </remarks>
        </member>
        <member name="M:Castle.MonoRail.Framework.TransformFilter.Flush">
            <summary>
            Flushes the base stream
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.TransformFilter.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            This method is not supported for an HttpFilter
            </summary>
            <exception cref="T:System.NotSupportedException">Always thrown</exception>
        </member>
        <member name="M:Castle.MonoRail.Framework.TransformFilter.SetLength(System.Int64)">
            <summary>
            This method is not supported for an HttpFilter
            </summary>
            <exception cref="T:System.NotSupportedException">Always thrown</exception>
        </member>
        <member name="P:Castle.MonoRail.Framework.TransformFilter.BaseStream">
            <summary>
            The stream to the filter can use to write write to
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.TransformFilter.CanRead">
            <summary>
            This method is not supported for an HttpFilter
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.TransformFilter.CanSeek">
            <summary>
            This method is not supported for an HttpFilter
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.TransformFilter.CanWrite">
            <summary>
            Indicates if the Stream is closed or open
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.TransformFilter.Closed">
            <summary>
            Indicates if the Stream is closed or open
            </summary>
            <remarks>
            Implementors should always check Closed before writing anything to the BaseStream.
            </remarks>
        </member>
        <member name="P:Castle.MonoRail.Framework.TransformFilter.Length">
            <summary>
            This method is not supported for an HttpFilter
            </summary>
            <exception cref="T:System.NotSupportedException">Always thrown</exception>
        </member>
        <member name="P:Castle.MonoRail.Framework.TransformFilter.Position">
            <summary>
            This method is not supported for an HttpFilter
            </summary>
            <exception cref="T:System.NotSupportedException">Always thrown</exception>
        </member>
        <member name="M:Castle.MonoRail.Framework.TransformFilters.LowerCaseTransformFilter.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.TransformFilters.LowerCaseTransformFilter"/> class.
            </summary>
            <param name="baseStream">The stream to write to after filtering.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.TransformFilters.LowerCaseTransformFilter.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies count bytes from buffer to the current stream.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support writing. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
            <exception cref="T:System.ArgumentNullException">buffer is null. </exception>
            <exception cref="T:System.ArgumentException">The sum of offset and count is greater than the buffer length. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">offset or count is negative. </exception>
        </member>
        <member name="T:Castle.MonoRail.Framework.TransformFilters.UpperCaseTransformFilter">
            <summary>
            Simple proof of concept filter that converts the stream data to uppercase.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.TransformFilters.UpperCaseTransformFilter.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.TransformFilters.UpperCaseTransformFilter"/> class.
            </summary>
            <param name="baseStream">The stream to write to after filtering.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.TransformFilters.UpperCaseTransformFilter.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies count bytes from buffer to the current stream.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support writing. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
            <exception cref="T:System.ArgumentNullException">buffer is null. </exception>
            <exception cref="T:System.ArgumentException">The sum of offset and count is greater than the buffer length. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">offset or count is negative. </exception>
        </member>
        <member name="T:Castle.MonoRail.Framework.TransformFilters.WikiTransformFilter">
            <summary>
            Post process the request via Castle.WikiFormatter
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.TransformFilters.WikiTransformFilter.#ctor(System.IO.Stream)">
            <summary>
            Constructor of the WikiTransformfilter
            </summary>
            <param name="baseStream">output stream</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.TransformFilters.WikiTransformFilter.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Pulls the http stream through the WikiFormatter filter.
            </summary>
            <param name="buffer">The content stream</param>
            <param name="offset">Start of the stream</param>
            <param name="count">Lenght of the stream</param>
        </member>
        <member name="T:Castle.MonoRail.Framework.ViewComponents.AuthenticatedContent">
            <summary>
            This component renders different inner
            sections based on the current principal state (authenticated or not)
            <code>
            #blockcomponent(AuthenticatedContent)
            #logged
              Welcome back $context.CurrentUser.Identity.Name
            #end
            #notlogged
              Create your account by clicking here.
            #end
            #end
            </code>
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.ViewComponent">
            <summary>
            Base class for reusable UI Components. 
            </summary>
            <remarks>
            Implementors should override <see cref="M:Castle.MonoRail.Framework.ViewComponent.Initialize"/>
            for implement proper initialization (if necessary). 
            Also implement <see cref="M:Castle.MonoRail.Framework.ViewComponent.Render"/> as by default it 
            will render a <c>default</c> view on <c>[ViewFolderRoot]/components/[componentname]</c>.
            <para>
            You can also override <see cref="M:Castle.MonoRail.Framework.ViewComponent.SupportsSection(System.String)"/> if your component supports 
            neste sections (ie templates provided on the view that uses the view component.
            </para>
            <para>
            Another way is to use the <see cref="T:Castle.MonoRail.Framework.ViewComponentDetailsAttribute"/> to specify a custom name
            and the sections supported. 
            </para>
            <para>
            Notice that view components can render strings or views on their folder. You can 
            create sophisticate components with that mixture. Sections allow the users of your component
            to give it a block of content, usually customizing or definiting the content to be especially
            rendered by your component. 
            </para>
            
            <example>
            A very simplist view component that renders the time.
            <code>
            public class ShowTime : ViewComponent
            {
            	public override void Initialize()
            	{
            	}
            
            	public override void Render()
            	{
            		RenderText("Time: " + DateTime.Now.ToString());
            	}
            }
            </code>
            <para>
            This can be used from the view using the following syntax (NVelocity view engine)
            </para>
            <code>
            #component(ShowTime)
            </code>
            </example>
            </remarks>
        </member>
        <member name="F:Castle.MonoRail.Framework.ViewComponent.context">
            <summary>
            Holds the component context
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.ViewComponent.railsContext">
            <summary>
            Holds the <see cref="T:Castle.MonoRail.Framework.IRailsEngineContext"/> associated
            to the request lifetime.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.ViewComponent.Init(Castle.MonoRail.Framework.IRailsEngineContext,Castle.MonoRail.Framework.IViewComponentContext)">
            <summary>
            Invoked by the framework.
            </summary>
            <param name="engineContext">Request context</param>
            <param name="componentContext">ViewComponent context</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.ViewComponent.BindComponentParameters">
            <summary>
            Binds the component parameters.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.ViewComponent.Initialize">
            <summary>
            Called by the framework once the component instance
            is initialized
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.ViewComponent.Render">
            <summary>
            Called by the framework so the component can 
            render its content
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.ViewComponent.SupportsSection(System.String)">
            <summary>
            Implementor should return true only if the 
            <c>name</c> is a known section the view component
            supports.
            </summary>
            <param name="name">section being added</param>
            <returns><see langword="true"/> if section is supported</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.ViewComponent.RenderView(System.String)">
            <summary>
            Specifies the view to be processed after the component has finished its processing. 
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.ViewComponent.RenderView(System.String,System.String)">
            <summary>
            Specifies the view to be processed after the component has finished its processing. 
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.ViewComponent.RenderSharedView(System.String)">
            <summary>
            Specifies the shared view to be processed after the component has finished its
            processing. (A partial view shared 
            by others views and usually in the root folder
            of the view directory).
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.ViewComponent.CancelView">
            <summary>
            Cancels the view processing.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.ViewComponent.RenderText(System.String)">
            <summary>
            Renders the specified content back to the browser
            </summary>
            <param name="content">The content to render.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.ViewComponent.HasSection(System.String)">
            <summary>
            Determines whether the current component declaration on the view
            has the specified section.
            </summary>
            <param name="sectionName">Name of the section.</param>
            <returns>
            <c>true</c> if the specified section exists; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.ViewComponent.RenderBody">
            <summary>
            Renders the component body.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.ViewComponent.RenderBody(System.IO.TextWriter)">
            <summary>
            Renders the body into the specified <see cref="T:System.IO.TextWriter"/>
            </summary>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.ViewComponent.RenderSection(System.String)">
            <summary>
            Renders the the specified section
            </summary>
            <param name="sectionName">Name of the section.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.ViewComponent.RenderSection(System.String,System.IO.TextWriter)">
            <summary>
            Renders the the specified section
            </summary>
            <param name="sectionName">Name of the section.</param>
            <param name="writer">The writer.</param>
        </member>
        <member name="P:Castle.MonoRail.Framework.ViewComponent.Context">
            <summary>
            Gets the Component Context
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.ViewComponent.RailsContext">
            <summary>
            Gets the <see cref="T:Castle.MonoRail.Framework.IRailsEngineContext"/>
            associated with the current request
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.ViewComponent.ComponentParams">
            <summary>
            Gets the component parameters
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.ViewComponent.Session">
            <summary>
            Gets the Session dictionary.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.ViewComponent.Flash">
            <summary>
            Gets a dictionary of volative items.
            Ideal for showing success and failures messages.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.ViewComponent.HttpContext">
            <summary>
            Gets the web context of ASP.NET API.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.ViewComponent.Request">
            <summary>
            Gets the request object.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.ViewComponent.Response">
            <summary>
            Gets the response object.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.ViewComponent.PropertyBag">
            <summary>
            Provides a way to make data available
            to the view that the component uses
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.ViewComponent.Params">
            <summary>
            Shortcut to Request.Params
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.ViewComponents.AuthenticatedContent.Render">
            <summary>
            Called by the framework so the component can
            render its content
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.ViewComponents.AuthenticatedContent.SupportsSection(System.String)">
            <summary>
            Implementor should return true only if the
            <c>name</c> is a known section the view component
            supports.
            </summary>
            <param name="name">section being added</param>
            <returns>
            	<see langword="true"/> if section is supported
            </returns>
        </member>
        <member name="T:Castle.MonoRail.Framework.ViewComponents.CaptureFor">
             <summary>
             Renders the inner content and stores it in the IViewEngineContext
             <code>
             #blockcomponent(CaptureFor with "id=someId" ["append=before"])
            		content to be captured
             #end
            
             ${someId}
             </code>
             id - the key to be used to retrieve the captured contents
             append - when present will append component content into the current
            			 content, if append = "before" will append before the current content
             </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.ViewComponents.CaptureFor.Render">
            <summary>
            Render component's content and stores it in the view engine ContextVars
            so it can be reference and included in other places
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.ViewComponents.ChildContentComponent">
            <summary>
            Renders the contents of the block component into the $childContent context
            variable, and then renders the components view file.
            </summary>
            <example>
            Controller view:
            <code>
            #blockcomponent(ChildContentComponent)
            	This will be rendered inside a div tag.
            #end
            </code>
            
            ViewComponent view:
            <code>
            &lt;div&gt;$componentChildContent&lt;/&gt;
            </code>
            </example>
        </member>
        <member name="M:Castle.MonoRail.Framework.ViewComponents.ChildContentComponent.ObtainChildContent">
            <summary>
            Obtains the content of the child.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.ViewComponents.ChildContentComponent.PopulateContext">
            <summary>
            Populates the context.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.ViewComponents.ChildContentComponent.Render">
            <summary>
            Called by the framework so the component can
            render its content
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.ViewComponents.ChildContentComponent.RenderView(System.String)">
            <summary>
            Specifies the view to be processed after the component has finished its processing.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Castle.MonoRail.Framework.ViewComponents.ChildContentComponent.RenderView(System.String,System.String)">
            <summary>
            Specifies the view to be processed after the component has finished its processing.
            </summary>
            <param name="component"></param>
            <param name="name"></param>
        </member>
        <member name="T:Castle.MonoRail.Framework.ViewComponents.ColumnRenderer">
            <summary>
            Renders a table where each nested content is rendered on a cell. 
            <para>
            For example, suppose you have a dynamic list of items and what to display
            them side by side, in four columns. As the number of elements in unknown 
            in development time, you can use the ColumnRenderer to 
            create the table and cells.
            </para>
            </summary>
            
            <example>
            The following example uses nvelocity view engine syntax.
            <code>
            <![CDATA[
            #blockcomponent(ColumnRenderer with "items=$interests")
            
            #firstelement
              Custom first element
            #end
            
            #item
              Content is $item
            #end
            
            #end
            ]]>
            </code>
            <para>
            Which should render something like:
            </para>
            <code>
            <![CDATA[
            <table> 
              <tr>
                <td>
                  Custom first element
                </td>
                <td>
                  Content is Tennis
                </td>
                <td>
                  Content is Soccer
                </td>
              </tr>
              <tr>
                <td>
                  Content is Voleyball
                </td>
              </tr>
            </table>
            ]]>
            </code>
            </example>
            
            <remarks>
            The following sections are supported. Only the <c>item</c> section must be always provided. <br/>
            
            <para>
            <c>start</c>: override it in order to create the table yourself <br/>
            <c>endblock</c>: override it in order to end the table <br/>
            
            <c>startrow</c>: override it in order to start the column <br/>
            <c>endrow</c>: override it in order to end the column <br/>
            
            <c>startcolumn</c>: override it in order to start the cell <br/>
            <c>endcolumn</c>: override it in order to end the cell <br/>
            
            <c>item</c>: must be overriden in order to display the item content (unless it's something trivial like a primitive) <br/>
            <c>empty</c>: section used when the <see cref="P:Castle.MonoRail.Framework.ViewComponents.ColumnRenderer.Items"/> is empty  <br/>
            <c>firstelement</c>: if provided, will be rendered before any cells  <br/>
            </para>
            
            <para>
            The number of columns defaults to three. 
            </para>
            </remarks>
        </member>
        <member name="M:Castle.MonoRail.Framework.ViewComponents.ColumnRenderer.Initialize">
            <summary>
            Called by the framework once the component instance
            is initialized
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.ViewComponents.ColumnRenderer.Render">
            <summary>
            Called by the framework so the component can 
            render its content
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.ViewComponents.ColumnRenderer.SupportsSection(System.String)">
            <summary>
            Implementor should return true only if the 
            <c>name</c> is a known section the view component
            supports.
            </summary>
            <param name="name">section being added</param>
            <returns><see langword="true"/> if section is supported</returns>
        </member>
        <member name="P:Castle.MonoRail.Framework.ViewComponents.ColumnRenderer.Cols">
            <summary>
            Gets or sets the number of columns to display.
            </summary>
            <value>The cols.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.ViewComponents.ColumnRenderer.Items">
            <summary>
            Gets or sets the items to show.
            </summary>
            <value>The items.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.ViewComponents.ColumnRenderer.DontRenderUneededTableForEmptyLists">
            <summary>
            Gets or sets a value indicating whether the component should render a table
            even if there are no elements on the <see cref="P:Castle.MonoRail.Framework.ViewComponents.ColumnRenderer.Items"/>.
            </summary>
            <value>
            	<c>true</c> if it should not render; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Castle.MonoRail.Framework.ViewComponents.DiggStylePagination">
            <summary>
            Creates a digg style pagination.
            <para>
            Based on Alex Henderson work. See 
            (Monorail Pagination with Base4.Net)
            http://blog.bittercoder.com/PermaLink,guid,579711a8-0b16-481b-b52b-ebdfa1a7e225.aspx
            </para>
            </summary>
            
            <remarks>
            <para>
            Parameters: <br/>
            <c>adjacents</c>: number of links to show around the current page <br/>
            <c>page</c> (required): <see cref="T:Castle.MonoRail.Framework.Helpers.IPaginatedPage"/> instance (<see cref="T:Castle.MonoRail.Framework.Helpers.PaginationHelper"/>) <br/>
            <c>url</c>: url to link to<br/>
            <c>useInlineStyle</c>: defines if the outputted content will use inline style or css classnames (defaults to true)<br/>
            <c>renderIfOnlyOnePage</c>: should the pagination render if there's only one page (defaults to true)<br/>
            <c>paginatefunction</c>: a javascript function name to invoke on the page links (instead of a URL)<br/>
            </para>
            
            <para>
            Supported sections: <br/>
            <c>startblock</c>: invoked with <c>page</c> <br/>
            <c>endblock</c>: invoked with <c>page</c> <br/>
            <c>link</c>: invoked with <c>pageIndex</c>, <c>url</c> and <c>text</c>
            so you can build a custom link <br/>
            <c>prev</c>: text displayed instead of "&lt;%lt;prev"  <br/>
            <c>next</c>: text displayed instead of "next&gt;%gt;"  <br/>
            </para>
            
            </remarks>
        </member>
        <member name="M:Castle.MonoRail.Framework.ViewComponents.DiggStylePagination.Initialize">
            <summary>
            Called by the framework once the component instance
            is initialized
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.ViewComponents.DiggStylePagination.SupportsSection(System.String)">
            <summary>
            Implementor should return true only if the
            <c>name</c> is a known section the view component
            supports.
            </summary>
            <param name="name">section being added</param>
            <returns>
            	<see langword="true"/> if section is supported
            </returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.ViewComponents.DiggStylePagination.Render">
            <summary>
            Called by the framework so the component can 
            render its content
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.ViewComponents.DiggStylePagination.WritePageLink(System.IO.TextWriter,System.Int32,System.String,System.Collections.IDictionary)">
            <summary>
            Writes the page link.
            </summary>
            <param name="writer">The writer.</param>
            <param name="pageIndex">Index of the page.</param>
            <param name="text">The text.</param>
            <param name="htmlAttributes">The HTML attributes.</param>
        </member>
        <member name="P:Castle.MonoRail.Framework.ViewComponents.DiggStylePagination.Page">
            <summary>
            Gets or sets the paginated page instance.
            </summary>
            <value>The page.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.ViewComponents.DiggStylePagination.PaginateFunction">
            <summary>
            Gets or sets the paginate function name.
            <para>
            A paginate function is a javascript fuction 
            that receives the page index as the only argument. 
            </para>
            </summary>
            <value>The paginate function.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.ViewComponents.DiggStylePagination.Adjacents">
            <summary>
            Gets or sets the adjacents (number of links to show).
            </summary>
            <value>The adjacents.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.ViewComponents.DiggStylePagination.UseInlineStyle">
            <summary>
            Gets or sets a value indicating whether the component should output inline styles.
            </summary>
            <value><c>true</c> if it should use inline styles; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.ViewComponents.DiggStylePagination.RenderIfOnlyOnePage">
            <summary>
            Gets or sets a value indicating whether the component should render links even if there is only one page.
            </summary>
            <value>
            	<c>true</c> if it should render; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Castle.MonoRail.Framework.ViewComponents.DiggStylePagination.Url">
            <summary>
            Gets or sets the URL to be used when generating links
            </summary>
            <value>The URL.</value>
        </member>
        <member name="T:Castle.MonoRail.Framework.ViewComponents.SecurityComponent">
            <summary>
            Only renders the body if the current user has the specified role
            <example>
            <code>
            #blockcomponent(SecurityComponent with "role=IsAdmin")
            	Content only available to admin
            #end
            </code>
            </example>
            <para>or for multiple roles (using "or")</para>
            <example>
            <code>
            #blockcomponent(SecurityComponent with "roles=Manager,Admin")
            	Content only available to admin or managers
            #end
            </code>
            </example>
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.ViewComponents.SecurityComponent.Initialize">
            <summary>
            Called by the framework once the component instance
            is initialized
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.ViewComponents.SecurityComponent.Render">
            <summary>
            Called by the framework so the component can
            render its content
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.ViewComponents.UpdatePage">
            <summary>
            Renders a javascript content that changes the page 
            elements using a special dsl-like language.
            </summary>
            
            <seealso cref="T:Castle.MonoRail.Framework.Helpers.PrototypeHelper"/>
            
            <example>
            The following illustrates its use.
            <code>
            #blockcomponent(UpdatePage)
              $page.ReplaceHtml('myotherdiv', 'new content')
              $page.Highlight('mydivid')
            #end
            </code>
            </example>
            <remarks>
            The current implementation is dependent on 
            prototype.js and scriptaculous.js
            </remarks>
        </member>
        <member name="M:Castle.MonoRail.Framework.ViewComponents.UpdatePage.Render">
            <summary>
            Called by the framework so the component can
            render its content
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.ViewComponents.UpdatePage.GenerateJS">
            <summary>
            Evaluates the component's body providing a <c>page</c>
            instance which is a <see cref="T:Castle.MonoRail.Framework.Helpers.PrototypeHelper"/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:Castle.MonoRail.Framework.ViewComponents.UpdatePageTag">
            <summary>
            Renders a javascript tag block with an inline javascript 
            that changes the page 
            elements using a special dsl-like language.
            </summary>
            
            <seealso cref="T:Castle.MonoRail.Framework.Helpers.PrototypeHelper"/>
            
            <example>
            The following illustrates its use.
            <code>
            #blockcomponent(UpdatePageTag)
              $page.ReplaceHtml('myotherdiv', 'new content')
              $page.Highlight('mydivid')
            #end
            </code>
            </example>
            <remarks>
            The current implementation is dependent on 
            prototype.js and scriptaculous.js
            </remarks>
        </member>
        <member name="M:Castle.MonoRail.Framework.ViewComponents.UpdatePageTag.Render">
            <summary>
            Called by the framework so the component can
            render its content
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.Views.Aspx.Design.ActionArgumentEditor">
            <summary>
            Pendent
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.Design.ActionArgumentEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets the editor style used by the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)"></see> method.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that can be used to gain additional context information.</param>
            <returns>
            A <see cref="T:System.Drawing.Design.UITypeEditorEditStyle"></see> value that indicates the style of editor used by the <see cref="M:System.Drawing.Design.UITypeEditor.EditValue(System.IServiceProvider,System.Object)"></see> method. If the <see cref="T:System.Drawing.Design.UITypeEditor"></see> does not support this method, then <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle"></see> will return <see cref="F:System.Drawing.Design.UITypeEditorEditStyle.None"></see>.
            </returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.Design.ActionArgumentEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edits the specified object's value using the editor style indicated by the <see cref="M:System.Drawing.Design.UITypeEditor.GetEditStyle"></see> method.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that can be used to gain additional context information.</param>
            <param name="provider">An <see cref="T:System.IServiceProvider"></see> that this editor can use to obtain services.</param>
            <param name="value">The object to edit.</param>
            <returns>
            The new value of the object. If the value of the object has not changed, this should return the same object it was passed.
            </returns>
        </member>
        <member name="T:Castle.MonoRail.Framework.Views.Aspx.Design.ActionArgumentsEditorForm">
            <summary>
            Pendent
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.Design.ActionArgumentsEditorForm.#ctor(Castle.MonoRail.Framework.Views.Aspx.ActionArgumentCollection,System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.Views.Aspx.Design.ActionArgumentsEditorForm"/> class.
            </summary>
            <param name="actionArgs">The action args.</param>
            <param name="context">The context.</param>
        </member>
        <member name="F:Castle.MonoRail.Framework.Views.Aspx.Design.ActionArgumentsEditorForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.Design.ActionArgumentsEditorForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.Design.ActionArgumentsEditorForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.Views.Aspx.Design.DesignUtil">
            <summary>
            Pendent
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.Views.Aspx.Design.DesignUtil.IsInDesignMode">
            <summary>
            Gets a value indicating whether this instance is in design mode.
            </summary>
            <value>
            	<c>true</c> if this instance is in design mode; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Castle.MonoRail.Framework.Views.Aspx.Design.ITarget">
            <summary>
            Pendent
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.Views.Aspx.Design.ITarget.PropertyNames">
            <summary>
            Gets the property names.
            </summary>
            <value>The property names.</value>
        </member>
        <member name="T:Castle.MonoRail.Framework.Views.Aspx.Design.StandardTarget">
            <summary>
            Pendent
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.Design.StandardTarget.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.Views.Aspx.Design.StandardTarget"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.Design.StandardTarget.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.Views.Aspx.Design.StandardTarget"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.Design.StandardTarget.#ctor(System.Object,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.Views.Aspx.Design.StandardTarget"/> class.
            </summary>
            <param name="instance">The instance.</param>
            <param name="name">The name.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.Design.StandardTarget.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.Design.StandardTarget.CollectPropertyNames(System.Type)">
            <summary>
            Collects the property names.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="P:Castle.MonoRail.Framework.Views.Aspx.Design.StandardTarget.PropertyNames">
            <summary>
            Gets the property names.
            </summary>
            <value>The property names.</value>
        </member>
        <member name="T:Castle.MonoRail.Framework.Views.Aspx.AbstractBindingComponent">
            <summary>
            Pendent
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.AbstractBindingComponent.IsValid">
            <summary>
            Determines whether this instance is valid.
            </summary>
            <returns>
            	<c>true</c> if this instance is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.AbstractBindingComponent.Validate">
            <summary>
            Validates this instance.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.AbstractBindingComponent.Trim(System.String)">
            <summary>
            Trims the specified value.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="P:Castle.MonoRail.Framework.Views.Aspx.AbstractBindingComponent.Error">
            <summary>
            Gets an error message indicating what is wrong with this object.
            </summary>
            <value></value>
            <returns>An error message indicating what is wrong with this object. The default is an empty string ("").</returns>
        </member>
        <member name="P:Castle.MonoRail.Framework.Views.Aspx.AbstractBindingComponent.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:System.String"/> with the specified property name.
            </summary>
            <value></value>
        </member>
        <member name="T:Castle.MonoRail.Framework.Views.Aspx.AbstractBindingScope">
            <summary>
            Pendent
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.Views.Aspx.IBindingScope">
            <summary>
            Pendent
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.IBindingScope.ResolveSymbol(System.String)">
            <summary>
            Resolves the symbol.
            </summary>
            <param name="symbol">The symbol.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.IBindingScope.AddActionArguments(Castle.MonoRail.Framework.Views.Aspx.BindingContext,System.Collections.IDictionary)">
            <summary>
            Adds the action arguments.
            </summary>
            <param name="context">The context.</param>
            <param name="actionArgs">The action args.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.AbstractBindingScope.Castle#MonoRail#Framework#Views#Aspx#IBindingScope#ResolveSymbol(System.String)">
            <summary>
            Resolves the symbol.
            </summary>
            <param name="symbol">The symbol.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.AbstractBindingScope.Castle#MonoRail#Framework#Views#Aspx#IBindingScope#AddActionArguments(Castle.MonoRail.Framework.Views.Aspx.BindingContext,System.Collections.IDictionary)">
            <summary>
            Adds the action arguments.
            </summary>
            <param name="context">The context.</param>
            <param name="resolvedActionArgs">The resolved action args.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.AbstractBindingScope.ResolveSymbol(System.String)">
            <summary>
            Resolves the symbol.
            </summary>
            <param name="symbol">The symbol.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.AbstractBindingScope.AddActionArguments(Castle.MonoRail.Framework.Views.Aspx.BindingContext,System.Collections.IDictionary)">
            <summary>
            Adds the action arguments.
            </summary>
            <param name="context">The context.</param>
            <param name="resolvedActionArgs">The resolved action args.</param>
        </member>
        <member name="T:Castle.MonoRail.Framework.Views.Aspx.AbstractEventScope">
            <summary>
            Pendent
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.AbstractEventScope.#ctor(Castle.MonoRail.Framework.Views.Aspx.BindingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.Views.Aspx.AbstractEventScope"/> class.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.AbstractEventScope.DispatchAction(System.Object,System.EventArgs)">
            <summary>
            Dispatches the action.
            </summary>
            <param name="source">The source.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.AbstractEventScope.DispatchAction(System.Object,System.EventArgs,System.String)">
            <summary>
            Dispatches the action.
            </summary>
            <param name="source">The source.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.AbstractEventScope.ResolveSymbol(System.String)">
            <summary>
            Resolves the symbol.
            </summary>
            <param name="symbol">The symbol.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.AbstractEventScope.PushEventScope(System.Object,System.EventArgs)">
            <summary>
            Pushes the event scope.
            </summary>
            <param name="source">The source.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="P:Castle.MonoRail.Framework.Views.Aspx.AbstractEventScope.Context">
            <summary>
            Gets the context.
            </summary>
            <value>The context.</value>
        </member>
        <member name="T:Castle.MonoRail.Framework.Views.Aspx.ActionArgument">
            <summary>
            Pendent
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.ActionArgument.Validate">
            <summary>
            Validates this instance.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.ActionArgument.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.ActionArgument.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:Castle.MonoRail.Framework.Views.Aspx.ActionArgument.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Views.Aspx.ActionArgument.Expression">
            <summary>
            Gets or sets the expression.
            </summary>
            <value>The expression.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Views.Aspx.ActionArgument.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:Castle.MonoRail.Framework.Views.Aspx.ActionArgumentCollection">
            <summary>
            Pendent
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.Views.Aspx.TypedCollection`1">
            <summary>
            Pendent
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.TypedCollection`1.Add(`0)">
            <summary>
            Adds the specified member.
            </summary>
            <param name="member">The member.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.TypedCollection`1.AddAt(System.Int32,`0)">
            <summary>
            Adds at.
            </summary>
            <param name="index">The index.</param>
            <param name="member">The member.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.TypedCollection`1.Remove(`0)">
            <summary>
            Removes the specified member.
            </summary>
            <param name="member">The member.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.TypedCollection`1.Contains(`0)">
            <summary>
            Determines whether [contains] [the specified member].
            </summary>
            <param name="member">The member.</param>
            <returns>
            	<c>true</c> if [contains] [the specified member]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.TypedCollection`1.OnValidate(System.Object)">
            <summary>
            Performs additional custom processes when validating a value.
            </summary>
            <param name="value">The object to validate.</param>
        </member>
        <member name="P:Castle.MonoRail.Framework.Views.Aspx.TypedCollection`1.Item(System.Int32)">
            <summary>
            Gets or sets the <typeparamref name="T"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Views.Aspx.TypedCollection`1.Capacity">
            <summary>
            Gets or sets the number of elements that the <see cref="T:System.Collections.CollectionBase"></see> can contain.
            </summary>
            <value></value>
            <returns>The number of elements that the <see cref="T:System.Collections.CollectionBase"></see> can contain.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><see cref="P:System.Collections.CollectionBase.Capacity"></see> is set to a value that is less than <see cref="P:System.Collections.CollectionBase.Count"></see>.</exception>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.ActionArgumentCollection.Add(System.String,System.Object)">
            <summary>
            Adds the specified name.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.ActionArgumentCollection.Remove(System.String)">
            <summary>
            Removes the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.ActionArgumentCollection.OnInsert(System.Int32,System.Object)">
            <summary>
            Performs additional custom processes before inserting a new element into the <see cref="T:System.Collections.CollectionBase"></see> instance.
            </summary>
            <param name="index">The zero-based index at which to insert value.</param>
            <param name="value">The new value of the element at index.</param>
        </member>
        <member name="T:Castle.MonoRail.Framework.Views.Aspx.ActionBinding">
            <summary>
            Pendent
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.ActionBinding.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.Views.Aspx.ActionBinding"/> class.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.ActionBinding.Validate">
            <summary>
            Validates this instance.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.ActionBinding.ResetCommandDefaults(System.Boolean)">
            <summary>
            Reset the command defaults so they don't get serialized in the html markup.
            </summary>
            <param name="isCommandEvent">if set to <c>true</c> [is command event].</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.ActionBinding.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:Castle.MonoRail.Framework.Views.Aspx.ActionBinding.ActionName">
            <summary>
            Gets or sets the name of the action.
            </summary>
            <value>The name of the action.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Views.Aspx.ActionBinding.EventName">
            <summary>
            Gets or sets the name of the event.
            </summary>
            <value>The name of the event.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Views.Aspx.ActionBinding.CommandBindings">
            <summary>
            Gets the command bindings.
            </summary>
            <value>The command bindings.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Views.Aspx.ActionBinding.ActionArguments">
            <summary>
            Gets the action arguments.
            </summary>
            <value>The action arguments.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Views.Aspx.ActionBinding.Parent">
            <summary>
            Gets or sets the parent.
            </summary>
            <value>The parent.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Views.Aspx.ActionBinding.ControlInstance">
            <summary>
            Gets the control instance.
            </summary>
            <value>The control instance.</value>
        </member>
        <member name="T:Castle.MonoRail.Framework.Views.Aspx.ActionBindingCollection">
            <summary>
            Pendent
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.ActionBindingCollection.#ctor(Castle.MonoRail.Framework.Views.Aspx.ControllerBinding)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.Views.Aspx.ActionBindingCollection"/> class.
            </summary>
            <param name="parent">The parent.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.ActionBindingCollection.OnSetComplete(System.Int32,System.Object,System.Object)">
            <summary>
            Performs additional custom processes after setting a value in the <see cref="T:System.Collections.CollectionBase"></see> instance.
            </summary>
            <param name="index">The zero-based index at which oldValue can be found.</param>
            <param name="oldValue">The value to replace with newValue.</param>
            <param name="newValue">The new value of the element at index.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.ActionBindingCollection.OnInsertComplete(System.Int32,System.Object)">
            <summary>
            Performs additional custom processes after inserting a new element into the <see cref="T:System.Collections.CollectionBase"></see> instance.
            </summary>
            <param name="index">The zero-based index at which to insert value.</param>
            <param name="value">The new value of the element at index.</param>
        </member>
        <member name="P:Castle.MonoRail.Framework.Views.Aspx.ActionBindingCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:Castle.MonoRail.Framework.Views.Aspx.ActionBinding"/> with the specified event name.
            </summary>
            <value></value>
        </member>
        <member name="T:Castle.MonoRail.Framework.Views.Aspx.BindingContext">
            <summary>
            Pendent
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.BindingContext.#ctor(Castle.MonoRail.Framework.Views.Aspx.ControllerBinder,Castle.MonoRail.Framework.Views.Aspx.ActionBinding)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.Views.Aspx.BindingContext"/> class.
            </summary>
            <param name="binder">The binder.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.BindingContext.PushScope(Castle.MonoRail.Framework.Views.Aspx.IBindingScope)">
            <summary>
            Pushes the scope.
            </summary>
            <param name="scope">The scope.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.BindingContext.DispatchAction">
            <summary>
            Dispatches the action.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.BindingContext.DispatchAction(System.String)">
            <summary>
            Dispatches the action.
            </summary>
            <param name="actionName">Name of the action.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.BindingContext.ResolveActionArguments">
            <summary>
            Resolves the action arguments.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.BindingContext.ResolveActionArguments(Castle.MonoRail.Framework.Views.Aspx.ActionArgumentCollection,System.Collections.IDictionary)">
            <summary>
            Resolves the action arguments.
            </summary>
            <param name="actionArgs">The action args.</param>
            <param name="resolvedActionArgs">The resolved action args.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.BindingContext.ResolveSymbol(System.String,System.Boolean)">
            <summary>
            Resolves the symbol.
            </summary>
            <param name="symbolName">Name of the symbol.</param>
            <param name="throwIfNotFound">if set to <c>true</c> [throw if not found].</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.BindingContext.AddActionArguments(Castle.MonoRail.Framework.Views.Aspx.BindingContext,System.Collections.IDictionary)">
            <summary>
            Adds the action arguments.
            </summary>
            <param name="context">The context.</param>
            <param name="resolvedActionArgs">The resolved action args.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.BindingContext.ResolveActionArgument(Castle.MonoRail.Framework.Views.Aspx.ActionArgument)">
            <summary>
            Resolves the action argument.
            </summary>
            <param name="actionArg">The action arg.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.BindingContext.RegisterDefaultScopes">
            <summary>
            Registers the default scopes.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.Views.Aspx.BindingContext.Action">
            <summary>
            Gets the action.
            </summary>
            <value>The action.</value>
        </member>
        <member name="T:Castle.MonoRail.Framework.Views.Aspx.CommandBinding">
            <summary>
            Pendent
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.CommandBinding.Validate">
            <summary>
            Validates this instance.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.CommandBinding.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:Castle.MonoRail.Framework.Views.Aspx.CommandBinding.ActionName">
            <summary>
            Gets or sets the name of the action.
            </summary>
            <value>The name of the action.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Views.Aspx.CommandBinding.CommandName">
            <summary>
            Gets or sets the name of the command.
            </summary>
            <value>The name of the command.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Views.Aspx.CommandBinding.ActionArguments">
            <summary>
            Gets the action arguments.
            </summary>
            <value>The action arguments.</value>
        </member>
        <member name="T:Castle.MonoRail.Framework.Views.Aspx.CommandBindingCollection">
            <summary>
            Pendent
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.CommandEventHandlerDelegate`1.#ctor(Castle.MonoRail.Framework.Views.Aspx.BindingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.Views.Aspx.CommandEventHandlerDelegate`1"/> class.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.CommandEventHandlerDelegate`1.HandleEvent(System.Object,`0)">
            <summary>
            Handles the event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The e.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.CommandEventHandlerDelegate`1.AddActionArguments(Castle.MonoRail.Framework.Views.Aspx.BindingContext,System.Collections.IDictionary)">
            <summary>
            Adds the action arguments.
            </summary>
            <param name="context">The context.</param>
            <param name="resolvedActionArgs">The resolved action args.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.CommandEventHandlerDelegate`1.ObtainCommandActionName(System.Web.UI.WebControls.CommandEventArgs)">
            <summary>
            Obtains the name of the command action.
            </summary>
            <param name="e">The <see cref="T:System.Web.UI.WebControls.CommandEventArgs"/> instance containing the event data.</param>
            <returns></returns>
        </member>
        <member name="T:Castle.MonoRail.Framework.Views.Aspx.ControllerBinder">
            <summary>
            Pendent
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.Views.Aspx.IControllerBinder">
            <summary>
            Pendent
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.IControllerBinder.IsBindableControl(System.Web.UI.Control)">
            <summary>
            Determines whether [is bindable control] [the specified control].
            </summary>
            <param name="control">The control.</param>
            <returns>
            	<c>true</c> if [is bindable control] [the specified control]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.IControllerBinder.AddBinding(System.Web.UI.Control)">
            <summary>
            Adds the binding.
            </summary>
            <param name="control">The control.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.IControllerBinder.FindControlWithID(System.String)">
            <summary>
            Finds the control with ID.
            </summary>
            <param name="controlID">The control ID.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.IControllerBinder.GetControllerActions">
            <summary>
            Gets the controller actions.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Castle.MonoRail.Framework.Views.Aspx.IControllerBinder.DesignMode">
            <summary>
            Gets a value indicating whether [design mode].
            </summary>
            <value><c>true</c> if [design mode]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Views.Aspx.IControllerBinder.ControllerBindings">
            <summary>
            Gets the controller bindings.
            </summary>
            <value>The controller bindings.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Views.Aspx.IControllerBinder.ActionArguments">
            <summary>
            Gets the action arguments.
            </summary>
            <value>The action arguments.</value>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.ControllerBinder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.Views.Aspx.ControllerBinder"/> class.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.ControllerBinder.OnBeforeAction(Castle.MonoRail.Framework.Views.Aspx.ActionBinding,System.Collections.IDictionary)">
            <summary>
            Called when [before action].
            </summary>
            <param name="action">The action.</param>
            <param name="actionArgs">The action args.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.ControllerBinder.OnAfterAction(Castle.MonoRail.Framework.Views.Aspx.ActionBinding,System.Collections.IDictionary)">
            <summary>
            Called when [after action].
            </summary>
            <param name="action">The action.</param>
            <param name="actionArgs">The action args.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.ControllerBinder.OnActionError(Castle.MonoRail.Framework.Views.Aspx.ActionBinding,System.Exception)">
            <summary>
            Called when [action error].
            </summary>
            <param name="action">The action.</param>
            <param name="ex">The ex.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.ControllerBinder.System#ComponentModel#IExtenderProvider#CanExtend(System.Object)">
            <summary>
            Specifies whether this object can provide its extender properties to the specified object.
            </summary>
            <param name="extendee">The <see cref="T:System.Object"></see> to receive the extender properties.</param>
            <returns>
            true if this object can provide extender properties to the specified object; otherwise, false.
            </returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.ControllerBinder.GetControllerBinding(System.Web.UI.Control)">
            <summary>
            Gets the controller binding.
            </summary>
            <param name="control">The control.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.ControllerBinder.SetControllerBinding(System.Object,System.Object)">
            <summary>
            This is never fired in ASP.NET runtime code
            </summary>
            <param name="extendee"></param>
            <param name="value"></param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.ControllerBinder.IsBindableControl(System.Web.UI.Control)">
            <summary>
            Determines whether [is bindable control] [the specified control].
            </summary>
            <param name="control">The control.</param>
            <returns>
            	<c>true</c> if [is bindable control] [the specified control]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.ControllerBinder.AddBinding(System.Web.UI.Control)">
            <summary>
            Adds the binding.
            </summary>
            <param name="control">The control.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.ControllerBinder.FindControlWithID(System.String)">
            <summary>
            Finds the control with ID.
            </summary>
            <param name="controlID">The control ID.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.ControllerBinder.GetControllerActions">
            <summary>
            Gets the controller actions.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.ControllerBinder.IsVisualControl(System.Web.UI.Control)">
            <summary>
            Determines whether [is visual control] [the specified control].
            </summary>
            <param name="control">The control.</param>
            <returns>
            	<c>true</c> if [is visual control] [the specified control]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.ControllerBinder.FindControlAtDesignTime(System.String)">
            <summary>
            Finds the control at design time.
            </summary>
            <param name="controlID">The control ID.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.ControllerBinder.FindControlAtRunTime(System.String)">
            <summary>
            Finds the control at run time.
            </summary>
            <param name="controlID">The control ID.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.ControllerBinder.NotifyDesigner">
            <summary>
            Notifies the designer every time there is a change to
            the child properties.  This is a workaround for the Web
            Designer not issuing SetControllerBinding invocations.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.ControllerBinder.OnLoad(System.EventArgs)">
            <summary>
            Raises the <see cref="E:System.Web.UI.Control.Load"></see> event.
            </summary>
            <param name="e">The <see cref="T:System.EventArgs"></see> object that contains the event data.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.ControllerBinder.ContinueAction(System.String,System.Collections.IDictionary)">
            <summary>
            Continues the action.
            </summary>
            <param name="actionName">Name of the action.</param>
            <param name="actionArgs">The action args.</param>
        </member>
        <member name="P:Castle.MonoRail.Framework.Views.Aspx.ControllerBinder.DesignMode">
            <summary>
            Gets a value indicating whether a control is being used on a design surface.
            </summary>
            <value></value>
            <returns>true if the control is being used in a designer; otherwise, false.</returns>
        </member>
        <member name="P:Castle.MonoRail.Framework.Views.Aspx.ControllerBinder.ControllerBindings">
            <summary>
            Gets the controller bindings.
            </summary>
            <value>The controller bindings.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Views.Aspx.ControllerBinder.ActionArguments">
            <summary>
            Gets the action arguments.
            </summary>
            <value>The action arguments.</value>
        </member>
        <member name="E:Castle.MonoRail.Framework.Views.Aspx.ControllerBinder.BeforeAction">
            <summary>
            Occurs when [before action].
            </summary>
        </member>
        <member name="E:Castle.MonoRail.Framework.Views.Aspx.ControllerBinder.AfterAction">
            <summary>
            Occurs when [after action].
            </summary>
        </member>
        <member name="E:Castle.MonoRail.Framework.Views.Aspx.ControllerBinder.ActionError">
            <summary>
            Occurs when [action error].
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.Views.Aspx.ControllerBindingProperty">
            <summary>
            Pendent
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.ControllerBindingProperty.#ctor(Castle.MonoRail.Framework.Views.Aspx.ControllerBinding)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.Views.Aspx.ControllerBindingProperty"/> class.
            </summary>
            <param name="binding">The binding.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.ControllerBindingProperty.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:Castle.MonoRail.Framework.Views.Aspx.ControllerBindingProperty.ActionBindings">
            <summary>
            Gets the action bindings.
            </summary>
            <value>The action bindings.</value>
        </member>
        <member name="T:Castle.MonoRail.Framework.Views.Aspx.ActionBindingDelegate">
            <summary>
            Pendent
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.Views.Aspx.ActionBindingErrorDelegate">
            <summary>
            Pendent
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.Views.Aspx.ControllerBinding">
            <summary>
            Pendent
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.ControllerBinding.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.Views.Aspx.ControllerBinding"/> class.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.ControllerBinding.#ctor(Castle.MonoRail.Framework.Views.Aspx.ControllerBinder)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.Views.Aspx.ControllerBinding"/> class.
            </summary>
            <param name="binder">The binder.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.ControllerBinding.Validate">
            <summary>
            Validates this instance.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.ControllerBinding.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="P:Castle.MonoRail.Framework.Views.Aspx.ControllerBinding.Binder">
            <summary>
            Gets or sets the binder.
            </summary>
            <value>The binder.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Views.Aspx.ControllerBinding.ControlID">
            <summary>
            Gets or sets the control ID.
            </summary>
            <value>The control ID.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Views.Aspx.ControllerBinding.ControlInstance">
            <summary>
            Gets or sets the control instance.
            </summary>
            <value>The control instance.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Views.Aspx.ControllerBinding.ActionBindings">
            <summary>
            Gets the action bindings.
            </summary>
            <value>The action bindings.</value>
        </member>
        <member name="T:Castle.MonoRail.Framework.Views.Aspx.ControllerBindingCollection">
            <summary>
            Pendent
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.ControllerBindingCollection.#ctor(Castle.MonoRail.Framework.Views.Aspx.ControllerBinder)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.Views.Aspx.ControllerBindingCollection"/> class.
            </summary>
            <param name="binder">The binder.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.ControllerBindingCollection.Remove(System.Web.UI.Control)">
            <summary>
            Removes the specified control.
            </summary>
            <param name="control">The control.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.ControllerBindingCollection.Remove(System.String)">
            <summary>
            Removes the specified control id.
            </summary>
            <param name="controlId">The control id.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.ControllerBindingCollection.OnSetComplete(System.Int32,System.Object,System.Object)">
            <summary>
            Performs additional custom processes after setting a value in the <see cref="T:System.Collections.CollectionBase"></see> instance.
            </summary>
            <param name="index">The zero-based index at which oldValue can be found.</param>
            <param name="oldValue">The value to replace with newValue.</param>
            <param name="newValue">The new value of the element at index.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.ControllerBindingCollection.OnInsertComplete(System.Int32,System.Object)">
            <summary>
            The VS Designer adds new items as soon as their accessed,
            but items may not be valid so we have to clean up.
            <param name="index"></param>
            <param name="value"></param>
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.ControllerBindingCollection.OnRemoveComplete(System.Int32,System.Object)">
            <summary>
            Performs additional custom processes after removing an element from the <see cref="T:System.Collections.CollectionBase"></see> instance.
            </summary>
            <param name="index">The zero-based index at which value can be found.</param>
            <param name="value">The value of the element to remove from index.</param>
        </member>
        <member name="P:Castle.MonoRail.Framework.Views.Aspx.ControllerBindingCollection.Item(System.Web.UI.Control)">
            <summary>
            Gets the <see cref="T:Castle.MonoRail.Framework.Views.Aspx.ControllerBinding"/> with the specified control.
            </summary>
            <value></value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Views.Aspx.ControllerBindingCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:Castle.MonoRail.Framework.Views.Aspx.ControllerBinding"/> with the specified control id.
            </summary>
            <value></value>
        </member>
        <member name="T:Castle.MonoRail.Framework.Views.Aspx.DataBindingEvaluator">
            <summary>
            Pendent
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.Views.Aspx.IExpressionEvaluator">
            <summary>
            Pendent
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.IExpressionEvaluator.Evaluate(System.String,Castle.MonoRail.Framework.Views.Aspx.BindingContext)">
            <summary>
            Evaluates the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.DataBindingEvaluator.Evaluate(System.String,Castle.MonoRail.Framework.Views.Aspx.BindingContext)">
            <summary>
            Evaluates the specified expression.
            </summary>
            <param name="expression">The expression.</param>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.EventHandlerDelegate`1.#ctor(Castle.MonoRail.Framework.Views.Aspx.BindingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.Views.Aspx.EventHandlerDelegate`1"/> class.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.EventHandlerDelegate`1.HandleEvent(System.Object,`0)">
            <summary>
            Handles the event.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The e.</param>
        </member>
        <member name="T:Castle.MonoRail.Framework.Views.Aspx.EventListConverter">
            <summary>
            Pendent
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.EventListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns a collection of standard values for the data type this type converter is designed for when provided with a format context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context that can be used to extract additional information about the environment from which this converter is invoked. This parameter or properties of this parameter can be null.</param>
            <returns>
            A <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection"></see> that holds a standard set of valid values, or null if the data type does not support a standard set of values.
            </returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.EventListConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether this object supports a standard set of values that can be picked from a list, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <returns>
            true if <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues"></see> should be called to find a common set of values the object supports; otherwise, false.
            </returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.EventListConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether the collection of standard values returned from <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues"></see> is an exclusive list of possible values, using the specified context.
            </summary>
            <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext"></see> that provides a format context.</param>
            <returns>
            true if the <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection"></see> returned from <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues"></see> is an exhaustive list of possible values; false if other values are possible.
            </returns>
        </member>
        <member name="T:Castle.MonoRail.Framework.Views.Aspx.Contents">
            <summary>
            Control used on master pages to represent 
            the position where the child page contents 
            should be written.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.Contents.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Sends server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter"></see> object, which writes the content to be rendered on the client.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter"></see> object that receives the server control content.</param>
        </member>
        <member name="T:Castle.MonoRail.Framework.Views.Aspx.InvokeHelper">
            <summary>
            Control used to invoke method os a specified Helper.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.InvokeHelper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.Views.Aspx.InvokeHelper"/> class.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.InvokeHelper.DataBind">
            <summary>
            Binds a data source to the invoked server control and all its child controls.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.InvokeHelper.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Sends server control content to a provided <see cref="T:System.Web.UI.HtmlTextWriter"></see> object, which writes the content to be rendered on the client.
            </summary>
            <param name="writer">The <see cref="T:System.Web.UI.HtmlTextWriter"></see> object that receives the server control content.</param>
        </member>
        <member name="P:Castle.MonoRail.Framework.Views.Aspx.InvokeHelper.Name">
            <summary>
            The Helper's Name.
            </summary>
            <value>A <see cref="T:System.String"/> representing the Helper's Name.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Views.Aspx.InvokeHelper.Method">
            <summary>
            The name of the method which will be invoked.
            </summary>
            <value>A <see cref="T:System.String"/> rerprsenting the method's name</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Views.Aspx.InvokeHelper.Args">
            <summary>
            An <see cref="T:System.Array"/> of objects which are the method arguments.
            </summary>
            <value>An object[] representing the arguments.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Views.Aspx.InvokeHelper.Arg">
            <summary>
            An <see cref="T:System.Object"/> which is the method argument.
            </summary>
            <value>An <see cref="T:System.Object"/> representing the argument.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Views.Aspx.InvokeHelper.Controller">
            <summary>
            Gets the controller.
            </summary>
            <value>The controller.</value>
        </member>
        <member name="T:Castle.MonoRail.Framework.Views.Aspx.MasterPageBase">
            <summary>
            Pendent
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.MasterPageBase.LoadPageStateFromPersistenceMedium">
            <summary>
            Loads any saved view-state information to the <see cref="T:System.Web.UI.Page"></see> object.
            </summary>
            <returns>The saved view state.</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.MasterPageBase.SavePageStateToPersistenceMedium(System.Object)">
            <summary>
            Saves the page state to persistence medium.
            </summary>
            <param name="viewState">State of the view.</param>
        </member>
        <member name="T:Castle.MonoRail.Framework.Views.Aspx.WebFormsViewEngine">
            <summary>
            Default implementation of a <see cref="T:Castle.MonoRail.Framework.IViewEngine"/>.
            Uses ASP.Net WebForms as views.
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.ViewEngineBase">
            <summary>
            Abstract base class for View Engines.
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.ViewEngineBase.serviceProvider">
            <summary>
            The service provider instance
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.ViewEngineBase.Service(System.IServiceProvider)">
            <summary>
            Services the specified provider.
            </summary>
            <param name="provider">The provider.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.ViewEngineBase.HasTemplate(System.String)">
            <summary>
            Evaluates whether the specified template exists.
            </summary>
            <returns><c>true</c> if it exists</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.ViewEngineBase.Process(Castle.MonoRail.Framework.IRailsEngineContext,Castle.MonoRail.Framework.Controller,System.String)">
            <summary>
            Processes the view - using the templateName 
            to obtain the correct template,
            and using the context to output the result.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.ViewEngineBase.Process(System.IO.TextWriter,Castle.MonoRail.Framework.IRailsEngineContext,Castle.MonoRail.Framework.Controller,System.String)">
            <summary>
             Processes the view - using the templateName 
             to obtain the correct template
             and writes the results to the System.IO.TextWriter.
             </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.ViewEngineBase.ProcessPartial(System.IO.TextWriter,Castle.MonoRail.Framework.IRailsEngineContext,Castle.MonoRail.Framework.Controller,System.String)">
            <summary>
            Should process the specified partial. The partial name must contains
            the path relative to the views folder.
            </summary>
            <param name="output">The output.</param>
            <param name="context">The request context.</param>
            <param name="controller">The controller.</param>
            <param name="partialName">The partial name.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.ViewEngineBase.CreateJSGenerator(Castle.MonoRail.Framework.IRailsEngineContext)">
            <summary>
            Implementors should return a generator instance if
            the view engine supports JS generation.
            </summary>
            <param name="context">The request context.</param>
            <returns>A JS generator instance</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.ViewEngineBase.GenerateJS(Castle.MonoRail.Framework.IRailsEngineContext,Castle.MonoRail.Framework.Controller,System.String)">
            <summary>
            Processes the js generation view template - using the templateName
            to obtain the correct template, and using the context to output the result.
            </summary>
            <param name="context">The request context.</param>
            <param name="controller">The controller.</param>
            <param name="templateName">Name of the template.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.ViewEngineBase.GenerateJS(System.IO.TextWriter,Castle.MonoRail.Framework.IRailsEngineContext,Castle.MonoRail.Framework.Controller,System.String)">
            <summary>
            Processes the js generation view template - using the templateName
            to obtain the correct template, and using the specified <see cref="T:System.IO.TextWriter"/>
            to output the result.
            </summary>
            <param name="output">The output.</param>
            <param name="context">The request context.</param>
            <param name="controller">The controller.</param>
            <param name="templateName">Name of the template.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.ViewEngineBase.ProcessContents(Castle.MonoRail.Framework.IRailsEngineContext,Castle.MonoRail.Framework.Controller,System.String)">
            <summary>
            Wraps the specified content in the layout using the 
            context to output the result.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.ViewEngineBase.PreSendView(Castle.MonoRail.Framework.Controller,System.Object)">
            <summary>
            Invokes the <see cref="M:Castle.MonoRail.Framework.Controller.PreSendView(System.Object)"/>
            </summary>
            <param name="controller">The controller.</param>
            <param name="view">The view argument.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.ViewEngineBase.PostSendView(Castle.MonoRail.Framework.Controller,System.Object)">
            <summary>
            Invokes the <see cref="M:Castle.MonoRail.Framework.Controller.PostSendView(System.Object)"/>
            </summary>
            <param name="controller">The controller.</param>
            <param name="view">The view argument.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.ViewEngineBase.AdjustContentType(Castle.MonoRail.Framework.IRailsEngineContext)">
            <summary>
            Sets the HTTP Content-Type header appropriately.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.ViewEngineBase.AdjustJavascriptContentType(Castle.MonoRail.Framework.IRailsEngineContext)">
            <summary>
            Sets the HTTP Content-Type header to <c>text/javascript</c>
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.ViewEngineBase.SupportsJSGeneration">
            <summary>
            Gets a value indicating whether the view engine
            support the generation of JS.
            </summary>
            <value>
            <c>true</c> if JS generation is supported; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Castle.MonoRail.Framework.ViewEngineBase.ViewFileExtension">
            <summary>
            Gets the view file extension.
            </summary>
            <value>The view file extension.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.ViewEngineBase.JSGeneratorFileExtension">
            <summary>
            Gets the JS generator file extension.
            </summary>
            <value>The JS generator file extension.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.ViewEngineBase.XHtmlRendering">
            <summary>
            Gets/sets whether rendering should aim 
            to be XHTML compliant, obtained from the configuration.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.ViewEngineBase.ViewSourceLoader">
            <summary>
            Gets or sets the view source loader.
            </summary>
            <value>The view source loader.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.ViewEngineBase.Logger">
            <summary>
            Gets the logger.
            </summary>
            <value>The logger.</value>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.WebFormsViewEngine.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.Views.Aspx.WebFormsViewEngine"/> class.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.WebFormsViewEngine.HasTemplate(System.String)">
            <summary>
            Evaluates whether the specified template exists.
            </summary>
            <param name="templateName"></param>
            <returns><c>true</c> if it exists</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.WebFormsViewEngine.Process(Castle.MonoRail.Framework.IRailsEngineContext,Castle.MonoRail.Framework.Controller,System.String)">
            <summary>
            Obtains the aspx Page from the view name dispatch
            its execution using the standard ASP.Net API.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.WebFormsViewEngine.Process(System.IO.TextWriter,Castle.MonoRail.Framework.IRailsEngineContext,Castle.MonoRail.Framework.Controller,System.String)">
            <summary>
            Processes the view - using the templateName
            to obtain the correct template
            and writes the results to the System.IO.TextWriter.
            </summary>
            <param name="output"></param>
            <param name="context"></param>
            <param name="controller"></param>
            <param name="templateName"></param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.WebFormsViewEngine.ProcessPartial(System.IO.TextWriter,Castle.MonoRail.Framework.IRailsEngineContext,Castle.MonoRail.Framework.Controller,System.String)">
            <summary>
            Processes the partial.
            </summary>
            <param name="output">The output.</param>
            <param name="context">The context.</param>
            <param name="controller">The controller.</param>
            <param name="partialName">The partial name.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.WebFormsViewEngine.CreateJSGenerator(Castle.MonoRail.Framework.IRailsEngineContext)">
            <summary>
            Creates the JS generator.
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.WebFormsViewEngine.GenerateJS(System.IO.TextWriter,Castle.MonoRail.Framework.IRailsEngineContext,Castle.MonoRail.Framework.Controller,System.String)">
            <summary>
            Generates the JS.
            </summary>
            <param name="output">The output.</param>
            <param name="context">The context.</param>
            <param name="controller">The controller.</param>
            <param name="templateName">Name of the template.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.WebFormsViewEngine.ProcessContents(Castle.MonoRail.Framework.IRailsEngineContext,Castle.MonoRail.Framework.Controller,System.String)">
            <summary>
            Wraps the specified content in the layout using the
            context to output the result.
            </summary>
            <param name="context"></param>
            <param name="controller"></param>
            <param name="contents"></param>
        </member>
        <member name="P:Castle.MonoRail.Framework.Views.Aspx.WebFormsViewEngine.SupportsJSGeneration">
            <summary>
            Gets a value indicating whether the view engine
            support the generation of JS.
            </summary>
            <value>
            	<c>true</c> if JS generation is supported; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Views.Aspx.WebFormsViewEngine.ViewFileExtension">
            <summary>
            Gets the view file extension.
            </summary>
            <value>The view file extension.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Views.Aspx.WebFormsViewEngine.JSGeneratorFileExtension">
            <summary>
            Gets the JS generator file extension.
            </summary>
            <value>The JS generator file extension.</value>
        </member>
        <member name="T:Castle.MonoRail.Framework.IMonoRailHttpHandlerProvider">
            <summary>
            Depicts the contract the engine has 
            to perform the creation and disposal of
            <see cref="T:System.Web.IHttpHandler"/> instances.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.IMonoRailHttpHandlerProvider.ObtainMonoRailHttpHandler(Castle.MonoRail.Framework.IRailsEngineContext)">
            <summary>
            Implementors should perform their logic to 
            return a instance of <see cref="T:System.Web.IHttpHandler"/>.
            If the <see cref="T:System.Web.IHttpHandler"/> can not be created,
            it should return <c>null</c>.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.IMonoRailHttpHandlerProvider.ReleaseHandler(System.Web.IHttpHandler)">
            <summary>
            Implementors should perform their logic 
            to release the <see cref="T:System.Web.IHttpHandler"/> instance
            and its resources.
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.WebFormsViewEngine.ExecutePageProvider.#ctor(Castle.MonoRail.Framework.Views.Aspx.WebFormsViewEngine,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.Views.Aspx.WebFormsViewEngine.ExecutePageProvider"/> class.
            </summary>
            <param name="engine">The engine.</param>
            <param name="viewName">Name of the view.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.WebFormsViewEngine.ExecutePageProvider.ExecutePage(Castle.MonoRail.Framework.IRailsEngineContext)">
            <summary>
            Executes the page.
            </summary>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.WebFormsViewEngine.ExecutePageProvider.ObtainMonoRailHttpHandler(Castle.MonoRail.Framework.IRailsEngineContext)">
            <summary>
            Implementors should perform their logic to
            return a instance of <see cref="T:System.Web.IHttpHandler"/>.
            If the <see cref="T:System.Web.IHttpHandler"/> can not be created,
            it should return <c>null</c>.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.WebFormsViewEngine.ExecutePageProvider.ReleaseHandler(System.Web.IHttpHandler)">
            <summary>
            Implementors should perform their logic
            to release the <see cref="T:System.Web.IHttpHandler"/> instance
            and its resources.
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.DelegateMemoryStream.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.Views.Aspx.DelegateMemoryStream"/> class.
            </summary>
            <param name="original">The original.</param>
        </member>
        <member name="P:Castle.MonoRail.Framework.Views.Aspx.DelegateMemoryStream.OriginalStream">
            <summary>
            Gets the original stream.
            </summary>
            <value>The original stream.</value>
        </member>
        <member name="T:Castle.MonoRail.Framework.Views.Aspx.WebFormUtils">
            <summary>
            Pendent
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.WebFormUtils.FindControlRecursive(System.Web.UI.Control,System.String)">
            <summary>
            Finds the first control that matches the id, rescursively.
            </summary>
            <param name="rootControl">The root control.</param>
            <param name="controlId">The id of the control to search.</param>
            <returns>The matching control, or null if not found.</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.WebFormUtils.GetFieldOrProperty(System.Object,System.String)">
            <summary>
            Gets the field or property of the specified target.
            </summary>
            <param name="target">The target to act on.</param>
            <param name="name">The name of the field or property.</param>
            <returns>The retrieved field or property.</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.Aspx.WebFormUtils.SetFieldOrProperty(System.Object,System.String,System.Object)">
            <summary>
            Sets the field or property of the specified target.
            </summary>
            <param name="target">The target to act on.</param>
            <param name="name">The name of the field or property.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="T:Castle.MonoRail.Framework.Views.EmbeddedResourceViewSource">
            <summary>
            Represents a view source embedded as an assembly resource.
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.IViewSource">
            <summary>
            Represents a view template source
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.IViewSource.OpenViewStream">
            <summary>
            Opens the view stream.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Castle.MonoRail.Framework.IViewSource.LastUpdated">
            <summary>
            Gets or sets the last updated.
            </summary>
            <value>The last updated.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.IViewSource.LastModified">
            <summary>
            Gets the last modified.
            </summary>
            <value>The last modified.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.IViewSource.EnableCache">
            <summary>
            Gets a value indicating whether cache is enabled for it.
            </summary>
            <value><c>true</c> if cache is enabled for it; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.EmbeddedResourceViewSource.#ctor(System.String,Castle.MonoRail.Framework.AssemblySourceInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.Views.EmbeddedResourceViewSource"/> class.
            </summary>
            <param name="templateName">Name of the template.</param>
            <param name="sourceInfo">The source info.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.EmbeddedResourceViewSource.OpenViewStream">
            <summary>
            Opens the view stream.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Castle.MonoRail.Framework.Views.EmbeddedResourceViewSource.LastModified">
            <summary>
            Gets the last modified.
            </summary>
            <value>The last modified.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Views.EmbeddedResourceViewSource.LastUpdated">
            <summary>
            Gets or sets the last updated.
            </summary>
            <value>The last updated.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Views.EmbeddedResourceViewSource.EnableCache">
            <summary>
            Gets a value indicating whether cache is enabled for it.
            </summary>
            <value><c>true</c> if cache is enabled for it; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Castle.MonoRail.Framework.FileAssemblyViewSourceLoader">
            <summary>
            Default <see cref="T:Castle.MonoRail.Framework.IViewSourceLoader"/> implementation
            that uses the file system and assembly source as source of view templates
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.IViewSourceLoader">
            <summary>
            Defines a contract that abstracts view template locations. 
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.IViewSourceLoader.HasTemplate(System.String)">
            <summary>
            Evaluates whether the specified template exists.
            </summary>
            <param name="templateName">The template name</param>
            <returns><c>true</c> if it exists</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.IViewSourceLoader.GetViewSource(System.String)">
            <summary>
            Builds and returns a representation of a view template
            </summary>
            <param name="templateName">The template name</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.IViewSourceLoader.ListViews(System.String)">
            <summary>
            Gets a list of views on the specified directory
            </summary>
            <param name="dirName">Directory name</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.IViewSourceLoader.AddAssemblySource(Castle.MonoRail.Framework.AssemblySourceInfo)">
            <summary>
            Adds the assembly source.
            </summary>
            <param name="assemblySourceInfo">The assembly source info.</param>
        </member>
        <member name="P:Castle.MonoRail.Framework.IViewSourceLoader.ViewRootDir">
            <summary>
            Gets/sets the root directory of views, obtained from the configuration.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.IViewSourceLoader.EnableCache">
            <summary>
            Gets or sets whether the instance should use cache
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.IViewSourceLoader.AssemblySources">
            <summary>
            Gets a list of assembly sources
            </summary>
        </member>
        <member name="E:Castle.MonoRail.Framework.IViewSourceLoader.ViewChanged">
            <summary>
            Raised when the view is changed.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.FileAssemblyViewSourceLoader.Service(System.IServiceProvider)">
            <summary>
            Services the specified provider.
            </summary>
            <param name="provider">The provider.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.FileAssemblyViewSourceLoader.HasTemplate(System.String)">
            <summary>
            Evaluates whether the specified template exists.
            </summary>
            <param name="templateName">The template name</param>
            <returns><c>true</c> if it exists</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.FileAssemblyViewSourceLoader.GetViewSource(System.String)">
            <summary>
            Builds and returns a representation of a view template
            </summary>
            <param name="templateName">The template name</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.FileAssemblyViewSourceLoader.ListViews(System.String)">
            <summary>
            Gets a list of views on the specified directory
            </summary>
            <param name="dirName">Directory name</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.FileAssemblyViewSourceLoader.AddAssemblySource(Castle.MonoRail.Framework.AssemblySourceInfo)">
            <summary>
            Adds the assembly source.
            </summary>
            <param name="assemblySourceInfo">The assembly source info.</param>
        </member>
        <member name="P:Castle.MonoRail.Framework.FileAssemblyViewSourceLoader.ViewRootDir">
            <summary>
            Gets/sets the root directory of views, 
            obtained from the configuration.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.FileAssemblyViewSourceLoader.EnableCache">
            <summary>
            Gets or sets whether the instance should use cache
            </summary>
            <value></value>
        </member>
        <member name="P:Castle.MonoRail.Framework.FileAssemblyViewSourceLoader.AssemblySources">
            <summary>
            Gets a list of assembly sources
            </summary>
            <value></value>
        </member>
        <member name="E:Castle.MonoRail.Framework.FileAssemblyViewSourceLoader.ViewChanged">
            <summary>
            Raised when the view is changed.
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.Views.FileViewSource">
            <summary>
            Represents a view template source on the file system.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.FileViewSource.#ctor(System.IO.FileInfo,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.Views.FileViewSource"/> class.
            </summary>
            <param name="fileInfo">The file info.</param>
            <param name="enableCache">if set to <c>true</c> [enable cache].</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Views.FileViewSource.OpenViewStream">
            <summary>
            Opens the view stream.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Castle.MonoRail.Framework.Views.FileViewSource.EnableCache">
            <summary>
            Gets a value indicating whether cache is enabled for it.
            </summary>
            <value><c>true</c> if cache is enabled for it; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Views.FileViewSource.LastUpdated">
            <summary>
            Gets or sets the last updated.
            </summary>
            <value>The last updated.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Views.FileViewSource.LastModified">
            <summary>
            Gets the last modified.
            </summary>
            <value>The last modified.</value>
        </member>
        <member name="T:Castle.MonoRail.Framework.Constants">
            <summary>
            MonoRail constants
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Constants.ControllerContextKey">
            <summary>
            TODO: Document why this is necessary
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Constants.OriginalViewKey">
            <summary>
            TODO: Document why this is necessary
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.ControllerException">
            <summary>
            Represents and Exception during the controller processing.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.ControllerException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.ControllerException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.ControllerException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.ControllerException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.ControllerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.ControllerException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="T:Castle.MonoRail.Framework.ControllerLifecycleExecutor">
            <summary>
            Default implementation of <see cref="T:Castle.MonoRail.Framework.IControllerLifecycleExecutor"/>
            <para>
            Handles the whole controller lifecycle in a request.
            </para>
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.IControllerLifecycleExecutor">
            <summary>
            Manages the execution of a controller action.
            <para>
            The order of methods invocation is the following:
            </para>
            <para>
            1. InitializeController
            </para>
            <para>
            2. SelectAction
            </para>
            <para>
            3. RunStartRequestFilters (if false is returned - or an exception - 
            you might want to invoke PerformErrorHandling)
            </para>
            <para>
            4. ProcessSelectedAction
            </para>
            <para>
            5. Dispose
            </para>
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.IControllerLifecycleExecutor.InitializeController(System.String,System.String,System.String)">
            <summary>
            Should bring the controller to an usable
            state by populating its fields with values that
            represent the current request
            </summary>
            <param name="action">The action name</param>
            <param name="area">The area name</param>
            <param name="controller">The controller name</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.IControllerLifecycleExecutor.SelectAction(System.String,System.String)">
            <summary>
            Should resolve the action to be executed (method or dynamic
            action) based on the parameters
            </summary>
            <param name="action">The action name</param>
            <param name="controller">The controller name</param>
            <returns><c>true</c> if it was able to resolve it</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.IControllerLifecycleExecutor.SelectAction(System.String,System.String,System.Collections.IDictionary)">
            <summary>
            Should resolve the action to be executed (method or dynamic
            action) based on the parameters and custom arguments
            </summary>
            <param name="action">The action name</param>
            <param name="controller">The controller name</param>
            <param name="actionArgs">Custom arguments</param>
            <returns><c>true</c> if it was able to resolve it</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.IControllerLifecycleExecutor.ProcessSelectedAction">
            <summary>
            Runs the action (or the dynamic action),
            process the rescue or the view accordingly 
            to the process result.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.IControllerLifecycleExecutor.ProcessSelectedAction(System.Collections.IDictionary)">
            <summary>
            Runs the action (or the dynamic action),
            process the rescue or the view accordingly 
            to the process result.
            </summary>
            <param name="actionArgs">Custom arguments</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.IControllerLifecycleExecutor.PerformErrorHandling">
            <summary>
            Should performs the rescue (if available), raise
            the global error event and throw the exception
            if the rescue was not found
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.IControllerLifecycleExecutor.RunStartRequestFilters">
            <summary>
            Runs the start request filters.
            </summary>
            <returns><c>false</c> if the process should be stopped</returns>
        </member>
        <member name="P:Castle.MonoRail.Framework.IControllerLifecycleExecutor.Controller">
            <summary>
            Gets the controller instance.
            </summary>
            <value>The controller.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.IControllerLifecycleExecutor.HasError">
            <summary>
            Gets a value indicating whether an error has happened during controller processing
            </summary>
            <value>
            	<see langword="true"/> if has error; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="F:Castle.MonoRail.Framework.ControllerLifecycleExecutor.ExecutorEntry">
            <summary>
            Key for the executor instance on <c>Context.Items</c>
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.ControllerLifecycleExecutor.viewEngineManager">
            <summary>
            The reference to the <see cref="T:Castle.MonoRail.Framework.IViewEngineManager"/> instance
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.ControllerLifecycleExecutor.filterFactory">
            <summary>
            Reference to the <see cref="T:Castle.MonoRail.Framework.IFilterFactory"/> instance
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.ControllerLifecycleExecutor.transformFilterFactory">
            <summary>
            Reference to the <see cref="T:Castle.MonoRail.Framework.ITransformFilterFactory"/> instance
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.ControllerLifecycleExecutor.filters">
            <summary>
            Holds the filters associated with the action
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.ControllerLifecycleExecutor.#ctor(Castle.MonoRail.Framework.Controller,Castle.MonoRail.Framework.IRailsEngineContext)">
            <summary>
            Initializes a new instance of 
            the <see cref="T:Castle.MonoRail.Framework.ControllerLifecycleExecutor"/> class.
            </summary>
            <param name="controller">The controller.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.ControllerLifecycleExecutor.Service(System.IServiceProvider)">
            <summary>
            Invoked by the framework in order to give a chance to
            obtain other services
            </summary>
            <param name="provider">The service proviver</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.ControllerLifecycleExecutor.Dispose">
            <summary>
            Disposes the filters and resources associated with a controller.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.ControllerLifecycleExecutor.InitializeController(System.String,System.String,System.String)">
            <summary>
            Should bring the controller to an usable
            state by populating its fields with values that
            represent the current request
            </summary>
            <param name="areaName">The area name</param>
            <param name="controllerName">The controller name</param>
            <param name="actionName">The action name</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.ControllerLifecycleExecutor.SelectAction(System.String,System.String)">
            <summary>
            Selects the action to execute based on the url information
            </summary>
            <param name="controllerName">The controller name</param>
            <param name="actionName">The action name</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.ControllerLifecycleExecutor.SelectAction(System.String,System.String,System.Collections.IDictionary)">
            <summary>
            Selects the action to execute based on the url information
            </summary>
            <param name="controllerName">The controller name</param>
            <param name="actionName">The action name</param>
            <param name="actionArgs">The action arguments.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.ControllerLifecycleExecutor.ProcessSelectedAction">
            <summary>
            Executes the method or the dynamic action
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.ControllerLifecycleExecutor.ProcessSelectedAction(System.Collections.IDictionary)">
            <summary>
            Executes the method or the dynamic action with custom arguments
            </summary>
            <param name="actionArgs">The action args.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.ControllerLifecycleExecutor.PrepareTransformFilter(System.Reflection.MethodInfo)">
            <summary>
            Prepares the transform filter.
            </summary>
            <param name="method">The method.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.ControllerLifecycleExecutor.PerformErrorHandling">
            <summary>
            Performs the error handling:
            <para>
            - Tries to run the rescue page<br/>
            - Throws the exception<br/>
            </para>
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.ControllerLifecycleExecutor.RunStartRequestFilters">
            <summary>
            Runs the start request filters.
            </summary>
            <returns><c>false</c> if the process should be stopped</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.ControllerLifecycleExecutor.CreateAndInitializeHelpers">
            <summary>
            Creates the and initialize helpers associated with a controller.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.ControllerLifecycleExecutor.RunBeforeActionFilters">
            <summary>
            Runs the after view rendering filters.
            </summary>
            <returns><c>false</c> if the process should be stopped</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.ControllerLifecycleExecutor.RunAfterActionFilters">
            <summary>
            Runs the after action filters.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.ControllerLifecycleExecutor.RunAfterRenderFilters">
            <summary>
            Runs the after view rendering filters.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.ControllerLifecycleExecutor.PerformAdditionalHelperInitialization(System.Object)">
            <summary>
            Performs the additional helper initialization
            checking if the helper instance implements <see cref="T:Castle.Core.IServiceEnabledComponent"/>.
            </summary>
            <param name="helperInstance">The helper instance.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.ControllerLifecycleExecutor.ProcessScaffoldIfPresent">
            <summary>
            Invokes the scaffold support if the controller
            is associated with a scaffold
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.ControllerLifecycleExecutor.CreateResources(System.Reflection.MethodInfo)">
            <summary>
            Creates the resources associated with a controller
            </summary>
            <param name="method">The method.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.ControllerLifecycleExecutor.ReleaseResources">
            <summary>
            Releases the resources.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.ControllerLifecycleExecutor.ShouldSkip(System.Reflection.MethodInfo)">
            <summary>
            Identifies if no filter should run for the given action.
            </summary>
            <param name="method">The method.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.ControllerLifecycleExecutor.CopyFilterDescriptors">
            <summary>
            Clones all Filter descriptors, in order to get a writable copy.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.ControllerLifecycleExecutor.ObtainDefaultLayoutName">
            <summary>
            Obtains the name of the default layout.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.ControllerLifecycleExecutor.PerformRescue(System.Reflection.MethodInfo,System.Exception)">
            <summary>
            Performs the rescue.
            </summary>
            <param name="method">The action (can be null in the case of dynamic actions).</param>
            <param name="ex">The exception.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.ControllerLifecycleExecutor.GetRescueFor(System.Collections.IList,System.Type)">
            <summary>
            Gets the rescue for the specified exception type.
            </summary>
            <param name="rescues">The rescues.</param>
            <param name="exceptionType">Type of the exception.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.ControllerLifecycleExecutor.RaiseOnActionExceptionOnExtension">
            <summary>
            Raises the on action exception on extension.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.ControllerLifecycleExecutor.FindOutDefaultMethod(System.Collections.IDictionary)">
            <summary>
            The following lines were added to handle _default processing
            if present look for and load _default action method
            <seealso cref="T:Castle.MonoRail.Framework.DefaultActionAttribute"/>
            <param name="methodArgs">Method arguments</param>
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.ControllerLifecycleExecutor.HasError">
            <summary>
            Gets a value indicating whether an error has happened during controller processing
            </summary>
            <value>
            	<see langword="true"/> if has error; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="P:Castle.MonoRail.Framework.ControllerLifecycleExecutor.Controller">
            <summary>
            Gets the controller.
            </summary>
            <value>The controller.</value>
        </member>
        <member name="T:Castle.MonoRail.Framework.ControllerNotFoundException">
            <summary>
            Thrown when a controller is not found.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.ControllerNotFoundException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.ControllerNotFoundException"/> class.
            </summary>
            <param name="area">The area.</param>
            <param name="controller">The controller.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.ControllerNotFoundException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.ControllerNotFoundException"/> class.
            </summary>
            <param name="area">The area.</param>
            <param name="controller">The controller.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.ControllerNotFoundException.#ctor(Castle.MonoRail.Framework.UrlInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.ControllerNotFoundException"/> class.
            </summary>
            <param name="url">The URL.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.ControllerNotFoundException.#ctor(Castle.MonoRail.Framework.UrlInfo,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.ControllerNotFoundException"/> class.
            </summary>
            <param name="url">The URL.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.ControllerNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.ControllerNotFoundException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.ControllerNotFoundException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo"/>
            with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is a null reference (<see langword="Nothing"/> in Visual Basic).</exception>
        </member>
        <member name="M:Castle.MonoRail.Framework.ControllerNotFoundException.BuildExceptionMessage(System.String,System.String)">
            <summary>
            Builds the exception message.
            </summary>
            <param name="area">The area.</param>
            <param name="controller">The controller.</param>
            <returns></returns>
        </member>
        <member name="P:Castle.MonoRail.Framework.ControllerNotFoundException.Area">
            <summary>
            Gets the area name.
            </summary>
            <value>The area name.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.ControllerNotFoundException.Controller">
            <summary>
            Gets the controller name.
            </summary>
            <value>The controller name.</value>
        </member>
        <member name="T:Castle.MonoRail.Framework.ActionDelegate">
            <summary>
            Delegate to create dynamic actions without the need for a separated class.
            </summary>
            <param name="controller">Controller instance</param>
        </member>
        <member name="T:Castle.MonoRail.Framework.DelegateDynamicAction">
            <summary>
            Represents a dynamic action that forwards the
            call to an <see cref="T:Castle.MonoRail.Framework.ActionDelegate"/>
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.IDynamicAction">
            <summary>
            An action that is not a method
            on the controller.
            </summary>
            
            <seealso cref="T:Castle.MonoRail.Framework.IDynamicActionProvider"/>
            
            <remarks>
            To attach a dynamic action to a controller use 
            the <see cref="P:Castle.MonoRail.Framework.Controller.DynamicActions"/> dictionary.
            </remarks>
        </member>
        <member name="M:Castle.MonoRail.Framework.IDynamicAction.Execute(Castle.MonoRail.Framework.Controller)">
            <summary>
            Implementors should perform the action 
            upon this invocation
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.DelegateDynamicAction.#ctor(Castle.MonoRail.Framework.ActionDelegate)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.DelegateDynamicAction"/> class.
            </summary>
            <param name="actionDelegate">The action delegate.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.DelegateDynamicAction.Execute(Castle.MonoRail.Framework.Controller)">
            <summary>
            Implementors should perform the action
            upon this invocation
            </summary>
            <param name="controller"></param>
        </member>
        <member name="T:Castle.MonoRail.Framework.EngineContextModule">
            <summary>
            Provides the services used and shared by the framework. Also 
            is in charge of creating an implementation of <see cref="T:Castle.MonoRail.Framework.IRailsEngineContext"/>
            upon the start of a new request.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.EngineContextModule.Init(System.Web.HttpApplication)">
            <summary>
            Configures the framework, starts the services
            and application hooks.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Castle.MonoRail.Framework.EngineContextModule.Dispose">
            <summary>
            Disposes of the resources (other than memory) used by the
            module that implements <see langword="IHttpModule."/>
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.EngineContextModule.CreateAndStartContainer(System.Web.HttpApplication)">
            <summary>
            Creates and starts MonoRail's service container.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Castle.MonoRail.Framework.EngineContextModule.OnStartMonoRailRequest(System.Object,System.EventArgs)">
            <summary>
            This method is invoked in response to BeginRequest event.
            It checks if the request should be treat by MonoRail (by reading the file extension)
            and if so, creates the <see cref="T:Castle.MonoRail.Framework.IRailsEngineContext"/> instance.
            </summary>
            <param name="sender">The HttpApplication instance</param>
            <param name="e">Event information</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.EngineContextModule.CreateControllerAndRunStartRequestFilters(System.Object,System.EventArgs)">
            <summary>
            Creates the controller, selects the target action 
            and run start request filters.
            </summary>
            <param name="sender">The HttpApplication instance</param>
            <param name="e">Event information</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.EngineContextModule.CreateController(Castle.MonoRail.Framework.IRailsEngineContext)">
            <summary>
            Uses the url information and the controller factory
            to instantiate the proper controller.
            </summary>
            <param name="context">MonoRail's request context</param>
            <returns>A controller instance</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.EngineContextModule.CreateControllerExecutor(Castle.MonoRail.Framework.Controller,Castle.MonoRail.Framework.IRailsEngineContext)">
            <summary>
            Creates the and initialize executor.
            </summary>
            <param name="controller">The controller.</param>
            <param name="context">The context.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.EngineContextModule.SubscribeToApplicationHooks(System.Web.HttpApplication)">
            <summary>
            Registers to <c>HttpApplication</c> events
            </summary>
            <param name="context">The application instance</param>
        </member>
        <member name="T:Castle.MonoRail.Framework.Filter">
            <summary>
            Base class for filters which dispatches to virtual methods
            based on the <see cref="T:Castle.MonoRail.Framework.ExecuteEnum"/> value.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Filter.Perform(Castle.MonoRail.Framework.ExecuteEnum,Castle.MonoRail.Framework.IRailsEngineContext,Castle.MonoRail.Framework.Controller)">
            <summary>
            Implementors should perform they filter logic and
            return <c>true</c> if the action should be processed.
            </summary>
            <param name="exec">When this filter is being invoked</param>
            <param name="context">Current context</param>
            <param name="controller">The controller instance</param>
            <returns><c>true</c> if the action 
            should be invoked, otherwise <c>false</c></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Filter.OnAfterAction(Castle.MonoRail.Framework.IRailsEngineContext,Castle.MonoRail.Framework.Controller)">
            <summary>
            Override this method if the filter was set to
            handle <see cref="F:Castle.MonoRail.Framework.ExecuteEnum.AfterAction"/>
            </summary>
            <param name="context">The MonoRail request context</param>
            <param name="controller">The controller instance</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Filter.OnAfterRendering(Castle.MonoRail.Framework.IRailsEngineContext,Castle.MonoRail.Framework.Controller)">
            <summary>
            Override this method if the filter was set to
            handle <see cref="F:Castle.MonoRail.Framework.ExecuteEnum.AfterRendering"/>
            </summary>
            <param name="context">The MonoRail request context</param>
            <param name="controller">The controller instance</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Filter.OnBeforeAction(Castle.MonoRail.Framework.IRailsEngineContext,Castle.MonoRail.Framework.Controller)">
            <summary>
            Override this method if the filter was set to
            handle <see cref="F:Castle.MonoRail.Framework.ExecuteEnum.BeforeAction"/>
            </summary>
            <param name="context">The MonoRail request context</param>
            <param name="controller">The controller instance</param>
            <returns><c>true</c> if the request should proceed, otherwise <c>false</c></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.Filter.OnStartRequest(Castle.MonoRail.Framework.IRailsEngineContext,Castle.MonoRail.Framework.Controller)">
            <summary>
            Override this method if the filter was set to
            handle <see cref="F:Castle.MonoRail.Framework.ExecuteEnum.StartRequest"/>
            </summary>
            <param name="context">The MonoRail request context</param>
            <param name="controller">The controller instance</param>
            <returns><c>true</c> if the request should proceed, otherwise <c>false</c></returns>
        </member>
        <member name="T:Castle.MonoRail.Framework.Flash">
            <summary>
            Keeps data across a single request using the session
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.Flash.FlashKey">
            <summary>
            Flash key
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Flash.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.Flash"/> class.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Flash.#ctor(Castle.MonoRail.Framework.Flash)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.Flash"/> class.
            </summary>
            <param name="copy">The copy.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.Flash.Sweep">
            <summary>
            Remove any element thats not marked to be kept.
            This method is automatically called by the framework after the controller is processed.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Flash.Keep">
            <summary>
            Keeps the entire flash contents available for the next action
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Flash.Keep(System.Object)">
            <summary>
            Keeps the Flash['key'] contents available for the next action
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Flash.Discard">
            <summary>
            Marks the entire flash to be discarded by the end of the current action
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Flash.Discard(System.Object)">
            <summary>
            Marks Flash[key] to be discarded by the end of the current action
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Flash.Now(System.Object,System.Object)">
            <summary>
            Sets a flash that will not be available to the next action, only to the current.
            <code>
                Flash.Now( key, "Hello current action" )
            </code>
            <para>
            This method enables you to use the flash as a central messaging system in your app.
            When you need to pass an object to the next action, you use the standard flash assign (<c>[]=</c>).
            When you need to pass an object to the current action, you use <c>Now</c>, and your object will
            vanish when the current action is done.
            </para>
            <para>
            Entries set via <c>Now</c> are accessed the same way as standard entries: <c>Flash['my-key']</c>.
            </para>
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.Flash.Add(System.Object,System.Object)">
            <summary>
            Adds an element with the specified key and value into the <see cref="T:System.Collections.Hashtable"></see>.
            </summary>
            <param name="key">The key of the element to add.</param>
            <param name="value">The value of the element to add. The value can be null.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Hashtable"></see> is read-only.-or- The <see cref="T:System.Collections.Hashtable"></see> has a fixed size. </exception>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the <see cref="T:System.Collections.Hashtable"></see>. </exception>
            <exception cref="T:System.ArgumentNullException">key is null. </exception>
        </member>
        <member name="M:Castle.MonoRail.Framework.Flash.InternalAdd(System.Object,System.Object)">
            <summary>
            Making sure we keep any item added 
            to the flash directly for at least one more action.
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.Flash.Item(System.Object)">
            <summary>
            Gets or sets the <see cref="T:System.Object"/> with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="P:Castle.MonoRail.Framework.Flash.HasItemsToKeep">
            <summary>
            Gets a value indicating whether this instance has items to keep.
            </summary>
            <value>
            	<c>true</c> if this instance has items to keep; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Castle.MonoRail.Framework.IDynamicActionProvider">
            <summary>
            Defines that the implementor wants to add
            dynamic actions to controllers.
            </summary>
            
            <seealso cref="T:Castle.MonoRail.Framework.DynamicActionProviderAttribute"/>
            
            <remarks>
            You can associate a dynamic action provider with a controller using the
            <see cref="T:Castle.MonoRail.Framework.DynamicActionProviderAttribute"/>
            </remarks>
        </member>
        <member name="M:Castle.MonoRail.Framework.IDynamicActionProvider.IncludeActions(Castle.MonoRail.Framework.Controller)">
            <summary>
            Implementors should register their dynamics 
            actions into the controller
            </summary>
            <param name="controller">The target controller</param>
        </member>
        <member name="T:Castle.MonoRail.Framework.ExecuteEnum">
            <summary>
            Enum (flag) to indicate when the filter should 
            or is invoked.
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.ExecuteEnum.Before">
            <summary>
            The filter is invoked before the action.
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.ExecuteEnum.After">
            <summary>
            The filter is invoked after the action.
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.ExecuteEnum.Around">
            <summary>
            The filter is invoked before and after the action.
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.ExecuteEnum.StartRequest">
            <summary>
            The filter is invoked 
            when the MonoRail request is started.
            It is the best place to run authentication check
            if you are using caching. However, the Session will
            not be available.
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.ExecuteEnum.BeforeAction">
            <summary>
            The filter is invoked before the action.
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.ExecuteEnum.AfterAction">
            <summary>
            The filter is invoked after the action.
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.ExecuteEnum.AfterRendering">
            <summary>
            The filter is invoked after the rendering.
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.ExecuteEnum.Always">
            <summary>
            The filter is invoked around all steps.
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.IWizardController">
            <summary>
            Depicts the contract for wizard controllers. 
            </summary>
            
            <seealso cref="T:Castle.MonoRail.Framework.WizardActionProvider"/>
            <seealso cref="T:Castle.MonoRail.Framework.WizardStepPage"/>
            
            <example>
            The following code shows how to create a simple wizard with two pages.
            <code>
            [DynamicActionProvider(typeof(WizardActionProvider))]
            public class MyWizardController : Controller, IWizardController
            {
            	public void OnWizardStart()
            	{ }
            
            	public bool OnBeforeStep(String wizardName, String stepName, WizardStepPage step)
            	{
            		returtn true; 
            	}
            
            	public void OnAfterStep(String wizardName, String stepName, WizardStepPage step)
            	{ }
            	
            	public WizardStepPage[] GetSteps(IRailsEngineContext context)
            	{
            		return new WizardStepPage[] { new MyPage1(), new MyPage2() }; 
            	}
            }
            </code>
            </example>
            
            <remarks>
            The interface members allow you to perform some logic on important
            events from a wizard lifecycle. The <see cref="M:Castle.MonoRail.Framework.IWizardController.GetSteps(Castle.MonoRail.Framework.IRailsEngineContext)"/> must be used
            to return the steps the wizard has.
            </remarks>
        </member>
        <member name="M:Castle.MonoRail.Framework.IWizardController.OnWizardStart">
            <summary>
            Called when the wizard starts. 
            </summary>
            <remarks>
            This is invoked only once per wizard lifecycle, but can 
            happen again if the data added by the infrastructure was not found on the session.
            </remarks>
        </member>
        <member name="M:Castle.MonoRail.Framework.IWizardController.OnBeforeStep(System.String,System.String,Castle.MonoRail.Framework.WizardStepPage)">
            <summary>
            Called before processing a step. Returning <c>false</c> tells 
            the infrastructure to stop the processing the request.
            </summary>
            <param name="wizardName">Name of the wizard.</param>
            <param name="stepName">Name of the step.</param>
            <param name="step">The step instance.</param>
            <returns><c>true</c> if the process should proceed, otherwise, <c>false</c></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.IWizardController.OnAfterStep(System.String,System.String,Castle.MonoRail.Framework.WizardStepPage)">
            <summary>
            Called after processing a step.
            </summary>
            <param name="wizardName">Name of the wizard.</param>
            <param name="stepName">Name of the step.</param>
            <param name="step">The step instance.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.IWizardController.GetSteps(Castle.MonoRail.Framework.IRailsEngineContext)">
            <summary>
            Implementors should return an array of steps that compose the wizard. 
            </summary>
            <remarks>
            This should be deterministic per session -- ie.
            always return the same instances for the same user session.
            </remarks>
            <param name="context">The web request context.</param>
            <returns>An array of steps</returns>
        </member>
        <member name="T:Castle.MonoRail.Framework.MonoRailHttpHandler">
            <summary>
            Implements <see cref="T:System.Web.IHttpHandler"/> to dispatch the web
            requests. 
            <seealso cref="T:Castle.MonoRail.Framework.MonoRailHttpHandlerFactory"/>
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.MonoRailHttpHandler.logger">
            <summary>Logger instance that won't be null, even when logging is disabled</summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.MonoRailHttpHandler.#ctor(Castle.Core.Logging.ILogger)">
            <summary>
            Constructs a <c>MonoRailHttpHandler</c>
            </summary>
            <param name="logger"></param>
        </member>
        <member name="M:Castle.MonoRail.Framework.MonoRailHttpHandler.ProcessRequest(System.Web.HttpContext)">
            <summary>
            Pendent
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Castle.MonoRail.Framework.MonoRailHttpHandler.Process(Castle.MonoRail.Framework.IRailsEngineContext)">
            <summary>
            Performs the base work of MonoRail. Extracts 
            the information from the URL, obtain the controller 
            that matches this information and dispatch the execution 
            to it.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Castle.MonoRail.Framework.MonoRailHttpHandler.ExtractUrlInfo(Castle.MonoRail.Framework.IRailsEngineContext)">
            <summary>
            Can be overriden so new semantics can be supported.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:Castle.MonoRail.Framework.MonoRailHttpHandler.IsReusable">
            <summary>
            Pendent
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.MonoRailHttpHandler.CurrentContext">
            <summary>
            Gets the current context.
            </summary>
            <value>The current context.</value>
        </member>
        <member name="T:Castle.MonoRail.Framework.MonoRailHttpHandlerFactory">
            <summary>
            Coordinates the creation of new <see cref="T:Castle.MonoRail.Framework.MonoRailHttpHandler"/> 
            and uses the configuration to obtain the correct factories 
            instances.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.MonoRailHttpHandlerFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.MonoRailHttpHandlerFactory"/> class.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.MonoRailHttpHandlerFactory.GetHandler(System.Web.HttpContext,System.String,System.String,System.String)">
            <summary>
            Returns an instance of a class that implements 
            the <see cref="T:System.Web.IHttpHandler"></see> interface.
            </summary>
            <param name="context">An instance of the <see cref="T:System.Web.HttpContext"></see> class that provides references to intrinsic server objects (for example, Request, Response, Session, and Server) used to service HTTP requests.</param>
            <param name="requestType">The HTTP data transfer method (GET or POST) that the client uses.</param>
            <param name="url">The <see cref="P:System.Web.HttpRequest.RawUrl"></see> of the requested resource.</param>
            <param name="pathTranslated">The <see cref="P:System.Web.HttpRequest.PhysicalApplicationPath"></see> to the requested resource.</param>
            <returns>
            A new <see cref="T:System.Web.IHttpHandler"></see> object that processes the request.
            </returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.MonoRailHttpHandlerFactory.ReleaseHandler(System.Web.IHttpHandler)">
            <summary>
            Enables a factory to reuse an existing handler instance.
            </summary>
            <param name="handler">The <see cref="T:System.Web.IHttpHandler"></see> object to reuse.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.MonoRailHttpHandlerFactory.CreateLogger(System.String,System.IServiceProvider)">
            <summary>
            This might be subject to race conditions, but
            I'd rather take the risk - which in the end
            means just replacing the instance - than
            creating locks that will affect every single request
            </summary>
            <param name="name">Logger name</param>
            <param name="provider">Service provider</param>
            <returns>Logger instance</returns>
        </member>
        <member name="T:Castle.MonoRail.Framework.MonoRailServiceContainer">
            <summary>
            Parent Service container for the MonoRail framework
            </summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.MonoRailServiceContainer.extensionManager">
            <summary>The only one Extension Manager</summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.MonoRailServiceContainer.extensions">
            <summary>Prevents GC from collecting the extensions</summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.MonoRailServiceContainer.config">
            <summary>Keeps only one copy of the config</summary>
        </member>
        <member name="F:Castle.MonoRail.Framework.MonoRailServiceContainer.extension2handler">
            <summary></summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.MonoRailServiceContainer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.MonoRailServiceContainer"/> class.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.MonoRailServiceContainer.#ctor(Castle.MonoRail.Framework.Configuration.MonoRailConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.MonoRailServiceContainer"/> class.
            </summary>
            <param name="config">The config.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.MonoRailServiceContainer.RegisterBaseService(System.Type,System.Object)">
            <summary>
            Allows registration without the configuration
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.MonoRailServiceContainer.Start">
            <summary>
            Initializes the container state and its services
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.MonoRailServiceContainer.IsMonoRailRequest(System.String)">
            <summary>
            Checks whether the specified URL is to be handled by MonoRail
            </summary>
            <param name="url">The URL.</param>
            <returns>
            <see langword="true"/> if it is a MonoRail request; otherwise, <see langword="false"/>.
            </returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.MonoRailServiceContainer.InitExtensions(Castle.MonoRail.Framework.Configuration.MonoRailConfiguration)">
            <summary>
            Reads the configuration and initializes
            registered extensions.
            </summary>
            <param name="config">The configuration object</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.MonoRailServiceContainer.InitServices(Castle.MonoRail.Framework.Configuration.MonoRailConfiguration)">
            <summary>
            Coordinates the instantiation, registering and initialization (lifecycle-wise)
            of the services used by MonoRail.
            </summary>
            <param name="config">The configuration object</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.MonoRailServiceContainer.LifecycleInitialize(System.Collections.IList)">
            <summary>
            Checks for services that implements <see cref="T:Castle.Core.IInitializable"/>
            or <see cref="T:System.ComponentModel.ISupportInitialize"/> and initialize them through the interface
            </summary>
            <param name="services">List of MonoRail's services</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.MonoRailServiceContainer.LifecycleService(System.Collections.IList)">
            <summary>
            Checks for services that implements <see cref="T:Castle.Core.IServiceEnabledComponent"/>
            and invoke <see cref="M:Castle.Core.IServiceEnabledComponent.Service(System.IServiceProvider)"/> on them
            </summary>
            <param name="services">List of MonoRail's services</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.MonoRailServiceContainer.InstantiateAndRegisterServices(Castle.MonoRail.Framework.Configuration.ServiceEntryCollection)">
            <summary>
            Instantiates and registers the services used by MonoRail.
            </summary>
            <param name="services">The service's registry</param>
            <returns>List of service's instances</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.MonoRailServiceContainer.InitConfiguration">
            <summary>
            Registers the default implementation of services, if 
            they are not registered
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.MonoRailServiceContainer.RegisterMissingServices(Castle.MonoRail.Framework.Configuration.MonoRailConfiguration)">
            <summary>
            Checks whether non-optional services were supplied 
            through the configuration, and if not, register the 
            default implementation.
            </summary>
            <param name="config">The configuration object</param>
        </member>
        <member name="T:Castle.MonoRail.Framework.ProcessEngine">
            <summary>
            Core engine. Performs the base work or the
            framework, processing the URL and dispatching 
            the execution to the controller.
            </summary>
            <remarks>
            This is were all fun begins.
            </remarks>
        </member>
        <member name="P:Castle.MonoRail.Framework.ProcessEngine.CurrentContext">
            <summary>
            Returns the MonoRail context assosciated with the current
            request if one is available, otherwise <c>null</c>.
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.RoutingModule">
            <summary>
            Provides routing basic services in response to rules defined in 
            <see cref="P:Castle.MonoRail.Framework.Configuration.MonoRailConfiguration.RoutingRules"/>.
            <remarks>
            This class delegates the resolving of the path that will be evaluated
            to derivided classes.
            </remarks>
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.RoutingModule.Init(System.Web.HttpApplication)">
            <summary>
            Initializes a module and prepares it to handle requests.
            </summary>
            <param name="context">An <see cref="T:System.Web.HttpApplication"></see> that provides access to the methods, properties, and events common to all application objects within an ASP.NET application</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.RoutingModule.Dispose">
            <summary>
            Disposes of the resources (other than memory) used by the module that implements <see cref="T:System.Web.IHttpModule"></see>.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.RoutingModule.OnBeginRequest(System.Object,System.EventArgs)">
            <summary>
            Called when [begin request].
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.RoutingModule.GetSourcePath">
            <summary>
            Gets the source path.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Castle.MonoRail.Framework.RoutingModule.OriginalPath">
            <summary>
            Returns the original path 
            (before rewriting occured), or <c>null</c> 
            if rewriting didn't occur on this request.
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.ServiceContainerAccessor">
            <summary>
            Exposes a single point to expose MonoRail's Container
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.ServiceContainerAccessor.ServiceContainer">
            <summary>
            Gets or sets the service container.
            </summary>
            <value>The service container.</value>
        </member>
        <member name="T:Castle.MonoRail.Framework.ServiceProviderLocator">
            <summary>
            Uses the HttpContext and the <see cref="T:Castle.Core.IServiceProviderExAccessor"/> 
            to access the container instance.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.ServiceProviderLocator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.ServiceProviderLocator"/> class.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.ServiceProviderLocator.LocateProvider">
            <summary>
            Locates the service provider using the registered strategies.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.ServiceProviderLocator.AddLocatorStrategy(Castle.MonoRail.Framework.ServiceProviderLocator.IAccessorStrategy)">
            <summary>
            Adds a locator strategy.
            </summary>
            <param name="strategy">The strategy.</param>
        </member>
        <member name="P:Castle.MonoRail.Framework.ServiceProviderLocator.Instance">
            <summary>
            Gets the instance.
            </summary>
            <value>The instance.</value>
        </member>
        <member name="T:Castle.MonoRail.Framework.ServiceProviderLocator.IAccessorStrategy">
            <summary>
            Abstract an approach to access a <see cref="T:Castle.Core.IServiceProviderEx"/>
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.ServiceProviderLocator.IAccessorStrategy.LocateProvider">
            <summary>
            Locates the provider.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Castle.MonoRail.Framework.ServiceProviderLocator.ServiceProviderAccessorStrategy">
            <summary>
            Default strategy to access a service provider
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.ServiceProviderLocator.ServiceProviderAccessorStrategy.LocateProvider">
            <summary>
            Locates the provider using the ApplicationInstance and casting it to
            <see cref="T:Castle.Core.IServiceProviderExAccessor"/>
            </summary>
            <returns></returns>
        </member>
        <member name="T:Castle.MonoRail.Framework.SmartDispatcherController">
            <summary>
            Specialization of <see cref="T:Castle.MonoRail.Framework.Controller"/> that tries
            to match the request params to method arguments.
            </summary>
            <remarks>
            You don't even need to always use databinding within
            arguments. <see cref="M:Castle.MonoRail.Framework.SmartDispatcherController.BindObject(Castle.MonoRail.Framework.ParamStore,System.Type,System.String)"/> 
            and <see cref="M:Castle.MonoRail.Framework.SmartDispatcherController.BindObjectInstance(System.Object,System.String)"/>
            provides the same functionality to be used in place.
            </remarks>
        </member>
        <member name="F:Castle.MonoRail.Framework.SmartDispatcherController.boundInstances">
            <summary>
            Represents the errors associated with an instance bound.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.SmartDispatcherController.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.SmartDispatcherController"/> class.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.SmartDispatcherController.#ctor(Castle.Components.Binder.IDataBinder)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.SmartDispatcherController"/> class.
            </summary>
            <param name="binder">The binder.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.SmartDispatcherController.PopulateValidatorErrorSummary(System.Object,Castle.Components.Binder.IDataBinder)">
            <summary>
            Populates the validator error summary.
            </summary>
            <param name="instance">The instance.</param>
            <param name="binderUsedForBinding">The binder used for binding.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.SmartDispatcherController.GetErrorSummary(System.Object)">
            <summary>
            Gets the error summary associated with validation errors.
            <para>
            Will only work for instances populated by the <c>DataBinder</c>
            </para>
            </summary>
            <param name="instance">object instance</param>
            <returns>Error summary instance (can be null if the DataBinder wasn't configured to validate)</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.SmartDispatcherController.HasValidationError(System.Object)">
            <summary>
            Returns <c>true</c> if the given instance had 
            validation errors during binding.
            <para>
            Will only work for instances populated by the <c>DataBinder</c>
            </para>
            </summary>
            <param name="instance">object instance</param>
            <returns><c>true</c> if the validation had an error</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.SmartDispatcherController.GetDataBindErrors(System.Object)">
            <summary>
            Gets a list of errors that were thrown during the 
            object process, like conversion errors.
            </summary>
            <param name="instance">The instance that was populated by a binder.</param>
            <returns>List of errors</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.SmartDispatcherController.InvokeMethod(System.Reflection.MethodInfo,Castle.MonoRail.Framework.IRequest,System.Collections.IDictionary)">
            <summary>
            Constructs the parameters for the action and invokes it.
            </summary>
            <param name="method">The method.</param>
            <param name="request">The request.</param>
            <param name="actionArgs">The action args.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.SmartDispatcherController.SelectMethod(System.String,System.Collections.IDictionary,Castle.MonoRail.Framework.IRequest,System.Collections.IDictionary)">
            <summary>
            Uses a simple heuristic to select the best method -- especially in the 
            case of method overloads. 
            </summary>
            <param name="action">The action name</param>
            <param name="actions">The avaliable actions</param>
            <param name="request">The request instance</param>
            <param name="actionArgs">The custom arguments for the action</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.SmartDispatcherController.SelectBestCandidate(System.Reflection.MethodInfo[],System.Collections.Specialized.NameValueCollection,System.Collections.IDictionary)">
            <summary>
            Selects the best method given the set of entries 
            avaliable on <paramref name="webParams"/> and <paramref name="actionArgs"/>
            </summary>
            <param name="candidates">The candidates.</param>
            <param name="webParams">The web params.</param>
            <param name="actionArgs">The custom action args.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.SmartDispatcherController.GetRequestParameterName(System.Reflection.ParameterInfo)">
            <summary>
            Gets the name of the request parameter.
            </summary>
            <param name="param">The param.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.SmartDispatcherController.CalculatePoints(System.Reflection.MethodInfo,System.Collections.Specialized.NameValueCollection,System.Collections.IDictionary)">
            <summary>
            Uses a simplest algorithm to compute points for a method 
            based on parameters available, which in turn reflects
            the best method is the one which the parameters will be 
            able to satistfy more arguments
            </summary>
            <param name="candidate">The method candidate</param>
            <param name="webParams">Parameter source</param>
            <param name="actionArgs">Extra parameters</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.SmartDispatcherController.BuildMethodArguments(System.Reflection.ParameterInfo[],Castle.MonoRail.Framework.IRequest,System.Collections.IDictionary)">
            <summary>
            Returns an array that hopefully fills the arguments of the selected action.
            </summary>
            <remarks>
            Each parameter is inspected and we try to obtain an implementation of
            <see cref="T:Castle.MonoRail.Framework.IParameterBinder"/> from the attributes the parameter have (if any).
            If an implementation is found, it's used to fill the value for that parameter.
            Otherwise we use simple conversion to obtain the value.
            </remarks>
            <param name="parameters">Parameters to obtain the values to</param>
            <param name="request">The current request, which is the source to obtain the data</param>
            <param name="actionArgs">Extra arguments to pass to the action.</param>
            <returns>An array with the arguments values</returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.SmartDispatcherController.BindObject(System.Type,System.String)">
            <summary>
            Binds the object of the specified type using the given prefix.
            </summary>
            <param name="targetType">Type of the target.</param>
            <param name="prefix">The prefix.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.SmartDispatcherController.BindObject(Castle.MonoRail.Framework.ParamStore,System.Type,System.String)">
            <summary>
            Binds the object of the specified type using the given prefix.
            but only using the entries from the collection specified on the <paramref name="from"/>
            </summary>
            <param name="from">Restricts the data source of entries.</param>
            <param name="targetType">Type of the target.</param>
            <param name="prefix">The prefix.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.SmartDispatcherController.BindObject(Castle.MonoRail.Framework.ParamStore,System.Type,System.String,System.String,System.String)">
            <summary>
            Binds the object of the specified type using the given prefix.
            but only using the entries from the collection specified on the <paramref name="from"/>
            </summary>
            <param name="from">From.</param>
            <param name="targetType">Type of the target.</param>
            <param name="prefix">The prefix.</param>
            <param name="excludedProperties">The excluded properties, comma separated list.</param>
            <param name="allowedProperties">The allowed properties, comma separated list.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.SmartDispatcherController.BindObjectInstance(System.Object,System.String)">
            <summary>
            Binds the object instance using the specified prefix.
            </summary>
            <param name="instance">The instance.</param>
            <param name="prefix">The prefix.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.SmartDispatcherController.BindObjectInstance(System.Object,Castle.MonoRail.Framework.ParamStore,System.String)">
            <summary>
            Binds the object instance using the given prefix.
            but only using the entries from the collection specified on the <paramref name="from"/>
            </summary>
            <param name="instance">The instance.</param>
            <param name="from">From.</param>
            <param name="prefix">The prefix.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.SmartDispatcherController.BindObject``1(System.String)">
            <summary>
            Binds the object of the specified type using the given prefix.
            </summary>
            <typeparam name="T">Target type</typeparam>
            <param name="prefix">The prefix.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.SmartDispatcherController.BindObject``1(Castle.MonoRail.Framework.ParamStore,System.String)">
            <summary>
            Binds the object of the specified type using the given prefix.
            but only using the entries from the collection specified on the <paramref name="from"/>
            </summary>
            <typeparam name="T">Target type</typeparam>
            <param name="from">From.</param>
            <param name="prefix">The prefix.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.SmartDispatcherController.BindObject``1(Castle.MonoRail.Framework.ParamStore,System.String,System.String,System.String)">
            <summary>
            Binds the object of the specified type using the given prefix.
            but only using the entries from the collection specified on the <paramref name="from"/>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="from">From.</param>
            <param name="prefix">The prefix.</param>
            <param name="excludedProperties">The excluded properties.</param>
            <param name="allowedProperties">The allowed properties.</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.SmartDispatcherController.ObtainParamsNode(Castle.MonoRail.Framework.ParamStore)">
            <summary>
            This method is for internal use only
            </summary>
            <param name="from"></param>
            <returns></returns>
        </member>
        <member name="P:Castle.MonoRail.Framework.SmartDispatcherController.Binder">
            <summary>
            Gets the binder.
            </summary>
            <value>The binder.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.SmartDispatcherController.BoundInstanceErrors">
            <summary>
            Gets or sets the bound instance errors.
            </summary>
            <value>The bound instance errors.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.SmartDispatcherController.ValidationSummaryPerInstance">
            <summary>
            Gets the validation summary (key is the object instance)
            </summary>
            <value>The validation summary per instance.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.SmartDispatcherController.ParamsNode">
            <summary>
            Lazy initialized property with a hierarchical 
            representation of the flat data on <see cref="P:Castle.MonoRail.Framework.Controller.Params"/>
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.SmartDispatcherController.FormNode">
            <summary>
            Lazy initialized property with a hierarchical 
            representation of the flat data on <see cref="P:Castle.MonoRail.Framework.IRequest.Form"/>
            </summary>
        </member>
        <member name="P:Castle.MonoRail.Framework.SmartDispatcherController.QueryStringNode">
            <summary>
            Lazy initialized property with a hierarchical 
            representation of the flat data on <see cref="P:Castle.MonoRail.Framework.IRequest.QueryString"/>
            </summary>
        </member>
        <member name="T:Castle.MonoRail.Framework.ViewComponentException">
            <summary>
            Exception for ViewComponent related errors.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.ViewComponentException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.ViewComponentException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.ViewComponentException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.ViewComponentException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.ViewComponentException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.ViewComponentException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"></see> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"></see> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"></see> is zero (0). </exception>
            <exception cref="T:System.ArgumentNullException">The info parameter is null. </exception>
        </member>
        <member name="T:Castle.MonoRail.Framework.WizardActionProvider">
            <summary>
            Provide easy to use Wizard-like support.
            </summary>
            <seealso cref="T:Castle.MonoRail.Framework.IWizardController"/>
            <remarks>
            MonoRail uses the DynamicAction infrastructure to provide 
            wizard support so we dont force 
            the programmer to inherit from a specific Controller 
            which can be quite undesirable in real world projects. 
            <para>
            Nevertheless we do require that the programmer 
            implements <see cref="T:Castle.MonoRail.Framework.IWizardController"/> on the wizard controller.
            </para>
            </remarks>
        </member>
        <member name="M:Castle.MonoRail.Framework.WizardActionProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.WizardActionProvider"/> class.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.WizardActionProvider.IncludeActions(Castle.MonoRail.Framework.Controller)">
            <summary>
            Implementation of IDynamicActionProvider.
            <para>
            Grab all steps related to the wizard 
            and register them as dynamic actions.
            </para>
            </summary>
            <param name="controller">Wizard controller (must implement <see cref="T:Castle.MonoRail.Framework.IWizardController"/></param>
        </member>
        <member name="M:Castle.MonoRail.Framework.WizardActionProvider.Execute(Castle.MonoRail.Framework.Controller)">
            <summary>
            Invoked as "start" action
            </summary>
            <param name="controller"></param>
        </member>
        <member name="M:Castle.MonoRail.Framework.WizardActionProvider.OnStepActionRequested(Castle.MonoRail.Framework.Controller)">
            <summary>
            Invoked when a step is accessed on the url, 
            i.e. http://host/mywizard/firststep.rails and 
            when an inner action is invoked like http://host/mywizard/firststep-save.rails
            </summary>
            <param name="controller"></param>
        </member>
        <member name="M:Castle.MonoRail.Framework.WizardActionProvider.EmptyAction(Castle.MonoRail.Framework.Controller)">
            <summary>
            Represents an empty (no-op) action.
            </summary>
            <param name="controller">The controller.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.WizardActionProvider.HasRequiredSessionData(Castle.MonoRail.Framework.Controller)">
            <summary>
            Determines whether all wizard specific information is on the user session.
            </summary>
            <param name="controller">The controller.</param>
            <returns>
            	<c>true</c> if has session data; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.WizardActionProvider.StartWizard(Castle.MonoRail.Framework.Controller,System.Boolean)">
            <summary>
            Starts the wizard by adding the required information to the 
            session and invoking <see cref="M:Castle.MonoRail.Framework.IWizardController.OnWizardStart"/>
            and detecting the first step.
            </summary>
            <param name="controller">The controller.</param>
            <param name="redirect">if set to <c>true</c>, a redirect 
            will be issued to the first step.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.WizardActionProvider.ResetSteps(Castle.MonoRail.Framework.Controller)">
            <summary>
            Resets the steps by invoking <see cref="M:Castle.MonoRail.Framework.WizardStepPage.Reset"/>
            on all steps instances.
            </summary>
            <param name="controller">The controller.</param>
        </member>
        <member name="T:Castle.MonoRail.Framework.WizardStepPage">
            <summary>
            Represents a wizard step. In essence it is a controller, but with some subtle differences. 
            See the remarks for more information.
            </summary>
            
            <seealso cref="T:Castle.MonoRail.Framework.WizardActionProvider"/>
            <seealso cref="T:Castle.MonoRail.Framework.IWizardController"/>
            
            <remarks>
            Implementors can optionally override <see cref="P:Castle.MonoRail.Framework.WizardStepPage.ActionName"/>
            to customize the accessible action name and 
            <see cref="M:Castle.MonoRail.Framework.WizardStepPage.RenderWizardView"/> in order to define which view 
            should be used (defaults to the step name)
            
            <para>
            Please note that an step might have actions as well, but it follows a different 
            convention to be accessed. You must use the wizard controller name, slash, the
            step name, hifen, the action name. For example <c>/MyWizard/AddressInformation-GetCountries.rails</c>
            Which would access the following action
            </para>
            
            <code>
            public class AddressInformation : WizardStepPage
            {
            	public void GetCountries()
            	{
            	  ...
            	}
            }
            </code>
            <para>
            Note that the RedirectToAction will always send to an internal action, so you should
            omit the controller name for that.
            </para>
            
            <para>
            You can use a family of redirect methods to go back and forward on the wizard's 
            steps.
            </para>
            </remarks>
        </member>
        <member name="M:Castle.MonoRail.Framework.WizardStepPage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.WizardStepPage"/> class.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.WizardStepPage.#ctor(Castle.Components.Binder.IDataBinder)">
            <summary>
            Initializes a new instance of the <see cref="T:Castle.MonoRail.Framework.WizardStepPage"/> class.
            </summary>
            <param name="binder">The binder.</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.WizardStepPage.Initialize(Castle.MonoRail.Framework.Controller)">
            <summary>
            Invoked by <see cref="T:Castle.MonoRail.Framework.WizardActionProvider"/>. 
            </summary>
            <remarks>
            This can be overriden but it's important to invoke the base 
            implementation.
            </remarks>
            <param name="wizardController"></param>
        </member>
        <member name="M:Castle.MonoRail.Framework.WizardStepPage.Reset">
            <summary>
            Invoked when the wizard is being access from the start 
            action. Implementors should perform session clean up (if 
            they actually use the session) to avoid stale data on forms.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.WizardStepPage.RenderWizardView">
            <summary>
            Used to decide on which view to render.
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.WizardStepPage.IsPreConditionSatisfied(Castle.MonoRail.Framework.IRailsEngineContext)">
            <summary>
            Allow the step to assert some condition 
            before being accessed. Returning <c>false</c>
            prevents the step from being processed but 
            before doing that you must send a redirect.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.WizardStepPage.SelectMethod(System.String,System.Collections.IDictionary,Castle.MonoRail.Framework.IRequest,System.Collections.IDictionary)">
            <summary>
            Uses a simple heuristic to select the best method -- especially in the
            case of method overloads.
            </summary>
            <param name="action">The action name</param>
            <param name="actions">The avaliable actions</param>
            <param name="request">The request instance</param>
            <param name="actionArgs">The custom arguments for the action</param>
            <returns></returns>
        </member>
        <member name="M:Castle.MonoRail.Framework.WizardStepPage.DoNavigate">
            <summary>
            Navigates within the wizard steps using optionally a form parameter 
            to dictate to where it should go.
            </summary>
            <remarks>
            By default this will invoke <see cref="M:Castle.MonoRail.Framework.WizardStepPage.RedirectToNextStep(System.Collections.IDictionary)"/>
            however you can send a field form <c>navigate.to</c> to customize this.
            The possible values for <c>navigate.to</c> are:
            <list type="bullet">
            <item><term>previous</term>
            <description>Invokes <see cref="M:Castle.MonoRail.Framework.WizardStepPage.RedirectToPreviousStep"/></description></item>
            <item><term>first</term>
            <description>Invokes <see cref="M:Castle.MonoRail.Framework.WizardStepPage.RedirectToFirstStep"/></description></item>
            <item><term>step name</term>
            <description>A custom step name to navigate</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:Castle.MonoRail.Framework.WizardStepPage.DoNavigate(System.String[])">
            <summary>
            Navigates within the wizard steps using optionally a form parameter 
            to dictate to where it should go.
            </summary>
            <remarks>
            By default this will invoke <see cref="M:Castle.MonoRail.Framework.WizardStepPage.RedirectToNextStep(System.Collections.IDictionary)"/>
            however you can send a field form <c>navigate.to</c> to customize this.
            The possible values for <c>navigate.to</c> are:
            <list type="bullet">
            <item><term>previous</term>
            <description>Invokes <see cref="M:Castle.MonoRail.Framework.WizardStepPage.RedirectToPreviousStep"/></description></item>
            <item><term>first</term>
            <description>Invokes <see cref="M:Castle.MonoRail.Framework.WizardStepPage.RedirectToFirstStep"/></description></item>
            <item><term>step name</term>
            <description>A custom step name to navigate</description></item>
            </list>
            </remarks>
            <param name="queryStringParameters">Query string parameters to be on the URL</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.WizardStepPage.DoNavigate(System.Collections.IDictionary)">
            <summary>
            Navigates within the wizard steps using optionally a form parameter 
            to dictate to where it should go.
            </summary>
            <remarks>
            By default this will invoke <see cref="M:Castle.MonoRail.Framework.WizardStepPage.RedirectToNextStep(System.Collections.IDictionary)"/>
            however you can send a field form <c>navigate.to</c> to customize this.
            The possible values for <c>navigate.to</c> are:
            <list type="bullet">
            <item><term>previous</term>
            <description>Invokes <see cref="M:Castle.MonoRail.Framework.WizardStepPage.RedirectToPreviousStep"/></description></item>
            <item><term>first</term>
            <description>Invokes <see cref="M:Castle.MonoRail.Framework.WizardStepPage.RedirectToFirstStep"/></description></item>
            <item><term>step name</term>
            <description>A custom step name to navigate</description></item>
            </list>
            </remarks>
            <param name="queryStringParameters">Query string parameters to be on the URL</param>
        </member>
        <member name="M:Castle.MonoRail.Framework.WizardStepPage.RedirectToNextStep">
            <summary>
            Sends a redirect to the next wizard step (if it exists)
            </summary>
            <exception cref="T:Castle.MonoRail.Framework.RailsException">if no further step exists</exception>
        </member>
        <member name="M:Castle.MonoRail.Framework.WizardStepPage.RedirectToNextStep(System.String[])">
            <summary>
            Sends a redirect to the next wizard step (if it exists)
            </summary>
            <exception cref="T:Castle.MonoRail.Framework.RailsException">if no further step exists</exception>
        </member>
        <member name="M:Castle.MonoRail.Framework.WizardStepPage.RedirectToNextStep(System.Collections.IDictionary)">
            <summary>
            Sends a redirect to the next wizard step (if it exists)
            </summary>
            <exception cref="T:Castle.MonoRail.Framework.RailsException">if no further step exists</exception>
        </member>
        <member name="M:Castle.MonoRail.Framework.WizardStepPage.RedirectToPreviousStep">
            <summary>
            Sends a redirect to the previous wizard step
            </summary>
            <exception cref="T:Castle.MonoRail.Framework.RailsException">
            if no previous step exists (ie. already in the first one)</exception>
        </member>
        <member name="M:Castle.MonoRail.Framework.WizardStepPage.RedirectToPreviousStep(System.String[])">
            <summary>
            Sends a redirect to the previous wizard step
            </summary>
            <exception cref="T:Castle.MonoRail.Framework.RailsException">
            if no previous step exists (ie. already in the first one)</exception>
        </member>
        <member name="M:Castle.MonoRail.Framework.WizardStepPage.RedirectToPreviousStep(System.Collections.IDictionary)">
            <summary>
            Sends a redirect to the previous wizard step
            </summary>
            <exception cref="T:Castle.MonoRail.Framework.RailsException">
            if no previous step exists (ie. already in the first one)</exception>
        </member>
        <member name="M:Castle.MonoRail.Framework.WizardStepPage.RedirectToFirstStep">
            <summary>
            Sends a redirect to the first wizard step
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.WizardStepPage.RedirectToFirstStep(System.String[])">
            <summary>
            Sends a redirect to the first wizard step
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.WizardStepPage.RedirectToFirstStep(System.Collections.IDictionary)">
            <summary>
            Sends a redirect to the first wizard step
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.WizardStepPage.RedirectToStep(System.String)">
            <summary>
            Sends a redirect to a custom step (that must exists)
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.WizardStepPage.RedirectToStep(System.String,System.String[])">
            <summary>
            Sends a redirect to a custom step (that must exists)
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.WizardStepPage.RedirectToStep(System.String,System.Collections.IDictionary)">
            <summary>
            Sends a redirect to a custom step (that must exists)
            </summary>
        </member>
        <member name="M:Castle.MonoRail.Framework.WizardStepPage.TransformActionName(System.String)">
            <summary>
            For a wizard step, an internal action will always be named
            with the controller name as a prefix , plus an hifen and finally
            the action name. This implementation does exactly that.
            </summary>
            <param name="action">Raw action name</param>
            <returns>Properly formatted action name</returns>
        </member>
        <member name="P:Castle.MonoRail.Framework.WizardStepPage.WizardController">
            <summary>
            Gets the wizard controller.
            </summary>
            <value>The wizard controller.</value>
        </member>
        <member name="P:Castle.MonoRail.Framework.WizardStepPage.ActionName">
            <summary>
            Returns the action name that will be used 
            to represent this step.
            </summary>
        </member>
    </members>
</doc>
